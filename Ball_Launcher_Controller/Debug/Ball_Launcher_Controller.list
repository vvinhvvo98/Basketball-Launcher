
Ball_Launcher_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004350  08004350  00005350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043ac  080043ac  00006064  2**0
                  CONTENTS
  4 .ARM          00000008  080043ac  080043ac  000053ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043b4  080043b4  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b4  080043b4  000053b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043b8  080043b8  000053b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080043bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000064  08004420  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08004420  00006328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a7e0  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000188e  00000000  00000000  00010874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  00012108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000744  00000000  00000000  00012a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001619b  00000000  00000000  00013194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7b9  00000000  00000000  0002932f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088159  00000000  00000000  00035ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bdc41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b70  00000000  00000000  000bdc84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c07f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004338 	.word	0x08004338

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08004338 	.word	0x08004338

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fd21 	bl	8000fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f8ff 	bl	800078c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 f9e7 	bl	8000960 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000592:	f000 f963 	bl	800085c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000596:	f000 f98f 	bl	80008b8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800059a:	f000 f9b7 	bl	800090c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  MPU6050 imu;
  stat = mpu6050_init(&imu, &hi2c1);
 800059e:	463b      	mov	r3, r7
 80005a0:	4967      	ldr	r1, [pc, #412]	@ (8000740 <main+0x1c0>)
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fa40 	bl	8000a28 <mpu6050_init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	4b65      	ldr	r3, [pc, #404]	@ (8000744 <main+0x1c4>)
 80005ae:	801a      	strh	r2, [r3, #0]
  mpu6050_calibrate(&imu);
 80005b0:	463b      	mov	r3, r7
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fa92 	bl	8000adc <mpu6050_calibrate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (STATE) {
 80005b8:	4b63      	ldr	r3, [pc, #396]	@ (8000748 <main+0x1c8>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d8fb      	bhi.n	80005b8 <main+0x38>
 80005c0:	a201      	add	r2, pc, #4	@ (adr r2, 80005c8 <main+0x48>)
 80005c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005c6:	bf00      	nop
 80005c8:	080005dd 	.word	0x080005dd
 80005cc:	08000633 	.word	0x08000633
 80005d0:	0800064b 	.word	0x0800064b
 80005d4:	0800068d 	.word	0x0800068d
 80005d8:	080006d7 	.word	0x080006d7
	          case 0: // STATE_INIT
	              if (stat) {
 80005dc:	4b59      	ldr	r3, [pc, #356]	@ (8000744 <main+0x1c4>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d021      	beq.n	8000628 <main+0xa8>
	            	  stat = mpu6050_init(&imu, &hi2c1);
 80005e4:	463b      	mov	r3, r7
 80005e6:	4956      	ldr	r1, [pc, #344]	@ (8000740 <main+0x1c0>)
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fa1d 	bl	8000a28 <mpu6050_init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	461a      	mov	r2, r3
 80005f2:	4b54      	ldr	r3, [pc, #336]	@ (8000744 <main+0x1c4>)
 80005f4:	801a      	strh	r2, [r3, #0]
	            	  HAL_Delay(500);
 80005f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005fa:	f000 fd59 	bl	80010b0 <HAL_Delay>
	            	  mpu6050_calibrate(&imu);
 80005fe:	463b      	mov	r3, r7
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fa6b 	bl	8000adc <mpu6050_calibrate>
	            	  HAL_Delay(500);
 8000606:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800060a:	f000 fd51 	bl	80010b0 <HAL_Delay>
	                  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, stat);
 800060e:	4b4d      	ldr	r3, [pc, #308]	@ (8000744 <main+0x1c4>)
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	2108      	movs	r1, #8
 8000618:	484c      	ldr	r0, [pc, #304]	@ (800074c <main+0x1cc>)
 800061a:	f000 ffef 	bl	80015fc <HAL_GPIO_WritePin>
	                  STATE = STATE_2_IMU;
 800061e:	4b4c      	ldr	r3, [pc, #304]	@ (8000750 <main+0x1d0>)
 8000620:	881a      	ldrh	r2, [r3, #0]
 8000622:	4b49      	ldr	r3, [pc, #292]	@ (8000748 <main+0x1c8>)
 8000624:	801a      	strh	r2, [r3, #0]
	              } else {
	                  STATE = STATE_1_ERROR;
	              }
	              break;
 8000626:	e089      	b.n	800073c <main+0x1bc>
	                  STATE = STATE_1_ERROR;
 8000628:	4b4a      	ldr	r3, [pc, #296]	@ (8000754 <main+0x1d4>)
 800062a:	881a      	ldrh	r2, [r3, #0]
 800062c:	4b46      	ldr	r3, [pc, #280]	@ (8000748 <main+0x1c8>)
 800062e:	801a      	strh	r2, [r3, #0]
	              break;
 8000630:	e084      	b.n	800073c <main+0x1bc>

	          case 1:
	              HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000632:	2108      	movs	r1, #8
 8000634:	4845      	ldr	r0, [pc, #276]	@ (800074c <main+0x1cc>)
 8000636:	f000 fffa 	bl	800162e <HAL_GPIO_TogglePin>
	              HAL_Delay(200);
 800063a:	20c8      	movs	r0, #200	@ 0xc8
 800063c:	f000 fd38 	bl	80010b0 <HAL_Delay>
	              STATE = STATE_0_INIT;
 8000640:	4b45      	ldr	r3, [pc, #276]	@ (8000758 <main+0x1d8>)
 8000642:	881a      	ldrh	r2, [r3, #0]
 8000644:	4b40      	ldr	r3, [pc, #256]	@ (8000748 <main+0x1c8>)
 8000646:	801a      	strh	r2, [r3, #0]
	              break;
 8000648:	e078      	b.n	800073c <main+0x1bc>

	          case 2:
	              mpu6050_update(&imu);
 800064a:	463b      	mov	r3, r7
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fa95 	bl	8000b7c <mpu6050_update>
	              gX = mpu6050_get_gX(&imu);
 8000652:	463b      	mov	r3, r7
 8000654:	4618      	mov	r0, r3
 8000656:	f000 faeb 	bl	8000c30 <mpu6050_get_gX>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	4b3f      	ldr	r3, [pc, #252]	@ (800075c <main+0x1dc>)
 8000660:	801a      	strh	r2, [r3, #0]
	              gY = mpu6050_get_gY(&imu);
 8000662:	463b      	mov	r3, r7
 8000664:	4618      	mov	r0, r3
 8000666:	f000 faf8 	bl	8000c5a <mpu6050_get_gY>
 800066a:	4603      	mov	r3, r0
 800066c:	461a      	mov	r2, r3
 800066e:	4b3c      	ldr	r3, [pc, #240]	@ (8000760 <main+0x1e0>)
 8000670:	801a      	strh	r2, [r3, #0]
	              gZ = mpu6050_get_gZ(&imu);
 8000672:	463b      	mov	r3, r7
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fb05 	bl	8000c84 <mpu6050_get_gZ>
 800067a:	4603      	mov	r3, r0
 800067c:	461a      	mov	r2, r3
 800067e:	4b39      	ldr	r3, [pc, #228]	@ (8000764 <main+0x1e4>)
 8000680:	801a      	strh	r2, [r3, #0]
	              STATE = STATE_3_BUTTON_LED;
 8000682:	4b39      	ldr	r3, [pc, #228]	@ (8000768 <main+0x1e8>)
 8000684:	881a      	ldrh	r2, [r3, #0]
 8000686:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <main+0x1c8>)
 8000688:	801a      	strh	r2, [r3, #0]
	              break;
 800068a:	e057      	b.n	800073c <main+0x1bc>

	          case 3:
	              shot = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 800068c:	2110      	movs	r1, #16
 800068e:	4837      	ldr	r0, [pc, #220]	@ (800076c <main+0x1ec>)
 8000690:	f000 ff9c 	bl	80015cc <HAL_GPIO_ReadPin>
 8000694:	4603      	mov	r3, r0
 8000696:	461a      	mov	r2, r3
 8000698:	4b35      	ldr	r3, [pc, #212]	@ (8000770 <main+0x1f0>)
 800069a:	801a      	strh	r2, [r3, #0]
	              move = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 800069c:	2120      	movs	r1, #32
 800069e:	4833      	ldr	r0, [pc, #204]	@ (800076c <main+0x1ec>)
 80006a0:	f000 ff94 	bl	80015cc <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b32      	ldr	r3, [pc, #200]	@ (8000774 <main+0x1f4>)
 80006aa:	801a      	strh	r2, [r3, #0]
	              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, shot); // LED2
 80006ac:	4b30      	ldr	r3, [pc, #192]	@ (8000770 <main+0x1f0>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	2110      	movs	r1, #16
 80006b6:	4825      	ldr	r0, [pc, #148]	@ (800074c <main+0x1cc>)
 80006b8:	f000 ffa0 	bl	80015fc <HAL_GPIO_WritePin>
	              HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, move); // LED3
 80006bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000774 <main+0x1f4>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	461a      	mov	r2, r3
 80006c4:	2120      	movs	r1, #32
 80006c6:	4821      	ldr	r0, [pc, #132]	@ (800074c <main+0x1cc>)
 80006c8:	f000 ff98 	bl	80015fc <HAL_GPIO_WritePin>
	              STATE = STATE_4_TRANSFER;
 80006cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000778 <main+0x1f8>)
 80006ce:	881a      	ldrh	r2, [r3, #0]
 80006d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000748 <main+0x1c8>)
 80006d2:	801a      	strh	r2, [r3, #0]
	              break;
 80006d4:	e032      	b.n	800073c <main+0x1bc>

	          case 4:
	              snprintf(buffer, sizeof(buffer), "%d\t%d\t%d\t%d\r\n", (int)move, (int)shot, gZ, gY);
 80006d6:	4b27      	ldr	r3, [pc, #156]	@ (8000774 <main+0x1f4>)
 80006d8:	881b      	ldrh	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	4b24      	ldr	r3, [pc, #144]	@ (8000770 <main+0x1f0>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	461a      	mov	r2, r3
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <main+0x1e4>)
 80006e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <main+0x1e0>)
 80006ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006f0:	9302      	str	r3, [sp, #8]
 80006f2:	9101      	str	r1, [sp, #4]
 80006f4:	9200      	str	r2, [sp, #0]
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a20      	ldr	r2, [pc, #128]	@ (800077c <main+0x1fc>)
 80006fa:	2164      	movs	r1, #100	@ 0x64
 80006fc:	4820      	ldr	r0, [pc, #128]	@ (8000780 <main+0x200>)
 80006fe:	f003 f967 	bl	80039d0 <sniprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), 100);
 8000702:	481f      	ldr	r0, [pc, #124]	@ (8000780 <main+0x200>)
 8000704:	f7ff fd6c 	bl	80001e0 <strlen>
 8000708:	4603      	mov	r3, r0
 800070a:	b29a      	uxth	r2, r3
 800070c:	2364      	movs	r3, #100	@ 0x64
 800070e:	491c      	ldr	r1, [pc, #112]	@ (8000780 <main+0x200>)
 8000710:	481c      	ldr	r0, [pc, #112]	@ (8000784 <main+0x204>)
 8000712:	f002 fda1 	bl	8003258 <HAL_UART_Transmit>
	              HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), 100);
 8000716:	481a      	ldr	r0, [pc, #104]	@ (8000780 <main+0x200>)
 8000718:	f7ff fd62 	bl	80001e0 <strlen>
 800071c:	4603      	mov	r3, r0
 800071e:	b29a      	uxth	r2, r3
 8000720:	2364      	movs	r3, #100	@ 0x64
 8000722:	4917      	ldr	r1, [pc, #92]	@ (8000780 <main+0x200>)
 8000724:	4818      	ldr	r0, [pc, #96]	@ (8000788 <main+0x208>)
 8000726:	f002 fd97 	bl	8003258 <HAL_UART_Transmit>
	              HAL_Delay(10);
 800072a:	200a      	movs	r0, #10
 800072c:	f000 fcc0 	bl	80010b0 <HAL_Delay>
	              STATE = STATE_2_IMU;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <main+0x1d0>)
 8000732:	881a      	ldrh	r2, [r3, #0]
 8000734:	4b04      	ldr	r3, [pc, #16]	@ (8000748 <main+0x1c8>)
 8000736:	801a      	strh	r2, [r3, #0]
	              break;
 8000738:	bf00      	nop
 800073a:	e73d      	b.n	80005b8 <main+0x38>
	  switch (STATE) {
 800073c:	e73c      	b.n	80005b8 <main+0x38>
 800073e:	bf00      	nop
 8000740:	20000080 	.word	0x20000080
 8000744:	2000016a 	.word	0x2000016a
 8000748:	20000170 	.word	0x20000170
 800074c:	40020400 	.word	0x40020400
 8000750:	20000002 	.word	0x20000002
 8000754:	20000000 	.word	0x20000000
 8000758:	20000172 	.word	0x20000172
 800075c:	20000164 	.word	0x20000164
 8000760:	20000166 	.word	0x20000166
 8000764:	20000168 	.word	0x20000168
 8000768:	20000004 	.word	0x20000004
 800076c:	40020000 	.word	0x40020000
 8000770:	2000016c 	.word	0x2000016c
 8000774:	2000016e 	.word	0x2000016e
 8000778:	20000006 	.word	0x20000006
 800077c:	08004350 	.word	0x08004350
 8000780:	20000174 	.word	0x20000174
 8000784:	200000d4 	.word	0x200000d4
 8000788:	2000011c 	.word	0x2000011c

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	@ 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	@ 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f003 f94c 	bl	8003a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <SystemClock_Config+0xc8>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b8:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <SystemClock_Config+0xc8>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c0:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <SystemClock_Config+0xc8>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <SystemClock_Config+0xcc>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a20      	ldr	r2, [pc, #128]	@ (8000858 <SystemClock_Config+0xcc>)
 80007d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <SystemClock_Config+0xcc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e8:	2301      	movs	r3, #1
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f2:	2302      	movs	r3, #2
 80007f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007fc:	2319      	movs	r3, #25
 80007fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000800:	23c0      	movs	r3, #192	@ 0xc0
 8000802:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000808:	2304      	movs	r3, #4
 800080a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f002 f879 	bl	8002908 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800081c:	f000 f8fe 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2103      	movs	r1, #3
 800083c:	4618      	mov	r0, r3
 800083e:	f002 fadb 	bl	8002df8 <HAL_RCC_ClockConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000848:	f000 f8e8 	bl	8000a1c <Error_Handler>
  }
}
 800084c:	bf00      	nop
 800084e:	3750      	adds	r7, #80	@ 0x50
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40023800 	.word	0x40023800
 8000858:	40007000 	.word	0x40007000

0800085c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <MX_I2C1_Init+0x50>)
 8000862:	4a13      	ldr	r2, [pc, #76]	@ (80008b0 <MX_I2C1_Init+0x54>)
 8000864:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_I2C1_Init+0x50>)
 8000868:	4a12      	ldr	r2, [pc, #72]	@ (80008b4 <MX_I2C1_Init+0x58>)
 800086a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_I2C1_Init+0x50>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_I2C1_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_I2C1_Init+0x50>)
 800087a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800087e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000880:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_I2C1_Init+0x50>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000886:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_I2C1_Init+0x50>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800088c:	4b07      	ldr	r3, [pc, #28]	@ (80008ac <MX_I2C1_Init+0x50>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_I2C1_Init+0x50>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <MX_I2C1_Init+0x50>)
 800089a:	f000 fee3 	bl	8001664 <HAL_I2C_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a4:	f000 f8ba 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000080 	.word	0x20000080
 80008b0:	40005400 	.word	0x40005400
 80008b4:	000186a0 	.word	0x000186a0

080008b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008be:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <MX_USART1_UART_Init+0x50>)
 80008c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80008c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008de:	220c      	movs	r2, #12
 80008e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e2:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_USART1_UART_Init+0x4c>)
 80008f0:	f002 fc62 	bl	80031b8 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008fa:	f000 f88f 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000d4 	.word	0x200000d4
 8000908:	40011000 	.word	0x40011000

0800090c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000910:	4b11      	ldr	r3, [pc, #68]	@ (8000958 <MX_USART2_UART_Init+0x4c>)
 8000912:	4a12      	ldr	r2, [pc, #72]	@ (800095c <MX_USART2_UART_Init+0x50>)
 8000914:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <MX_USART2_UART_Init+0x4c>)
 8000918:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800091c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b0e      	ldr	r3, [pc, #56]	@ (8000958 <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <MX_USART2_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <MX_USART2_UART_Init+0x4c>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <MX_USART2_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000942:	4805      	ldr	r0, [pc, #20]	@ (8000958 <MX_USART2_UART_Init+0x4c>)
 8000944:	f002 fc38 	bl	80031b8 <HAL_UART_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800094e:	f000 f865 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000011c 	.word	0x2000011c
 800095c:	40004400 	.word	0x40004400

08000960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b088      	sub	sp, #32
 8000964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
 8000974:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b25      	ldr	r3, [pc, #148]	@ (8000a10 <MX_GPIO_Init+0xb0>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a24      	ldr	r2, [pc, #144]	@ (8000a10 <MX_GPIO_Init+0xb0>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <MX_GPIO_Init+0xb0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_GPIO_Init+0xb0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a1d      	ldr	r2, [pc, #116]	@ (8000a10 <MX_GPIO_Init+0xb0>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_GPIO_Init+0xb0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <MX_GPIO_Init+0xb0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a16      	ldr	r2, [pc, #88]	@ (8000a10 <MX_GPIO_Init+0xb0>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <MX_GPIO_Init+0xb0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2138      	movs	r1, #56	@ 0x38
 80009ce:	4811      	ldr	r0, [pc, #68]	@ (8000a14 <MX_GPIO_Init+0xb4>)
 80009d0:	f000 fe14 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80009d4:	2330      	movs	r3, #48	@ 0x30
 80009d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009dc:	2302      	movs	r3, #2
 80009de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <MX_GPIO_Init+0xb8>)
 80009e8:	f000 fc6c 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80009ec:	2338      	movs	r3, #56	@ 0x38
 80009ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	4619      	mov	r1, r3
 8000a02:	4804      	ldr	r0, [pc, #16]	@ (8000a14 <MX_GPIO_Init+0xb4>)
 8000a04:	f000 fc5e 	bl	80012c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400
 8000a18:	40020000 	.word	0x40020000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <mpu6050_init>:
 * @param imux Pointer to the MPU6050 structure.
 * @param hi2c Pointer to the I2C handle structure.
 * @return uint16_t Returns 1 if initialization is successful, otherwise 0.
 */

uint16_t  mpu6050_init(MPU6050* imux, I2C_HandleTypeDef* hi2c) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af04      	add	r7, sp, #16
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
    imux->hi2c = hi2c;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	683a      	ldr	r2, [r7, #0]
 8000a36:	601a      	str	r2, [r3, #0]
    imux->gX = 0;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	815a      	strh	r2, [r3, #10]
    imux->gY = 0;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	819a      	strh	r2, [r3, #12]
    imux->gZ = 0;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	81da      	strh	r2, [r3, #14]
    imux->gX_offset = 0;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	821a      	strh	r2, [r3, #16]
    imux->gY_offset = 0;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2200      	movs	r2, #0
 8000a54:	825a      	strh	r2, [r3, #18]
    imux->gZ_offset = 0;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	829a      	strh	r2, [r3, #20]
    imux->addr = 0x68;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2268      	movs	r2, #104	@ 0x68
 8000a60:	80da      	strh	r2, [r3, #6]
    imux->status = HAL_I2C_IsDeviceReady(imux->hi2c, (imux->addr << 1), 1, 100);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	88db      	ldrh	r3, [r3, #6]
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	b299      	uxth	r1, r3
 8000a6e:	2364      	movs	r3, #100	@ 0x64
 8000a70:	2201      	movs	r2, #1
 8000a72:	f001 fa67 	bl	8001f44 <HAL_I2C_IsDeviceReady>
 8000a76:	4603      	mov	r3, r0
 8000a78:	461a      	mov	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	711a      	strb	r2, [r3, #4]
    if (imux->status == HAL_OK) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	791b      	ldrb	r3, [r3, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d125      	bne.n	8000ad2 <mpu6050_init+0xaa>
        	uint8_t data[2];
        	data[0] = 0x00;
 8000a86:	2300      	movs	r3, #0
 8000a88:	733b      	strb	r3, [r7, #12]
            HAL_I2C_Mem_Write(imux->hi2c, (imux->addr << 1), 0x6B, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6818      	ldr	r0, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	88db      	ldrh	r3, [r3, #6]
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	b299      	uxth	r1, r3
 8000a96:	2364      	movs	r3, #100	@ 0x64
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	f107 030c 	add.w	r3, r7, #12
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	226b      	movs	r2, #107	@ 0x6b
 8000aa8:	f000 ff20 	bl	80018ec <HAL_I2C_Mem_Write>
            HAL_I2C_Mem_Write(imux->hi2c, (imux->addr << 1), 0x1B, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	88db      	ldrh	r3, [r3, #6]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	b299      	uxth	r1, r3
 8000ab8:	2364      	movs	r3, #100	@ 0x64
 8000aba:	9302      	str	r3, [sp, #8]
 8000abc:	2301      	movs	r3, #1
 8000abe:	9301      	str	r3, [sp, #4]
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	221b      	movs	r2, #27
 8000aca:	f000 ff0f 	bl	80018ec <HAL_I2C_Mem_Write>
            return 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <mpu6050_init+0xac>
	}
    else{
    	return 0;
 8000ad2:	2300      	movs	r3, #0
    }
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <mpu6050_calibrate>:
 * @brief Calibrates the MPU6050 sensor.
 * 
 * @param imux Pointer to the MPU6050 structure.
 */

void mpu6050_calibrate(MPU6050* imux) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    int16_t gX_total = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	82fb      	strh	r3, [r7, #22]
    int16_t	gY_total = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	82bb      	strh	r3, [r7, #20]
	int16_t gZ_total = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	827b      	strh	r3, [r7, #18]
    const int num_samples = 10;
 8000af0:	230a      	movs	r3, #10
 8000af2:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < num_samples; i++) {
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	e020      	b.n	8000b3c <mpu6050_calibrate+0x60>
        mpu6050_update(imux);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f000 f83e 	bl	8000b7c <mpu6050_update>
        gX_total += imux->gX;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	8afb      	ldrh	r3, [r7, #22]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	82fb      	strh	r3, [r7, #22]
        gY_total += imux->gY;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	8abb      	ldrh	r3, [r7, #20]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	82bb      	strh	r3, [r7, #20]
        gZ_total += imux->gZ;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	8a7b      	ldrh	r3, [r7, #18]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	827b      	strh	r3, [r7, #18]
        HAL_Delay(10);
 8000b30:	200a      	movs	r0, #10
 8000b32:	f000 fabd 	bl	80010b0 <HAL_Delay>
    for (int i = 0; i < num_samples; i++) {
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dbda      	blt.n	8000afa <mpu6050_calibrate+0x1e>
    }

    imux->gX_offset = gX_total / num_samples;
 8000b44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b4e:	b21a      	sxth	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	821a      	strh	r2, [r3, #16]
    imux->gY_offset = gY_total / num_samples;
 8000b54:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b5e:	b21a      	sxth	r2, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	825a      	strh	r2, [r3, #18]
    imux->gZ_offset = gZ_total / num_samples;
 8000b64:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6e:	b21a      	sxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	829a      	strh	r2, [r3, #20]
}
 8000b74:	bf00      	nop
 8000b76:	3718      	adds	r7, #24
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <mpu6050_update>:
 * 
 * @param imux Pointer to the MPU6050 structure.
 * @param dt Time interval in milliseconds.
 */

void mpu6050_update(MPU6050* imux) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	@ 0x28
 8000b80:	af04      	add	r7, sp, #16
 8000b82:	6078      	str	r0, [r7, #4]
    uint8_t data[6];
    int16_t gx, gy, gz;
    imux->status = HAL_I2C_Mem_Read(imux->hi2c, (imux->addr << 1), 0x43, I2C_MEMADD_SIZE_8BIT, data, 6, 100);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6818      	ldr	r0, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	88db      	ldrh	r3, [r3, #6]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	b299      	uxth	r1, r3
 8000b90:	2364      	movs	r3, #100	@ 0x64
 8000b92:	9302      	str	r3, [sp, #8]
 8000b94:	2306      	movs	r3, #6
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	2243      	movs	r2, #67	@ 0x43
 8000ba2:	f000 ff9d 	bl	8001ae0 <HAL_I2C_Mem_Read>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	711a      	strb	r2, [r3, #4]

    if (imux->status == HAL_OK) {
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	791b      	ldrb	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d135      	bne.n	8000c22 <mpu6050_update+0xa6>
        gx = (int16_t)((data[0] << 8) | data[1]);
 8000bb6:	7b3b      	ldrb	r3, [r7, #12]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	b21a      	sxth	r2, r3
 8000bbc:	7b7b      	ldrb	r3, [r7, #13]
 8000bbe:	b21b      	sxth	r3, r3
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	82fb      	strh	r3, [r7, #22]
        gy = (int16_t)((data[2] << 8) | data[3]);
 8000bc4:	7bbb      	ldrb	r3, [r7, #14]
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	b21a      	sxth	r2, r3
 8000bca:	7bfb      	ldrb	r3, [r7, #15]
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	82bb      	strh	r3, [r7, #20]
        gz = (int16_t)((data[4] << 8) | data[5]);
 8000bd2:	7c3b      	ldrb	r3, [r7, #16]
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7c7b      	ldrb	r3, [r7, #17]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	827b      	strh	r3, [r7, #18]

        imux->gX = gx / 131;
 8000be0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000be4:	4a11      	ldr	r2, [pc, #68]	@ (8000c2c <mpu6050_update+0xb0>)
 8000be6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bea:	1152      	asrs	r2, r2, #5
 8000bec:	17db      	asrs	r3, r3, #31
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	815a      	strh	r2, [r3, #10]
        imux->gY = gy / 131;
 8000bf6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8000c2c <mpu6050_update+0xb0>)
 8000bfc:	fb82 1203 	smull	r1, r2, r2, r3
 8000c00:	1152      	asrs	r2, r2, #5
 8000c02:	17db      	asrs	r3, r3, #31
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	819a      	strh	r2, [r3, #12]
        imux->gZ = gz / 131;
 8000c0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000c10:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <mpu6050_update+0xb0>)
 8000c12:	fb82 1203 	smull	r1, r2, r2, r3
 8000c16:	1152      	asrs	r2, r2, #5
 8000c18:	17db      	asrs	r3, r3, #31
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	81da      	strh	r2, [r3, #14]
    }
}
 8000c22:	bf00      	nop
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	3e88cb3d 	.word	0x3e88cb3d

08000c30 <mpu6050_get_gX>:
 * 
 * @param imux Pointer to the MPU6050 structure.
 * @return int16_t Calibrated X-axis gyroscope data.
 */

int16_t mpu6050_get_gX(MPU6050* imux){
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	return (imux->gX - imux->gX_offset);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	b21b      	sxth	r3, r3
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <mpu6050_get_gY>:
 * 
 * @param imux Pointer to the MPU6050 structure.
 * @return int16_t Calibrated Y-axis gyroscope data.
 */

int16_t mpu6050_get_gY(MPU6050* imux) {
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
	return (imux->gY - imux->gY_offset);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000c70:	b29b      	uxth	r3, r3
 8000c72:	1ad3      	subs	r3, r2, r3
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	b21b      	sxth	r3, r3
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <mpu6050_get_gZ>:
 * 
 * @param imux Pointer to the MPU6050 structure.
 * @return int16_t Calibrated Z-axis gyroscope data.
 */

int16_t mpu6050_get_gZ(MPU6050* imux) {
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
	return (imux->gZ - imux->gZ_offset);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	b21b      	sxth	r3, r3
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	@ 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a19      	ldr	r2, [pc, #100]	@ (8000d84 <HAL_I2C_MspInit+0x84>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12b      	bne.n	8000d7a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a17      	ldr	r2, [pc, #92]	@ (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d3e:	23c0      	movs	r3, #192	@ 0xc0
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d42:	2312      	movs	r3, #18
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	480c      	ldr	r0, [pc, #48]	@ (8000d8c <HAL_I2C_MspInit+0x8c>)
 8000d5a:	f000 fab3 	bl	80012c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_I2C_MspInit+0x88>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	@ 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40005400 	.word	0x40005400
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020400 	.word	0x40020400

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	@ 0x30
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 031c 	add.w	r3, r7, #28
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a32      	ldr	r2, [pc, #200]	@ (8000e78 <HAL_UART_MspInit+0xe8>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d12d      	bne.n	8000e0e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
 8000db6:	4b31      	ldr	r3, [pc, #196]	@ (8000e7c <HAL_UART_MspInit+0xec>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dba:	4a30      	ldr	r2, [pc, #192]	@ (8000e7c <HAL_UART_MspInit+0xec>)
 8000dbc:	f043 0310 	orr.w	r3, r3, #16
 8000dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e7c <HAL_UART_MspInit+0xec>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e7c <HAL_UART_MspInit+0xec>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	4a29      	ldr	r2, [pc, #164]	@ (8000e7c <HAL_UART_MspInit+0xec>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dde:	4b27      	ldr	r3, [pc, #156]	@ (8000e7c <HAL_UART_MspInit+0xec>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dfc:	2307      	movs	r3, #7
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	481e      	ldr	r0, [pc, #120]	@ (8000e80 <HAL_UART_MspInit+0xf0>)
 8000e08:	f000 fa5c 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e0c:	e030      	b.n	8000e70 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1c      	ldr	r2, [pc, #112]	@ (8000e84 <HAL_UART_MspInit+0xf4>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d12b      	bne.n	8000e70 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <HAL_UART_MspInit+0xec>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	4a16      	ldr	r2, [pc, #88]	@ (8000e7c <HAL_UART_MspInit+0xec>)
 8000e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e28:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <HAL_UART_MspInit+0xec>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <HAL_UART_MspInit+0xec>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e7c <HAL_UART_MspInit+0xec>)
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e44:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <HAL_UART_MspInit+0xec>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e50:	230c      	movs	r3, #12
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e60:	2307      	movs	r3, #7
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4805      	ldr	r0, [pc, #20]	@ (8000e80 <HAL_UART_MspInit+0xf0>)
 8000e6c:	f000 fa2a 	bl	80012c4 <HAL_GPIO_Init>
}
 8000e70:	bf00      	nop
 8000e72:	3730      	adds	r7, #48	@ 0x30
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40011000 	.word	0x40011000
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020000 	.word	0x40020000
 8000e84:	40004400 	.word	0x40004400

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <NMI_Handler+0x4>

08000e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <MemManage_Handler+0x4>

08000ea0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <UsageFault_Handler+0x4>

08000eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ede:	f000 f8c7 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d207      	bcs.n	8000f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f18:	f002 fd96 	bl	8003a48 <__errno>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	220c      	movs	r2, #12
 8000f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295
 8000f26:	e009      	b.n	8000f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f28:	4b08      	ldr	r3, [pc, #32]	@ (8000f4c <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a05      	ldr	r2, [pc, #20]	@ (8000f4c <_sbrk+0x64>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20020000 	.word	0x20020000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	200001d8 	.word	0x200001d8
 8000f50:	20000328 	.word	0x20000328

08000f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	@ (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f7c:	f7ff ffea 	bl	8000f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f82:	490d      	ldr	r1, [pc, #52]	@ (8000fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f88:	e002      	b.n	8000f90 <LoopCopyDataInit>

08000f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8e:	3304      	adds	r3, #4

08000f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f94:	d3f9      	bcc.n	8000f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f96:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f98:	4c0a      	ldr	r4, [pc, #40]	@ (8000fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f9c:	e001      	b.n	8000fa2 <LoopFillZerobss>

08000f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa0:	3204      	adds	r2, #4

08000fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa4:	d3fb      	bcc.n	8000f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f002 fd55 	bl	8003a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000faa:	f7ff fae9 	bl	8000580 <main>
  bx  lr    
 8000fae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000fbc:	080043bc 	.word	0x080043bc
  ldr r2, =_sbss
 8000fc0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000fc4:	20000328 	.word	0x20000328

08000fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC_IRQHandler>
	...

08000fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800100c <HAL_Init+0x40>)
 8000fd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800100c <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <HAL_Init+0x40>)
 8000fe2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	4b08      	ldr	r3, [pc, #32]	@ (800100c <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a07      	ldr	r2, [pc, #28]	@ (800100c <HAL_Init+0x40>)
 8000fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f931 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	200f      	movs	r0, #15
 8000ffc:	f000 f808 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001000:	f7ff fe56 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023c00 	.word	0x40023c00

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	@ (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f93b 	bl	80012aa <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f911 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	@ (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000008 	.word	0x20000008
 8001068:	20000010 	.word	0x20000010
 800106c:	2000000c 	.word	0x2000000c

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000010 	.word	0x20000010
 8001094:	200001dc 	.word	0x200001dc

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	@ (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200001dc 	.word	0x200001dc

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <HAL_Delay+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d6:	bf00      	nop
 80010d8:	f7ff ffde 	bl	8001098 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000010 	.word	0x20000010

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0c      	ldr	r3, [pc, #48]	@ (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001120:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	@ (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	@ (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	@ (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	@ 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	@ 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	@ (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff47 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff5c 	bl	8001140 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffb0 	bl	8001218 <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	@ 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	e159      	b.n	8001594 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f040 8148 	bne.w	800158e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d005      	beq.n	8001316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001312:	2b02      	cmp	r3, #2
 8001314:	d130      	bne.n	8001378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 0201 	and.w	r2, r3, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b03      	cmp	r3, #3
 8001382:	d017      	beq.n	80013b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d123      	bne.n	8001408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	08da      	lsrs	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3208      	adds	r2, #8
 80013c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	08da      	lsrs	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3208      	adds	r2, #8
 8001402:	69b9      	ldr	r1, [r7, #24]
 8001404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0203 	and.w	r2, r3, #3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80a2 	beq.w	800158e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b57      	ldr	r3, [pc, #348]	@ (80015ac <HAL_GPIO_Init+0x2e8>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001452:	4a56      	ldr	r2, [pc, #344]	@ (80015ac <HAL_GPIO_Init+0x2e8>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001458:	6453      	str	r3, [r2, #68]	@ 0x44
 800145a:	4b54      	ldr	r3, [pc, #336]	@ (80015ac <HAL_GPIO_Init+0x2e8>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001466:	4a52      	ldr	r2, [pc, #328]	@ (80015b0 <HAL_GPIO_Init+0x2ec>)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a49      	ldr	r2, [pc, #292]	@ (80015b4 <HAL_GPIO_Init+0x2f0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d019      	beq.n	80014c6 <HAL_GPIO_Init+0x202>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a48      	ldr	r2, [pc, #288]	@ (80015b8 <HAL_GPIO_Init+0x2f4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x1fe>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a47      	ldr	r2, [pc, #284]	@ (80015bc <HAL_GPIO_Init+0x2f8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x1fa>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a46      	ldr	r2, [pc, #280]	@ (80015c0 <HAL_GPIO_Init+0x2fc>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x1f6>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a45      	ldr	r2, [pc, #276]	@ (80015c4 <HAL_GPIO_Init+0x300>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x1f2>
 80014b2:	2304      	movs	r3, #4
 80014b4:	e008      	b.n	80014c8 <HAL_GPIO_Init+0x204>
 80014b6:	2307      	movs	r3, #7
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x204>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e004      	b.n	80014c8 <HAL_GPIO_Init+0x204>
 80014be:	2302      	movs	r3, #2
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_Init+0x204>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x204>
 80014c6:	2300      	movs	r3, #0
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	f002 0203 	and.w	r2, r2, #3
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4093      	lsls	r3, r2
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d8:	4935      	ldr	r1, [pc, #212]	@ (80015b0 <HAL_GPIO_Init+0x2ec>)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4b38      	ldr	r3, [pc, #224]	@ (80015c8 <HAL_GPIO_Init+0x304>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150a:	4a2f      	ldr	r2, [pc, #188]	@ (80015c8 <HAL_GPIO_Init+0x304>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001510:	4b2d      	ldr	r3, [pc, #180]	@ (80015c8 <HAL_GPIO_Init+0x304>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001534:	4a24      	ldr	r2, [pc, #144]	@ (80015c8 <HAL_GPIO_Init+0x304>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800153a:	4b23      	ldr	r3, [pc, #140]	@ (80015c8 <HAL_GPIO_Init+0x304>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155e:	4a1a      	ldr	r2, [pc, #104]	@ (80015c8 <HAL_GPIO_Init+0x304>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001564:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_GPIO_Init+0x304>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001588:	4a0f      	ldr	r2, [pc, #60]	@ (80015c8 <HAL_GPIO_Init+0x304>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3301      	adds	r3, #1
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	f67f aea2 	bls.w	80012e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3724      	adds	r7, #36	@ 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40013800 	.word	0x40013800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40013c00 	.word	0x40013c00

080015cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691a      	ldr	r2, [r3, #16]
 80015dc:	887b      	ldrh	r3, [r7, #2]
 80015de:	4013      	ands	r3, r2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e001      	b.n	80015ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001618:	e003      	b.n	8001622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800162e:	b480      	push	{r7}
 8001630:	b085      	sub	sp, #20
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	460b      	mov	r3, r1
 8001638:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001640:	887a      	ldrh	r2, [r7, #2]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	041a      	lsls	r2, r3, #16
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43d9      	mvns	r1, r3
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	400b      	ands	r3, r1
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	619a      	str	r2, [r3, #24]
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e12b      	b.n	80018ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d106      	bne.n	8001690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fb38 	bl	8000d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2224      	movs	r2, #36	@ 0x24
 8001694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80016b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80016c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80016c8:	f001 fd4e 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 80016cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4a81      	ldr	r2, [pc, #516]	@ (80018d8 <HAL_I2C_Init+0x274>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d807      	bhi.n	80016e8 <HAL_I2C_Init+0x84>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4a80      	ldr	r2, [pc, #512]	@ (80018dc <HAL_I2C_Init+0x278>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	bf94      	ite	ls
 80016e0:	2301      	movls	r3, #1
 80016e2:	2300      	movhi	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	e006      	b.n	80016f6 <HAL_I2C_Init+0x92>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4a7d      	ldr	r2, [pc, #500]	@ (80018e0 <HAL_I2C_Init+0x27c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	bf94      	ite	ls
 80016f0:	2301      	movls	r3, #1
 80016f2:	2300      	movhi	r3, #0
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0e7      	b.n	80018ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a78      	ldr	r2, [pc, #480]	@ (80018e4 <HAL_I2C_Init+0x280>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	0c9b      	lsrs	r3, r3, #18
 8001708:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68ba      	ldr	r2, [r7, #8]
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a6a      	ldr	r2, [pc, #424]	@ (80018d8 <HAL_I2C_Init+0x274>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d802      	bhi.n	8001738 <HAL_I2C_Init+0xd4>
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	3301      	adds	r3, #1
 8001736:	e009      	b.n	800174c <HAL_I2C_Init+0xe8>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	4a69      	ldr	r2, [pc, #420]	@ (80018e8 <HAL_I2C_Init+0x284>)
 8001744:	fba2 2303 	umull	r2, r3, r2, r3
 8001748:	099b      	lsrs	r3, r3, #6
 800174a:	3301      	adds	r3, #1
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	430b      	orrs	r3, r1
 8001752:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800175e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	495c      	ldr	r1, [pc, #368]	@ (80018d8 <HAL_I2C_Init+0x274>)
 8001768:	428b      	cmp	r3, r1
 800176a:	d819      	bhi.n	80017a0 <HAL_I2C_Init+0x13c>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1e59      	subs	r1, r3, #1
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fbb1 f3f3 	udiv	r3, r1, r3
 800177a:	1c59      	adds	r1, r3, #1
 800177c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001780:	400b      	ands	r3, r1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00a      	beq.n	800179c <HAL_I2C_Init+0x138>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	1e59      	subs	r1, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fbb1 f3f3 	udiv	r3, r1, r3
 8001794:	3301      	adds	r3, #1
 8001796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179a:	e051      	b.n	8001840 <HAL_I2C_Init+0x1dc>
 800179c:	2304      	movs	r3, #4
 800179e:	e04f      	b.n	8001840 <HAL_I2C_Init+0x1dc>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d111      	bne.n	80017cc <HAL_I2C_Init+0x168>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1e58      	subs	r0, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6859      	ldr	r1, [r3, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	440b      	add	r3, r1
 80017b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80017ba:	3301      	adds	r3, #1
 80017bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf0c      	ite	eq
 80017c4:	2301      	moveq	r3, #1
 80017c6:	2300      	movne	r3, #0
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	e012      	b.n	80017f2 <HAL_I2C_Init+0x18e>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1e58      	subs	r0, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	0099      	lsls	r1, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <HAL_I2C_Init+0x196>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e022      	b.n	8001840 <HAL_I2C_Init+0x1dc>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10e      	bne.n	8001820 <HAL_I2C_Init+0x1bc>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1e58      	subs	r0, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6859      	ldr	r1, [r3, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	440b      	add	r3, r1
 8001810:	fbb0 f3f3 	udiv	r3, r0, r3
 8001814:	3301      	adds	r3, #1
 8001816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800181e:	e00f      	b.n	8001840 <HAL_I2C_Init+0x1dc>
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	1e58      	subs	r0, r3, #1
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	440b      	add	r3, r1
 800182e:	0099      	lsls	r1, r3, #2
 8001830:	440b      	add	r3, r1
 8001832:	fbb0 f3f3 	udiv	r3, r0, r3
 8001836:	3301      	adds	r3, #1
 8001838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	6809      	ldr	r1, [r1, #0]
 8001844:	4313      	orrs	r3, r2
 8001846:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69da      	ldr	r2, [r3, #28]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800186e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6911      	ldr	r1, [r2, #16]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68d2      	ldr	r2, [r2, #12]
 800187a:	4311      	orrs	r1, r2
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	430b      	orrs	r3, r1
 8001882:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	431a      	orrs	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	430a      	orrs	r2, r1
 800189e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2220      	movs	r2, #32
 80018ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	000186a0 	.word	0x000186a0
 80018dc:	001e847f 	.word	0x001e847f
 80018e0:	003d08ff 	.word	0x003d08ff
 80018e4:	431bde83 	.word	0x431bde83
 80018e8:	10624dd3 	.word	0x10624dd3

080018ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	4608      	mov	r0, r1
 80018f6:	4611      	mov	r1, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	4603      	mov	r3, r0
 80018fc:	817b      	strh	r3, [r7, #10]
 80018fe:	460b      	mov	r3, r1
 8001900:	813b      	strh	r3, [r7, #8]
 8001902:	4613      	mov	r3, r2
 8001904:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001906:	f7ff fbc7 	bl	8001098 <HAL_GetTick>
 800190a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b20      	cmp	r3, #32
 8001916:	f040 80d9 	bne.w	8001acc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2319      	movs	r3, #25
 8001920:	2201      	movs	r2, #1
 8001922:	496d      	ldr	r1, [pc, #436]	@ (8001ad8 <HAL_I2C_Mem_Write+0x1ec>)
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f000 fdb9 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001930:	2302      	movs	r3, #2
 8001932:	e0cc      	b.n	8001ace <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_I2C_Mem_Write+0x56>
 800193e:	2302      	movs	r3, #2
 8001940:	e0c5      	b.n	8001ace <HAL_I2C_Mem_Write+0x1e2>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d007      	beq.n	8001968 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001976:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2221      	movs	r2, #33	@ 0x21
 800197c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2240      	movs	r2, #64	@ 0x40
 8001984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2200      	movs	r2, #0
 800198c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a3a      	ldr	r2, [r7, #32]
 8001992:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001998:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800199e:	b29a      	uxth	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4a4d      	ldr	r2, [pc, #308]	@ (8001adc <HAL_I2C_Mem_Write+0x1f0>)
 80019a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019aa:	88f8      	ldrh	r0, [r7, #6]
 80019ac:	893a      	ldrh	r2, [r7, #8]
 80019ae:	8979      	ldrh	r1, [r7, #10]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	4603      	mov	r3, r0
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f000 fbf0 	bl	80021a0 <I2C_RequestMemoryWrite>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d052      	beq.n	8001a6c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e081      	b.n	8001ace <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 fe7e 	bl	80026d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00d      	beq.n	80019f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d107      	bne.n	80019f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e06b      	b.n	8001ace <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d11b      	bne.n	8001a6c <HAL_I2C_Mem_Write+0x180>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d017      	beq.n	8001a6c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a56:	3b01      	subs	r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1aa      	bne.n	80019ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 fe71 	bl	8002760 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00d      	beq.n	8001aa0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d107      	bne.n	8001a9c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a9a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e016      	b.n	8001ace <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e000      	b.n	8001ace <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001acc:	2302      	movs	r3, #2
  }
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	00100002 	.word	0x00100002
 8001adc:	ffff0000 	.word	0xffff0000

08001ae0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	@ 0x30
 8001ae4:	af02      	add	r7, sp, #8
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	817b      	strh	r3, [r7, #10]
 8001af2:	460b      	mov	r3, r1
 8001af4:	813b      	strh	r3, [r7, #8]
 8001af6:	4613      	mov	r3, r2
 8001af8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001afa:	f7ff facd 	bl	8001098 <HAL_GetTick>
 8001afe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	f040 8214 	bne.w	8001f36 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2319      	movs	r3, #25
 8001b14:	2201      	movs	r2, #1
 8001b16:	497b      	ldr	r1, [pc, #492]	@ (8001d04 <HAL_I2C_Mem_Read+0x224>)
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fcbf 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001b24:	2302      	movs	r3, #2
 8001b26:	e207      	b.n	8001f38 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_I2C_Mem_Read+0x56>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e200      	b.n	8001f38 <HAL_I2C_Mem_Read+0x458>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d007      	beq.n	8001b5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0201 	orr.w	r2, r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2222      	movs	r2, #34	@ 0x22
 8001b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2240      	movs	r2, #64	@ 0x40
 8001b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8001d08 <HAL_I2C_Mem_Read+0x228>)
 8001b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b9e:	88f8      	ldrh	r0, [r7, #6]
 8001ba0:	893a      	ldrh	r2, [r7, #8]
 8001ba2:	8979      	ldrh	r1, [r7, #10]
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	4603      	mov	r3, r0
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 fb8c 	bl	80022cc <I2C_RequestMemoryRead>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e1bc      	b.n	8001f38 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d113      	bne.n	8001bee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	695b      	ldr	r3, [r3, #20]
 8001bd0:	623b      	str	r3, [r7, #32]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	623b      	str	r3, [r7, #32]
 8001bda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e190      	b.n	8001f10 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d11b      	bne.n	8001c2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	e170      	b.n	8001f10 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d11b      	bne.n	8001c6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	61bb      	str	r3, [r7, #24]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	e150      	b.n	8001f10 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c84:	e144      	b.n	8001f10 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	f200 80f1 	bhi.w	8001e72 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d123      	bne.n	8001ce0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fda7 	bl	80027f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e145      	b.n	8001f38 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001cde:	e117      	b.n	8001f10 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d14e      	bne.n	8001d86 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cee:	2200      	movs	r2, #0
 8001cf0:	4906      	ldr	r1, [pc, #24]	@ (8001d0c <HAL_I2C_Mem_Read+0x22c>)
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 fbd2 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e11a      	b.n	8001f38 <HAL_I2C_Mem_Read+0x458>
 8001d02:	bf00      	nop
 8001d04:	00100002 	.word	0x00100002
 8001d08:	ffff0000 	.word	0xffff0000
 8001d0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d84:	e0c4      	b.n	8001f10 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	496c      	ldr	r1, [pc, #432]	@ (8001f40 <HAL_I2C_Mem_Read+0x460>)
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fb83 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0cb      	b.n	8001f38 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001de8:	2200      	movs	r2, #0
 8001dea:	4955      	ldr	r1, [pc, #340]	@ (8001f40 <HAL_I2C_Mem_Read+0x460>)
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 fb55 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e09d      	b.n	8001f38 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e70:	e04e      	b.n	8001f10 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e74:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 fcba 	bl	80027f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e058      	b.n	8001f38 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d124      	bne.n	8001f10 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d107      	bne.n	8001ede <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001edc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691a      	ldr	r2, [r3, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef0:	1c5a      	adds	r2, r3, #1
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f47f aeb6 	bne.w	8001c86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3728      	adds	r7, #40	@ 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	00010004 	.word	0x00010004

08001f44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af02      	add	r7, sp, #8
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	460b      	mov	r3, r1
 8001f52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff f8a0 	bl	8001098 <HAL_GetTick>
 8001f58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	f040 8111 	bne.w	800218e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2319      	movs	r3, #25
 8001f72:	2201      	movs	r2, #1
 8001f74:	4988      	ldr	r1, [pc, #544]	@ (8002198 <HAL_I2C_IsDeviceReady+0x254>)
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 fa90 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
 8001f84:	e104      	b.n	8002190 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d101      	bne.n	8001f94 <HAL_I2C_IsDeviceReady+0x50>
 8001f90:	2302      	movs	r3, #2
 8001f92:	e0fd      	b.n	8002190 <HAL_I2C_IsDeviceReady+0x24c>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d007      	beq.n	8001fba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2224      	movs	r2, #36	@ 0x24
 8001fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4a70      	ldr	r2, [pc, #448]	@ (800219c <HAL_I2C_IsDeviceReady+0x258>)
 8001fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fa4e 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00d      	beq.n	8002022 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002010:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002014:	d103      	bne.n	800201e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800201c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e0b6      	b.n	8002190 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002022:	897b      	ldrh	r3, [r7, #10]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002030:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002032:	f7ff f831 	bl	8001098 <HAL_GetTick>
 8002036:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	bf0c      	ite	eq
 8002046:	2301      	moveq	r3, #1
 8002048:	2300      	movne	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800205c:	bf0c      	ite	eq
 800205e:	2301      	moveq	r3, #1
 8002060:	2300      	movne	r3, #0
 8002062:	b2db      	uxtb	r3, r3
 8002064:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002066:	e025      	b.n	80020b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002068:	f7ff f816 	bl	8001098 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	429a      	cmp	r2, r3
 8002076:	d302      	bcc.n	800207e <HAL_I2C_IsDeviceReady+0x13a>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d103      	bne.n	8002086 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	22a0      	movs	r2, #160	@ 0xa0
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b02      	cmp	r3, #2
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020aa:	bf0c      	ite	eq
 80020ac:	2301      	moveq	r3, #1
 80020ae:	2300      	movne	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80020be:	d005      	beq.n	80020cc <HAL_I2C_IsDeviceReady+0x188>
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <HAL_I2C_IsDeviceReady+0x188>
 80020c6:	7dbb      	ldrb	r3, [r7, #22]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0cd      	beq.n	8002068 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d129      	bne.n	8002136 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	2319      	movs	r3, #25
 800210e:	2201      	movs	r2, #1
 8002110:	4921      	ldr	r1, [pc, #132]	@ (8002198 <HAL_I2C_IsDeviceReady+0x254>)
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f9c2 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e036      	b.n	8002190 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2220      	movs	r2, #32
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	e02c      	b.n	8002190 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002144:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800214e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	2319      	movs	r3, #25
 8002156:	2201      	movs	r2, #1
 8002158:	490f      	ldr	r1, [pc, #60]	@ (8002198 <HAL_I2C_IsDeviceReady+0x254>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f99e 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e012      	b.n	8002190 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	3301      	adds	r3, #1
 800216e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	429a      	cmp	r2, r3
 8002176:	f4ff af32 	bcc.w	8001fde <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e000      	b.n	8002190 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800218e:	2302      	movs	r3, #2
  }
}
 8002190:	4618      	mov	r0, r3
 8002192:	3720      	adds	r7, #32
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	00100002 	.word	0x00100002
 800219c:	ffff0000 	.word	0xffff0000

080021a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	4608      	mov	r0, r1
 80021aa:	4611      	mov	r1, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	817b      	strh	r3, [r7, #10]
 80021b2:	460b      	mov	r3, r1
 80021b4:	813b      	strh	r3, [r7, #8]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f960 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021f0:	d103      	bne.n	80021fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e05f      	b.n	80022be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021fe:	897b      	ldrh	r3, [r7, #10]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800220c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	6a3a      	ldr	r2, [r7, #32]
 8002212:	492d      	ldr	r1, [pc, #180]	@ (80022c8 <I2C_RequestMemoryWrite+0x128>)
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f000 f9bb 	bl	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e04c      	b.n	80022be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	617b      	str	r3, [r7, #20]
 8002238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800223a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800223c:	6a39      	ldr	r1, [r7, #32]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fa46 	bl	80026d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00d      	beq.n	8002266 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	2b04      	cmp	r3, #4
 8002250:	d107      	bne.n	8002262 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e02b      	b.n	80022be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d105      	bne.n	8002278 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800226c:	893b      	ldrh	r3, [r7, #8]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	611a      	str	r2, [r3, #16]
 8002276:	e021      	b.n	80022bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002278:	893b      	ldrh	r3, [r7, #8]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	b29b      	uxth	r3, r3
 800227e:	b2da      	uxtb	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002288:	6a39      	ldr	r1, [r7, #32]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fa20 	bl	80026d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	2b04      	cmp	r3, #4
 800229c:	d107      	bne.n	80022ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e005      	b.n	80022be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022b2:	893b      	ldrh	r3, [r7, #8]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	00010002 	.word	0x00010002

080022cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	4608      	mov	r0, r1
 80022d6:	4611      	mov	r1, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	4603      	mov	r3, r0
 80022dc:	817b      	strh	r3, [r7, #10]
 80022de:	460b      	mov	r3, r1
 80022e0:	813b      	strh	r3, [r7, #8]
 80022e2:	4613      	mov	r3, r2
 80022e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002304:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	2200      	movs	r2, #0
 800230e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f8c2 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00d      	beq.n	800233a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800232c:	d103      	bne.n	8002336 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002334:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e0aa      	b.n	8002490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800233a:	897b      	ldrh	r3, [r7, #10]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002348:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	6a3a      	ldr	r2, [r7, #32]
 800234e:	4952      	ldr	r1, [pc, #328]	@ (8002498 <I2C_RequestMemoryRead+0x1cc>)
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f91d 	bl	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e097      	b.n	8002490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002378:	6a39      	ldr	r1, [r7, #32]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f9a8 	bl	80026d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00d      	beq.n	80023a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	2b04      	cmp	r3, #4
 800238c:	d107      	bne.n	800239e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800239c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e076      	b.n	8002490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d105      	bne.n	80023b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023a8:	893b      	ldrh	r3, [r7, #8]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	611a      	str	r2, [r3, #16]
 80023b2:	e021      	b.n	80023f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80023b4:	893b      	ldrh	r3, [r7, #8]
 80023b6:	0a1b      	lsrs	r3, r3, #8
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c4:	6a39      	ldr	r1, [r7, #32]
 80023c6:	68f8      	ldr	r0, [r7, #12]
 80023c8:	f000 f982 	bl	80026d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00d      	beq.n	80023ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d107      	bne.n	80023ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e050      	b.n	8002490 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80023ee:	893b      	ldrh	r3, [r7, #8]
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fa:	6a39      	ldr	r1, [r7, #32]
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 f967 	bl	80026d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00d      	beq.n	8002424 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	2b04      	cmp	r3, #4
 800240e:	d107      	bne.n	8002420 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800241e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e035      	b.n	8002490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002432:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	2200      	movs	r2, #0
 800243c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 f82b 	bl	800249c <I2C_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00d      	beq.n	8002468 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800245a:	d103      	bne.n	8002464 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e013      	b.n	8002490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002468:	897b      	ldrh	r3, [r7, #10]
 800246a:	b2db      	uxtb	r3, r3
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247a:	6a3a      	ldr	r2, [r7, #32]
 800247c:	4906      	ldr	r1, [pc, #24]	@ (8002498 <I2C_RequestMemoryRead+0x1cc>)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f886 	bl	8002590 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	00010002 	.word	0x00010002

0800249c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ac:	e048      	b.n	8002540 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b4:	d044      	beq.n	8002540 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024b6:	f7fe fdef 	bl	8001098 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d302      	bcc.n	80024cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d139      	bne.n	8002540 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	0c1b      	lsrs	r3, r3, #16
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d10d      	bne.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	43da      	mvns	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	4013      	ands	r3, r2
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	e00c      	b.n	800250c <I2C_WaitOnFlagUntilTimeout+0x70>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	43da      	mvns	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	4013      	ands	r3, r2
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	429a      	cmp	r2, r3
 8002510:	d116      	bne.n	8002540 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f043 0220 	orr.w	r2, r3, #32
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e023      	b.n	8002588 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	0c1b      	lsrs	r3, r3, #16
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d10d      	bne.n	8002566 <I2C_WaitOnFlagUntilTimeout+0xca>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	43da      	mvns	r2, r3
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	4013      	ands	r3, r2
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	bf0c      	ite	eq
 800255c:	2301      	moveq	r3, #1
 800255e:	2300      	movne	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	461a      	mov	r2, r3
 8002564:	e00c      	b.n	8002580 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	43da      	mvns	r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4013      	ands	r3, r2
 8002572:	b29b      	uxth	r3, r3
 8002574:	2b00      	cmp	r3, #0
 8002576:	bf0c      	ite	eq
 8002578:	2301      	moveq	r3, #1
 800257a:	2300      	movne	r3, #0
 800257c:	b2db      	uxtb	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	429a      	cmp	r2, r3
 8002584:	d093      	beq.n	80024ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3710      	adds	r7, #16
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800259e:	e071      	b.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ae:	d123      	bne.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2220      	movs	r2, #32
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	f043 0204 	orr.w	r2, r3, #4
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e067      	b.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fe:	d041      	beq.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002600:	f7fe fd4a 	bl	8001098 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	429a      	cmp	r2, r3
 800260e:	d302      	bcc.n	8002616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d136      	bne.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d10c      	bne.n	800263a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	43da      	mvns	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4013      	ands	r3, r2
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	bf14      	ite	ne
 8002632:	2301      	movne	r3, #1
 8002634:	2300      	moveq	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	e00b      	b.n	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	43da      	mvns	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	4013      	ands	r3, r2
 8002646:	b29b      	uxth	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d016      	beq.n	8002684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2200      	movs	r2, #0
 800265a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	f043 0220 	orr.w	r2, r3, #32
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e021      	b.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	0c1b      	lsrs	r3, r3, #16
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d10c      	bne.n	80026a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	43da      	mvns	r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	4013      	ands	r3, r2
 800269a:	b29b      	uxth	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	e00b      	b.n	80026c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	43da      	mvns	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	4013      	ands	r3, r2
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f47f af6d 	bne.w	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026dc:	e034      	b.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f8e3 	bl	80028aa <I2C_IsAcknowledgeFailed>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e034      	b.n	8002758 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d028      	beq.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7fe fccf 	bl	8001098 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d11d      	bne.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002716:	2b80      	cmp	r3, #128	@ 0x80
 8002718:	d016      	beq.n	8002748 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	f043 0220 	orr.w	r2, r3, #32
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e007      	b.n	8002758 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002752:	2b80      	cmp	r3, #128	@ 0x80
 8002754:	d1c3      	bne.n	80026de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800276c:	e034      	b.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 f89b 	bl	80028aa <I2C_IsAcknowledgeFailed>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e034      	b.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d028      	beq.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002786:	f7fe fc87 	bl	8001098 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	429a      	cmp	r2, r3
 8002794:	d302      	bcc.n	800279c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d11d      	bne.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d016      	beq.n	80027d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	f043 0220 	orr.w	r2, r3, #32
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e007      	b.n	80027e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d1c3      	bne.n	800276e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027fc:	e049      	b.n	8002892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b10      	cmp	r3, #16
 800280a:	d119      	bne.n	8002840 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0210 	mvn.w	r2, #16
 8002814:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e030      	b.n	80028a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002840:	f7fe fc2a 	bl	8001098 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	429a      	cmp	r2, r3
 800284e:	d302      	bcc.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d11d      	bne.n	8002892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002860:	2b40      	cmp	r3, #64	@ 0x40
 8002862:	d016      	beq.n	8002892 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	f043 0220 	orr.w	r2, r3, #32
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e007      	b.n	80028a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289c:	2b40      	cmp	r3, #64	@ 0x40
 800289e:	d1ae      	bne.n	80027fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c0:	d11b      	bne.n	80028fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2220      	movs	r2, #32
 80028d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	f043 0204 	orr.w	r2, r3, #4
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e267      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d075      	beq.n	8002a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002926:	4b88      	ldr	r3, [pc, #544]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 030c 	and.w	r3, r3, #12
 800292e:	2b04      	cmp	r3, #4
 8002930:	d00c      	beq.n	800294c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002932:	4b85      	ldr	r3, [pc, #532]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800293a:	2b08      	cmp	r3, #8
 800293c:	d112      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b82      	ldr	r3, [pc, #520]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800294a:	d10b      	bne.n	8002964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800294c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d05b      	beq.n	8002a10 <HAL_RCC_OscConfig+0x108>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d157      	bne.n	8002a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e242      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800296c:	d106      	bne.n	800297c <HAL_RCC_OscConfig+0x74>
 800296e:	4b76      	ldr	r3, [pc, #472]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a75      	ldr	r2, [pc, #468]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e01d      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002984:	d10c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x98>
 8002986:	4b70      	ldr	r3, [pc, #448]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a6f      	ldr	r2, [pc, #444]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 800298c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	4b6d      	ldr	r3, [pc, #436]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a6c      	ldr	r2, [pc, #432]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e00b      	b.n	80029b8 <HAL_RCC_OscConfig+0xb0>
 80029a0:	4b69      	ldr	r3, [pc, #420]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a68      	ldr	r2, [pc, #416]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b66      	ldr	r3, [pc, #408]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a65      	ldr	r2, [pc, #404]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fb6a 	bl	8001098 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe fb66 	bl	8001098 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	@ 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e207      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	4b5b      	ldr	r3, [pc, #364]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f0      	beq.n	80029c8 <HAL_RCC_OscConfig+0xc0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fb56 	bl	8001098 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fb52 	bl	8001098 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	@ 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e1f3      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	4b51      	ldr	r3, [pc, #324]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0xe8>
 8002a0e:	e000      	b.n	8002a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d063      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a2a:	4b47      	ldr	r3, [pc, #284]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d11c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a36:	4b44      	ldr	r3, [pc, #272]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d116      	bne.n	8002a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a42:	4b41      	ldr	r3, [pc, #260]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d001      	beq.n	8002a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e1c7      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	4937      	ldr	r1, [pc, #220]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	e03a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d020      	beq.n	8002aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a78:	4b34      	ldr	r3, [pc, #208]	@ (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fb0b 	bl	8001098 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a86:	f7fe fb07 	bl	8001098 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e1a8      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	4b2b      	ldr	r3, [pc, #172]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa4:	4b28      	ldr	r3, [pc, #160]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4925      	ldr	r1, [pc, #148]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	600b      	str	r3, [r1, #0]
 8002ab8:	e015      	b.n	8002ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002aba:	4b24      	ldr	r3, [pc, #144]	@ (8002b4c <HAL_RCC_OscConfig+0x244>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe faea 	bl	8001098 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac8:	f7fe fae6 	bl	8001098 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e187      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	4b1b      	ldr	r3, [pc, #108]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d036      	beq.n	8002b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d016      	beq.n	8002b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afa:	4b15      	ldr	r3, [pc, #84]	@ (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe faca 	bl	8001098 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b08:	f7fe fac6 	bl	8001098 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e167      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <HAL_RCC_OscConfig+0x240>)
 8002b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x200>
 8002b26:	e01b      	b.n	8002b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	4b09      	ldr	r3, [pc, #36]	@ (8002b50 <HAL_RCC_OscConfig+0x248>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fab3 	bl	8001098 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b34:	e00e      	b.n	8002b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b36:	f7fe faaf 	bl	8001098 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d907      	bls.n	8002b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e150      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	42470000 	.word	0x42470000
 8002b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b54:	4b88      	ldr	r3, [pc, #544]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ea      	bne.n	8002b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8097 	beq.w	8002c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4b81      	ldr	r3, [pc, #516]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10f      	bne.n	8002b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b7d      	ldr	r3, [pc, #500]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b86:	4a7c      	ldr	r2, [pc, #496]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b77      	ldr	r3, [pc, #476]	@ (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b74      	ldr	r3, [pc, #464]	@ (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a73      	ldr	r2, [pc, #460]	@ (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe fa6f 	bl	8001098 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7fe fa6b 	bl	8001098 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e10c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d7c <HAL_RCC_OscConfig+0x474>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x2ea>
 8002be4:	4b64      	ldr	r3, [pc, #400]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be8:	4a63      	ldr	r2, [pc, #396]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf0:	e01c      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	2b05      	cmp	r3, #5
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x30c>
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfe:	4a5e      	ldr	r2, [pc, #376]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c06:	4b5c      	ldr	r3, [pc, #368]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c12:	e00b      	b.n	8002c2c <HAL_RCC_OscConfig+0x324>
 8002c14:	4b58      	ldr	r3, [pc, #352]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c18:	4a57      	ldr	r2, [pc, #348]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c1a:	f023 0301 	bic.w	r3, r3, #1
 8002c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c20:	4b55      	ldr	r3, [pc, #340]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c24:	4a54      	ldr	r2, [pc, #336]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 0304 	bic.w	r3, r3, #4
 8002c2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d015      	beq.n	8002c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c34:	f7fe fa30 	bl	8001098 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c3c:	f7fe fa2c 	bl	8001098 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e0cb      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c52:	4b49      	ldr	r3, [pc, #292]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0ee      	beq.n	8002c3c <HAL_RCC_OscConfig+0x334>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fe fa1a 	bl	8001098 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe fa16 	bl	8001098 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0b5      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1ee      	bne.n	8002c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	4b39      	ldr	r3, [pc, #228]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	4a38      	ldr	r2, [pc, #224]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a1 	beq.w	8002de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ca6:	4b34      	ldr	r3, [pc, #208]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d05c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d141      	bne.n	8002d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cba:	4b31      	ldr	r3, [pc, #196]	@ (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc0:	f7fe f9ea 	bl	8001098 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe f9e6 	bl	8001098 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e087      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	4b27      	ldr	r3, [pc, #156]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1f0      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69da      	ldr	r2, [r3, #28]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d08:	061b      	lsls	r3, r3, #24
 8002d0a:	491b      	ldr	r1, [pc, #108]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d10:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d16:	f7fe f9bf 	bl	8001098 <HAL_GetTick>
 8002d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1c:	e008      	b.n	8002d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1e:	f7fe f9bb 	bl	8001098 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e05c      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d30:	4b11      	ldr	r3, [pc, #68]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCC_OscConfig+0x416>
 8002d3c:	e054      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3e:	4b10      	ldr	r3, [pc, #64]	@ (8002d80 <HAL_RCC_OscConfig+0x478>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe f9a8 	bl	8001098 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4c:	f7fe f9a4 	bl	8001098 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e045      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_RCC_OscConfig+0x470>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x444>
 8002d6a:	e03d      	b.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e038      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d84:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <HAL_RCC_OscConfig+0x4ec>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d028      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d121      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11a      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002db4:	4013      	ands	r3, r2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d111      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	085b      	lsrs	r3, r3, #1
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d001      	beq.n	8002de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40023800 	.word	0x40023800

08002df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0cc      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b68      	ldr	r3, [pc, #416]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d90c      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b65      	ldr	r3, [pc, #404]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b63      	ldr	r3, [pc, #396]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b8      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e4c:	4b59      	ldr	r3, [pc, #356]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a58      	ldr	r2, [pc, #352]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e64:	4b53      	ldr	r3, [pc, #332]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a52      	ldr	r2, [pc, #328]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b50      	ldr	r3, [pc, #320]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	494d      	ldr	r1, [pc, #308]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d044      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b47      	ldr	r3, [pc, #284]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d119      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d003      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e06f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e067      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ed6:	4b37      	ldr	r3, [pc, #220]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f023 0203 	bic.w	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4934      	ldr	r1, [pc, #208]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7fe f8d6 	bl	8001098 <HAL_GetTick>
 8002eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	e00a      	b.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef0:	f7fe f8d2 	bl	8001098 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e04f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f06:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 020c 	and.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d1eb      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f18:	4b25      	ldr	r3, [pc, #148]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d20c      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f26:	4b22      	ldr	r3, [pc, #136]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e032      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4916      	ldr	r1, [pc, #88]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6a:	4b12      	ldr	r3, [pc, #72]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	490e      	ldr	r1, [pc, #56]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f7e:	f000 f821 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	490a      	ldr	r1, [pc, #40]	@ (8002fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a09      	ldr	r2, [pc, #36]	@ (8002fbc <HAL_RCC_ClockConfig+0x1c4>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f9a:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe f836 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023c00 	.word	0x40023c00
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08004360 	.word	0x08004360
 8002fbc:	20000008 	.word	0x20000008
 8002fc0:	2000000c 	.word	0x2000000c

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc8:	b090      	sub	sp, #64	@ 0x40
 8002fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fdc:	4b59      	ldr	r3, [pc, #356]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d00d      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x40>
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	f200 80a1 	bhi.w	8003130 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ff6:	e09b      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b53      	ldr	r3, [pc, #332]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002ffc:	e09b      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffe:	4b53      	ldr	r3, [pc, #332]	@ (800314c <HAL_RCC_GetSysClockFreq+0x188>)
 8003000:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003002:	e098      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003004:	4b4f      	ldr	r3, [pc, #316]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800300c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300e:	4b4d      	ldr	r3, [pc, #308]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d028      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301a:	4b4a      	ldr	r3, [pc, #296]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	2200      	movs	r2, #0
 8003022:	623b      	str	r3, [r7, #32]
 8003024:	627a      	str	r2, [r7, #36]	@ 0x24
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800302c:	2100      	movs	r1, #0
 800302e:	4b47      	ldr	r3, [pc, #284]	@ (800314c <HAL_RCC_GetSysClockFreq+0x188>)
 8003030:	fb03 f201 	mul.w	r2, r3, r1
 8003034:	2300      	movs	r3, #0
 8003036:	fb00 f303 	mul.w	r3, r0, r3
 800303a:	4413      	add	r3, r2
 800303c:	4a43      	ldr	r2, [pc, #268]	@ (800314c <HAL_RCC_GetSysClockFreq+0x188>)
 800303e:	fba0 1202 	umull	r1, r2, r0, r2
 8003042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003044:	460a      	mov	r2, r1
 8003046:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800304a:	4413      	add	r3, r2
 800304c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800304e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003050:	2200      	movs	r2, #0
 8003052:	61bb      	str	r3, [r7, #24]
 8003054:	61fa      	str	r2, [r7, #28]
 8003056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800305a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800305e:	f7fd f917 	bl	8000290 <__aeabi_uldivmod>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	4613      	mov	r3, r2
 8003068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800306a:	e053      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306c:	4b35      	ldr	r3, [pc, #212]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	2200      	movs	r2, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	617a      	str	r2, [r7, #20]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800307e:	f04f 0b00 	mov.w	fp, #0
 8003082:	4652      	mov	r2, sl
 8003084:	465b      	mov	r3, fp
 8003086:	f04f 0000 	mov.w	r0, #0
 800308a:	f04f 0100 	mov.w	r1, #0
 800308e:	0159      	lsls	r1, r3, #5
 8003090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003094:	0150      	lsls	r0, r2, #5
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	ebb2 080a 	subs.w	r8, r2, sl
 800309e:	eb63 090b 	sbc.w	r9, r3, fp
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030b6:	ebb2 0408 	subs.w	r4, r2, r8
 80030ba:	eb63 0509 	sbc.w	r5, r3, r9
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	00eb      	lsls	r3, r5, #3
 80030c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030cc:	00e2      	lsls	r2, r4, #3
 80030ce:	4614      	mov	r4, r2
 80030d0:	461d      	mov	r5, r3
 80030d2:	eb14 030a 	adds.w	r3, r4, sl
 80030d6:	603b      	str	r3, [r7, #0]
 80030d8:	eb45 030b 	adc.w	r3, r5, fp
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	f04f 0200 	mov.w	r2, #0
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030ea:	4629      	mov	r1, r5
 80030ec:	028b      	lsls	r3, r1, #10
 80030ee:	4621      	mov	r1, r4
 80030f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030f4:	4621      	mov	r1, r4
 80030f6:	028a      	lsls	r2, r1, #10
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fe:	2200      	movs	r2, #0
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	60fa      	str	r2, [r7, #12]
 8003104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003108:	f7fd f8c2 	bl	8000290 <__aeabi_uldivmod>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4613      	mov	r3, r2
 8003112:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003114:	4b0b      	ldr	r3, [pc, #44]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	3301      	adds	r3, #1
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003124:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003128:	fbb2 f3f3 	udiv	r3, r2, r3
 800312c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800312e:	e002      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x184>)
 8003132:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003138:	4618      	mov	r0, r3
 800313a:	3740      	adds	r7, #64	@ 0x40
 800313c:	46bd      	mov	sp, r7
 800313e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003142:	bf00      	nop
 8003144:	40023800 	.word	0x40023800
 8003148:	00f42400 	.word	0x00f42400
 800314c:	017d7840 	.word	0x017d7840

08003150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003154:	4b03      	ldr	r3, [pc, #12]	@ (8003164 <HAL_RCC_GetHCLKFreq+0x14>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000008 	.word	0x20000008

08003168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800316c:	f7ff fff0 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	0a9b      	lsrs	r3, r3, #10
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	4903      	ldr	r1, [pc, #12]	@ (800318c <HAL_RCC_GetPCLK1Freq+0x24>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	08004370 	.word	0x08004370

08003190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003194:	f7ff ffdc 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0b5b      	lsrs	r3, r3, #13
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4903      	ldr	r1, [pc, #12]	@ (80031b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	08004370 	.word	0x08004370

080031b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e042      	b.n	8003250 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f7fd fdd6 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2224      	movs	r2, #36	@ 0x24
 80031e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f973 	bl	80034e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003210:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003220:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003230:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	@ 0x28
 800325c:	af02      	add	r7, sp, #8
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	603b      	str	r3, [r7, #0]
 8003264:	4613      	mov	r3, r2
 8003266:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b20      	cmp	r3, #32
 8003276:	d175      	bne.n	8003364 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d002      	beq.n	8003284 <HAL_UART_Transmit+0x2c>
 800327e:	88fb      	ldrh	r3, [r7, #6]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e06e      	b.n	8003366 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2221      	movs	r2, #33	@ 0x21
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003296:	f7fd feff 	bl	8001098 <HAL_GetTick>
 800329a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	88fa      	ldrh	r2, [r7, #6]
 80032a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b0:	d108      	bne.n	80032c4 <HAL_UART_Transmit+0x6c>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d104      	bne.n	80032c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	e003      	b.n	80032cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032cc:	e02e      	b.n	800332c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	@ 0x80
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f848 	bl	800336e <UART_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e03a      	b.n	8003366 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003304:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	3302      	adds	r3, #2
 800330a:	61bb      	str	r3, [r7, #24]
 800330c:	e007      	b.n	800331e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	781a      	ldrb	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	3301      	adds	r3, #1
 800331c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1cb      	bne.n	80032ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	2200      	movs	r2, #0
 800333e:	2140      	movs	r1, #64	@ 0x40
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f814 	bl	800336e <UART_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e006      	b.n	8003366 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b086      	sub	sp, #24
 8003372:	af00      	add	r7, sp, #0
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	4613      	mov	r3, r2
 800337c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800337e:	e03b      	b.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d037      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003388:	f7fd fe86 	bl	8001098 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	6a3a      	ldr	r2, [r7, #32]
 8003394:	429a      	cmp	r2, r3
 8003396:	d302      	bcc.n	800339e <UART_WaitOnFlagUntilTimeout+0x30>
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e03a      	b.n	8003418 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d023      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b80      	cmp	r3, #128	@ 0x80
 80033b4:	d020      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b40      	cmp	r3, #64	@ 0x40
 80033ba:	d01d      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d116      	bne.n	80033f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 f81d 	bl	8003420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2208      	movs	r2, #8
 80033ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e00f      	b.n	8003418 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	429a      	cmp	r2, r3
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	429a      	cmp	r2, r3
 8003414:	d0b4      	beq.n	8003380 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003420:	b480      	push	{r7}
 8003422:	b095      	sub	sp, #84	@ 0x54
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800343e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	330c      	adds	r3, #12
 8003446:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003448:	643a      	str	r2, [r7, #64]	@ 0x40
 800344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800344e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e5      	bne.n	8003428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3314      	adds	r3, #20
 8003462:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	e853 3f00 	ldrex	r3, [r3]
 800346a:	61fb      	str	r3, [r7, #28]
   return(result);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f023 0301 	bic.w	r3, r3, #1
 8003472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	3314      	adds	r3, #20
 800347a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800347c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003482:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e5      	bne.n	800345c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003494:	2b01      	cmp	r3, #1
 8003496:	d119      	bne.n	80034cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f023 0310 	bic.w	r3, r3, #16
 80034ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034b8:	61ba      	str	r2, [r7, #24]
 80034ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	6979      	ldr	r1, [r7, #20]
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	613b      	str	r3, [r7, #16]
   return(result);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e5      	bne.n	8003498 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034da:	bf00      	nop
 80034dc:	3754      	adds	r7, #84	@ 0x54
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034ec:	b0c0      	sub	sp, #256	@ 0x100
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003504:	68d9      	ldr	r1, [r3, #12]
 8003506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	ea40 0301 	orr.w	r3, r0, r1
 8003510:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	431a      	orrs	r2, r3
 8003520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	431a      	orrs	r2, r3
 8003528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	4313      	orrs	r3, r2
 8003530:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003540:	f021 010c 	bic.w	r1, r1, #12
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800354e:	430b      	orrs	r3, r1
 8003550:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800355e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003562:	6999      	ldr	r1, [r3, #24]
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	ea40 0301 	orr.w	r3, r0, r1
 800356e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	4b8f      	ldr	r3, [pc, #572]	@ (80037b4 <UART_SetConfig+0x2cc>)
 8003578:	429a      	cmp	r2, r3
 800357a:	d005      	beq.n	8003588 <UART_SetConfig+0xa0>
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4b8d      	ldr	r3, [pc, #564]	@ (80037b8 <UART_SetConfig+0x2d0>)
 8003584:	429a      	cmp	r2, r3
 8003586:	d104      	bne.n	8003592 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003588:	f7ff fe02 	bl	8003190 <HAL_RCC_GetPCLK2Freq>
 800358c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003590:	e003      	b.n	800359a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003592:	f7ff fde9 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8003596:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800359a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035a4:	f040 810c 	bne.w	80037c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ac:	2200      	movs	r2, #0
 80035ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80035b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80035ba:	4622      	mov	r2, r4
 80035bc:	462b      	mov	r3, r5
 80035be:	1891      	adds	r1, r2, r2
 80035c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80035c2:	415b      	adcs	r3, r3
 80035c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035ca:	4621      	mov	r1, r4
 80035cc:	eb12 0801 	adds.w	r8, r2, r1
 80035d0:	4629      	mov	r1, r5
 80035d2:	eb43 0901 	adc.w	r9, r3, r1
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ea:	4690      	mov	r8, r2
 80035ec:	4699      	mov	r9, r3
 80035ee:	4623      	mov	r3, r4
 80035f0:	eb18 0303 	adds.w	r3, r8, r3
 80035f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80035f8:	462b      	mov	r3, r5
 80035fa:	eb49 0303 	adc.w	r3, r9, r3
 80035fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800360e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003612:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003616:	460b      	mov	r3, r1
 8003618:	18db      	adds	r3, r3, r3
 800361a:	653b      	str	r3, [r7, #80]	@ 0x50
 800361c:	4613      	mov	r3, r2
 800361e:	eb42 0303 	adc.w	r3, r2, r3
 8003622:	657b      	str	r3, [r7, #84]	@ 0x54
 8003624:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003628:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800362c:	f7fc fe30 	bl	8000290 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4b61      	ldr	r3, [pc, #388]	@ (80037bc <UART_SetConfig+0x2d4>)
 8003636:	fba3 2302 	umull	r2, r3, r3, r2
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	011c      	lsls	r4, r3, #4
 800363e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003642:	2200      	movs	r2, #0
 8003644:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003648:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800364c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003650:	4642      	mov	r2, r8
 8003652:	464b      	mov	r3, r9
 8003654:	1891      	adds	r1, r2, r2
 8003656:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003658:	415b      	adcs	r3, r3
 800365a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800365c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003660:	4641      	mov	r1, r8
 8003662:	eb12 0a01 	adds.w	sl, r2, r1
 8003666:	4649      	mov	r1, r9
 8003668:	eb43 0b01 	adc.w	fp, r3, r1
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003678:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800367c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003680:	4692      	mov	sl, r2
 8003682:	469b      	mov	fp, r3
 8003684:	4643      	mov	r3, r8
 8003686:	eb1a 0303 	adds.w	r3, sl, r3
 800368a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800368e:	464b      	mov	r3, r9
 8003690:	eb4b 0303 	adc.w	r3, fp, r3
 8003694:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80036a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80036a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80036ac:	460b      	mov	r3, r1
 80036ae:	18db      	adds	r3, r3, r3
 80036b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80036b2:	4613      	mov	r3, r2
 80036b4:	eb42 0303 	adc.w	r3, r2, r3
 80036b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80036be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80036c2:	f7fc fde5 	bl	8000290 <__aeabi_uldivmod>
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4611      	mov	r1, r2
 80036cc:	4b3b      	ldr	r3, [pc, #236]	@ (80037bc <UART_SetConfig+0x2d4>)
 80036ce:	fba3 2301 	umull	r2, r3, r3, r1
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2264      	movs	r2, #100	@ 0x64
 80036d6:	fb02 f303 	mul.w	r3, r2, r3
 80036da:	1acb      	subs	r3, r1, r3
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80036e2:	4b36      	ldr	r3, [pc, #216]	@ (80037bc <UART_SetConfig+0x2d4>)
 80036e4:	fba3 2302 	umull	r2, r3, r3, r2
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80036f0:	441c      	add	r4, r3
 80036f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003700:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003704:	4642      	mov	r2, r8
 8003706:	464b      	mov	r3, r9
 8003708:	1891      	adds	r1, r2, r2
 800370a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800370c:	415b      	adcs	r3, r3
 800370e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003714:	4641      	mov	r1, r8
 8003716:	1851      	adds	r1, r2, r1
 8003718:	6339      	str	r1, [r7, #48]	@ 0x30
 800371a:	4649      	mov	r1, r9
 800371c:	414b      	adcs	r3, r1
 800371e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003720:	f04f 0200 	mov.w	r2, #0
 8003724:	f04f 0300 	mov.w	r3, #0
 8003728:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800372c:	4659      	mov	r1, fp
 800372e:	00cb      	lsls	r3, r1, #3
 8003730:	4651      	mov	r1, sl
 8003732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003736:	4651      	mov	r1, sl
 8003738:	00ca      	lsls	r2, r1, #3
 800373a:	4610      	mov	r0, r2
 800373c:	4619      	mov	r1, r3
 800373e:	4603      	mov	r3, r0
 8003740:	4642      	mov	r2, r8
 8003742:	189b      	adds	r3, r3, r2
 8003744:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003748:	464b      	mov	r3, r9
 800374a:	460a      	mov	r2, r1
 800374c:	eb42 0303 	adc.w	r3, r2, r3
 8003750:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003760:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003764:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003768:	460b      	mov	r3, r1
 800376a:	18db      	adds	r3, r3, r3
 800376c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800376e:	4613      	mov	r3, r2
 8003770:	eb42 0303 	adc.w	r3, r2, r3
 8003774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800377a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800377e:	f7fc fd87 	bl	8000290 <__aeabi_uldivmod>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4b0d      	ldr	r3, [pc, #52]	@ (80037bc <UART_SetConfig+0x2d4>)
 8003788:	fba3 1302 	umull	r1, r3, r3, r2
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	2164      	movs	r1, #100	@ 0x64
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	3332      	adds	r3, #50	@ 0x32
 800379a:	4a08      	ldr	r2, [pc, #32]	@ (80037bc <UART_SetConfig+0x2d4>)
 800379c:	fba2 2303 	umull	r2, r3, r2, r3
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	f003 0207 	and.w	r2, r3, #7
 80037a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4422      	add	r2, r4
 80037ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037b0:	e106      	b.n	80039c0 <UART_SetConfig+0x4d8>
 80037b2:	bf00      	nop
 80037b4:	40011000 	.word	0x40011000
 80037b8:	40011400 	.word	0x40011400
 80037bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037c4:	2200      	movs	r2, #0
 80037c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80037ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80037ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80037d2:	4642      	mov	r2, r8
 80037d4:	464b      	mov	r3, r9
 80037d6:	1891      	adds	r1, r2, r2
 80037d8:	6239      	str	r1, [r7, #32]
 80037da:	415b      	adcs	r3, r3
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037e2:	4641      	mov	r1, r8
 80037e4:	1854      	adds	r4, r2, r1
 80037e6:	4649      	mov	r1, r9
 80037e8:	eb43 0501 	adc.w	r5, r3, r1
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	00eb      	lsls	r3, r5, #3
 80037f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037fa:	00e2      	lsls	r2, r4, #3
 80037fc:	4614      	mov	r4, r2
 80037fe:	461d      	mov	r5, r3
 8003800:	4643      	mov	r3, r8
 8003802:	18e3      	adds	r3, r4, r3
 8003804:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003808:	464b      	mov	r3, r9
 800380a:	eb45 0303 	adc.w	r3, r5, r3
 800380e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800381e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800382e:	4629      	mov	r1, r5
 8003830:	008b      	lsls	r3, r1, #2
 8003832:	4621      	mov	r1, r4
 8003834:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003838:	4621      	mov	r1, r4
 800383a:	008a      	lsls	r2, r1, #2
 800383c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003840:	f7fc fd26 	bl	8000290 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4b60      	ldr	r3, [pc, #384]	@ (80039cc <UART_SetConfig+0x4e4>)
 800384a:	fba3 2302 	umull	r2, r3, r3, r2
 800384e:	095b      	lsrs	r3, r3, #5
 8003850:	011c      	lsls	r4, r3, #4
 8003852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800385c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003860:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003864:	4642      	mov	r2, r8
 8003866:	464b      	mov	r3, r9
 8003868:	1891      	adds	r1, r2, r2
 800386a:	61b9      	str	r1, [r7, #24]
 800386c:	415b      	adcs	r3, r3
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003874:	4641      	mov	r1, r8
 8003876:	1851      	adds	r1, r2, r1
 8003878:	6139      	str	r1, [r7, #16]
 800387a:	4649      	mov	r1, r9
 800387c:	414b      	adcs	r3, r1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800388c:	4659      	mov	r1, fp
 800388e:	00cb      	lsls	r3, r1, #3
 8003890:	4651      	mov	r1, sl
 8003892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003896:	4651      	mov	r1, sl
 8003898:	00ca      	lsls	r2, r1, #3
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	4642      	mov	r2, r8
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038a8:	464b      	mov	r3, r9
 80038aa:	460a      	mov	r2, r1
 80038ac:	eb42 0303 	adc.w	r3, r2, r3
 80038b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80038be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80038cc:	4649      	mov	r1, r9
 80038ce:	008b      	lsls	r3, r1, #2
 80038d0:	4641      	mov	r1, r8
 80038d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d6:	4641      	mov	r1, r8
 80038d8:	008a      	lsls	r2, r1, #2
 80038da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80038de:	f7fc fcd7 	bl	8000290 <__aeabi_uldivmod>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	4b38      	ldr	r3, [pc, #224]	@ (80039cc <UART_SetConfig+0x4e4>)
 80038ea:	fba3 2301 	umull	r2, r3, r3, r1
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	2264      	movs	r2, #100	@ 0x64
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	1acb      	subs	r3, r1, r3
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	3332      	adds	r3, #50	@ 0x32
 80038fc:	4a33      	ldr	r2, [pc, #204]	@ (80039cc <UART_SetConfig+0x4e4>)
 80038fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003908:	441c      	add	r4, r3
 800390a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800390e:	2200      	movs	r2, #0
 8003910:	673b      	str	r3, [r7, #112]	@ 0x70
 8003912:	677a      	str	r2, [r7, #116]	@ 0x74
 8003914:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003918:	4642      	mov	r2, r8
 800391a:	464b      	mov	r3, r9
 800391c:	1891      	adds	r1, r2, r2
 800391e:	60b9      	str	r1, [r7, #8]
 8003920:	415b      	adcs	r3, r3
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003928:	4641      	mov	r1, r8
 800392a:	1851      	adds	r1, r2, r1
 800392c:	6039      	str	r1, [r7, #0]
 800392e:	4649      	mov	r1, r9
 8003930:	414b      	adcs	r3, r1
 8003932:	607b      	str	r3, [r7, #4]
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003940:	4659      	mov	r1, fp
 8003942:	00cb      	lsls	r3, r1, #3
 8003944:	4651      	mov	r1, sl
 8003946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800394a:	4651      	mov	r1, sl
 800394c:	00ca      	lsls	r2, r1, #3
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	4603      	mov	r3, r0
 8003954:	4642      	mov	r2, r8
 8003956:	189b      	adds	r3, r3, r2
 8003958:	66bb      	str	r3, [r7, #104]	@ 0x68
 800395a:	464b      	mov	r3, r9
 800395c:	460a      	mov	r2, r1
 800395e:	eb42 0303 	adc.w	r3, r2, r3
 8003962:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	663b      	str	r3, [r7, #96]	@ 0x60
 800396e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800397c:	4649      	mov	r1, r9
 800397e:	008b      	lsls	r3, r1, #2
 8003980:	4641      	mov	r1, r8
 8003982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003986:	4641      	mov	r1, r8
 8003988:	008a      	lsls	r2, r1, #2
 800398a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800398e:	f7fc fc7f 	bl	8000290 <__aeabi_uldivmod>
 8003992:	4602      	mov	r2, r0
 8003994:	460b      	mov	r3, r1
 8003996:	4b0d      	ldr	r3, [pc, #52]	@ (80039cc <UART_SetConfig+0x4e4>)
 8003998:	fba3 1302 	umull	r1, r3, r3, r2
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	2164      	movs	r1, #100	@ 0x64
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	3332      	adds	r3, #50	@ 0x32
 80039aa:	4a08      	ldr	r2, [pc, #32]	@ (80039cc <UART_SetConfig+0x4e4>)
 80039ac:	fba2 2303 	umull	r2, r3, r2, r3
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	f003 020f 	and.w	r2, r3, #15
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4422      	add	r2, r4
 80039be:	609a      	str	r2, [r3, #8]
}
 80039c0:	bf00      	nop
 80039c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80039c6:	46bd      	mov	sp, r7
 80039c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039cc:	51eb851f 	.word	0x51eb851f

080039d0 <sniprintf>:
 80039d0:	b40c      	push	{r2, r3}
 80039d2:	b530      	push	{r4, r5, lr}
 80039d4:	4b17      	ldr	r3, [pc, #92]	@ (8003a34 <sniprintf+0x64>)
 80039d6:	1e0c      	subs	r4, r1, #0
 80039d8:	681d      	ldr	r5, [r3, #0]
 80039da:	b09d      	sub	sp, #116	@ 0x74
 80039dc:	da08      	bge.n	80039f0 <sniprintf+0x20>
 80039de:	238b      	movs	r3, #139	@ 0x8b
 80039e0:	602b      	str	r3, [r5, #0]
 80039e2:	f04f 30ff 	mov.w	r0, #4294967295
 80039e6:	b01d      	add	sp, #116	@ 0x74
 80039e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039ec:	b002      	add	sp, #8
 80039ee:	4770      	bx	lr
 80039f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80039f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80039f8:	bf14      	ite	ne
 80039fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80039fe:	4623      	moveq	r3, r4
 8003a00:	9304      	str	r3, [sp, #16]
 8003a02:	9307      	str	r3, [sp, #28]
 8003a04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a08:	9002      	str	r0, [sp, #8]
 8003a0a:	9006      	str	r0, [sp, #24]
 8003a0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003a12:	ab21      	add	r3, sp, #132	@ 0x84
 8003a14:	a902      	add	r1, sp, #8
 8003a16:	4628      	mov	r0, r5
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	f000 f995 	bl	8003d48 <_svfiprintf_r>
 8003a1e:	1c43      	adds	r3, r0, #1
 8003a20:	bfbc      	itt	lt
 8003a22:	238b      	movlt	r3, #139	@ 0x8b
 8003a24:	602b      	strlt	r3, [r5, #0]
 8003a26:	2c00      	cmp	r4, #0
 8003a28:	d0dd      	beq.n	80039e6 <sniprintf+0x16>
 8003a2a:	9b02      	ldr	r3, [sp, #8]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]
 8003a30:	e7d9      	b.n	80039e6 <sniprintf+0x16>
 8003a32:	bf00      	nop
 8003a34:	20000014 	.word	0x20000014

08003a38 <memset>:
 8003a38:	4402      	add	r2, r0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d100      	bne.n	8003a42 <memset+0xa>
 8003a40:	4770      	bx	lr
 8003a42:	f803 1b01 	strb.w	r1, [r3], #1
 8003a46:	e7f9      	b.n	8003a3c <memset+0x4>

08003a48 <__errno>:
 8003a48:	4b01      	ldr	r3, [pc, #4]	@ (8003a50 <__errno+0x8>)
 8003a4a:	6818      	ldr	r0, [r3, #0]
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000014 	.word	0x20000014

08003a54 <__libc_init_array>:
 8003a54:	b570      	push	{r4, r5, r6, lr}
 8003a56:	4d0d      	ldr	r5, [pc, #52]	@ (8003a8c <__libc_init_array+0x38>)
 8003a58:	4c0d      	ldr	r4, [pc, #52]	@ (8003a90 <__libc_init_array+0x3c>)
 8003a5a:	1b64      	subs	r4, r4, r5
 8003a5c:	10a4      	asrs	r4, r4, #2
 8003a5e:	2600      	movs	r6, #0
 8003a60:	42a6      	cmp	r6, r4
 8003a62:	d109      	bne.n	8003a78 <__libc_init_array+0x24>
 8003a64:	4d0b      	ldr	r5, [pc, #44]	@ (8003a94 <__libc_init_array+0x40>)
 8003a66:	4c0c      	ldr	r4, [pc, #48]	@ (8003a98 <__libc_init_array+0x44>)
 8003a68:	f000 fc66 	bl	8004338 <_init>
 8003a6c:	1b64      	subs	r4, r4, r5
 8003a6e:	10a4      	asrs	r4, r4, #2
 8003a70:	2600      	movs	r6, #0
 8003a72:	42a6      	cmp	r6, r4
 8003a74:	d105      	bne.n	8003a82 <__libc_init_array+0x2e>
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
 8003a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a7c:	4798      	blx	r3
 8003a7e:	3601      	adds	r6, #1
 8003a80:	e7ee      	b.n	8003a60 <__libc_init_array+0xc>
 8003a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a86:	4798      	blx	r3
 8003a88:	3601      	adds	r6, #1
 8003a8a:	e7f2      	b.n	8003a72 <__libc_init_array+0x1e>
 8003a8c:	080043b4 	.word	0x080043b4
 8003a90:	080043b4 	.word	0x080043b4
 8003a94:	080043b4 	.word	0x080043b4
 8003a98:	080043b8 	.word	0x080043b8

08003a9c <__retarget_lock_acquire_recursive>:
 8003a9c:	4770      	bx	lr

08003a9e <__retarget_lock_release_recursive>:
 8003a9e:	4770      	bx	lr

08003aa0 <_free_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4605      	mov	r5, r0
 8003aa4:	2900      	cmp	r1, #0
 8003aa6:	d041      	beq.n	8003b2c <_free_r+0x8c>
 8003aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aac:	1f0c      	subs	r4, r1, #4
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bfb8      	it	lt
 8003ab2:	18e4      	addlt	r4, r4, r3
 8003ab4:	f000 f8e0 	bl	8003c78 <__malloc_lock>
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8003b30 <_free_r+0x90>)
 8003aba:	6813      	ldr	r3, [r2, #0]
 8003abc:	b933      	cbnz	r3, 8003acc <_free_r+0x2c>
 8003abe:	6063      	str	r3, [r4, #4]
 8003ac0:	6014      	str	r4, [r2, #0]
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ac8:	f000 b8dc 	b.w	8003c84 <__malloc_unlock>
 8003acc:	42a3      	cmp	r3, r4
 8003ace:	d908      	bls.n	8003ae2 <_free_r+0x42>
 8003ad0:	6820      	ldr	r0, [r4, #0]
 8003ad2:	1821      	adds	r1, r4, r0
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	bf01      	itttt	eq
 8003ad8:	6819      	ldreq	r1, [r3, #0]
 8003ada:	685b      	ldreq	r3, [r3, #4]
 8003adc:	1809      	addeq	r1, r1, r0
 8003ade:	6021      	streq	r1, [r4, #0]
 8003ae0:	e7ed      	b.n	8003abe <_free_r+0x1e>
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	b10b      	cbz	r3, 8003aec <_free_r+0x4c>
 8003ae8:	42a3      	cmp	r3, r4
 8003aea:	d9fa      	bls.n	8003ae2 <_free_r+0x42>
 8003aec:	6811      	ldr	r1, [r2, #0]
 8003aee:	1850      	adds	r0, r2, r1
 8003af0:	42a0      	cmp	r0, r4
 8003af2:	d10b      	bne.n	8003b0c <_free_r+0x6c>
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	4401      	add	r1, r0
 8003af8:	1850      	adds	r0, r2, r1
 8003afa:	4283      	cmp	r3, r0
 8003afc:	6011      	str	r1, [r2, #0]
 8003afe:	d1e0      	bne.n	8003ac2 <_free_r+0x22>
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	6053      	str	r3, [r2, #4]
 8003b06:	4408      	add	r0, r1
 8003b08:	6010      	str	r0, [r2, #0]
 8003b0a:	e7da      	b.n	8003ac2 <_free_r+0x22>
 8003b0c:	d902      	bls.n	8003b14 <_free_r+0x74>
 8003b0e:	230c      	movs	r3, #12
 8003b10:	602b      	str	r3, [r5, #0]
 8003b12:	e7d6      	b.n	8003ac2 <_free_r+0x22>
 8003b14:	6820      	ldr	r0, [r4, #0]
 8003b16:	1821      	adds	r1, r4, r0
 8003b18:	428b      	cmp	r3, r1
 8003b1a:	bf04      	itt	eq
 8003b1c:	6819      	ldreq	r1, [r3, #0]
 8003b1e:	685b      	ldreq	r3, [r3, #4]
 8003b20:	6063      	str	r3, [r4, #4]
 8003b22:	bf04      	itt	eq
 8003b24:	1809      	addeq	r1, r1, r0
 8003b26:	6021      	streq	r1, [r4, #0]
 8003b28:	6054      	str	r4, [r2, #4]
 8003b2a:	e7ca      	b.n	8003ac2 <_free_r+0x22>
 8003b2c:	bd38      	pop	{r3, r4, r5, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000324 	.word	0x20000324

08003b34 <sbrk_aligned>:
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	4e0f      	ldr	r6, [pc, #60]	@ (8003b74 <sbrk_aligned+0x40>)
 8003b38:	460c      	mov	r4, r1
 8003b3a:	6831      	ldr	r1, [r6, #0]
 8003b3c:	4605      	mov	r5, r0
 8003b3e:	b911      	cbnz	r1, 8003b46 <sbrk_aligned+0x12>
 8003b40:	f000 fba6 	bl	8004290 <_sbrk_r>
 8003b44:	6030      	str	r0, [r6, #0]
 8003b46:	4621      	mov	r1, r4
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f000 fba1 	bl	8004290 <_sbrk_r>
 8003b4e:	1c43      	adds	r3, r0, #1
 8003b50:	d103      	bne.n	8003b5a <sbrk_aligned+0x26>
 8003b52:	f04f 34ff 	mov.w	r4, #4294967295
 8003b56:	4620      	mov	r0, r4
 8003b58:	bd70      	pop	{r4, r5, r6, pc}
 8003b5a:	1cc4      	adds	r4, r0, #3
 8003b5c:	f024 0403 	bic.w	r4, r4, #3
 8003b60:	42a0      	cmp	r0, r4
 8003b62:	d0f8      	beq.n	8003b56 <sbrk_aligned+0x22>
 8003b64:	1a21      	subs	r1, r4, r0
 8003b66:	4628      	mov	r0, r5
 8003b68:	f000 fb92 	bl	8004290 <_sbrk_r>
 8003b6c:	3001      	adds	r0, #1
 8003b6e:	d1f2      	bne.n	8003b56 <sbrk_aligned+0x22>
 8003b70:	e7ef      	b.n	8003b52 <sbrk_aligned+0x1e>
 8003b72:	bf00      	nop
 8003b74:	20000320 	.word	0x20000320

08003b78 <_malloc_r>:
 8003b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b7c:	1ccd      	adds	r5, r1, #3
 8003b7e:	f025 0503 	bic.w	r5, r5, #3
 8003b82:	3508      	adds	r5, #8
 8003b84:	2d0c      	cmp	r5, #12
 8003b86:	bf38      	it	cc
 8003b88:	250c      	movcc	r5, #12
 8003b8a:	2d00      	cmp	r5, #0
 8003b8c:	4606      	mov	r6, r0
 8003b8e:	db01      	blt.n	8003b94 <_malloc_r+0x1c>
 8003b90:	42a9      	cmp	r1, r5
 8003b92:	d904      	bls.n	8003b9e <_malloc_r+0x26>
 8003b94:	230c      	movs	r3, #12
 8003b96:	6033      	str	r3, [r6, #0]
 8003b98:	2000      	movs	r0, #0
 8003b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c74 <_malloc_r+0xfc>
 8003ba2:	f000 f869 	bl	8003c78 <__malloc_lock>
 8003ba6:	f8d8 3000 	ldr.w	r3, [r8]
 8003baa:	461c      	mov	r4, r3
 8003bac:	bb44      	cbnz	r4, 8003c00 <_malloc_r+0x88>
 8003bae:	4629      	mov	r1, r5
 8003bb0:	4630      	mov	r0, r6
 8003bb2:	f7ff ffbf 	bl	8003b34 <sbrk_aligned>
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	4604      	mov	r4, r0
 8003bba:	d158      	bne.n	8003c6e <_malloc_r+0xf6>
 8003bbc:	f8d8 4000 	ldr.w	r4, [r8]
 8003bc0:	4627      	mov	r7, r4
 8003bc2:	2f00      	cmp	r7, #0
 8003bc4:	d143      	bne.n	8003c4e <_malloc_r+0xd6>
 8003bc6:	2c00      	cmp	r4, #0
 8003bc8:	d04b      	beq.n	8003c62 <_malloc_r+0xea>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	4639      	mov	r1, r7
 8003bce:	4630      	mov	r0, r6
 8003bd0:	eb04 0903 	add.w	r9, r4, r3
 8003bd4:	f000 fb5c 	bl	8004290 <_sbrk_r>
 8003bd8:	4581      	cmp	r9, r0
 8003bda:	d142      	bne.n	8003c62 <_malloc_r+0xea>
 8003bdc:	6821      	ldr	r1, [r4, #0]
 8003bde:	1a6d      	subs	r5, r5, r1
 8003be0:	4629      	mov	r1, r5
 8003be2:	4630      	mov	r0, r6
 8003be4:	f7ff ffa6 	bl	8003b34 <sbrk_aligned>
 8003be8:	3001      	adds	r0, #1
 8003bea:	d03a      	beq.n	8003c62 <_malloc_r+0xea>
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	442b      	add	r3, r5
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	bb62      	cbnz	r2, 8003c54 <_malloc_r+0xdc>
 8003bfa:	f8c8 7000 	str.w	r7, [r8]
 8003bfe:	e00f      	b.n	8003c20 <_malloc_r+0xa8>
 8003c00:	6822      	ldr	r2, [r4, #0]
 8003c02:	1b52      	subs	r2, r2, r5
 8003c04:	d420      	bmi.n	8003c48 <_malloc_r+0xd0>
 8003c06:	2a0b      	cmp	r2, #11
 8003c08:	d917      	bls.n	8003c3a <_malloc_r+0xc2>
 8003c0a:	1961      	adds	r1, r4, r5
 8003c0c:	42a3      	cmp	r3, r4
 8003c0e:	6025      	str	r5, [r4, #0]
 8003c10:	bf18      	it	ne
 8003c12:	6059      	strne	r1, [r3, #4]
 8003c14:	6863      	ldr	r3, [r4, #4]
 8003c16:	bf08      	it	eq
 8003c18:	f8c8 1000 	streq.w	r1, [r8]
 8003c1c:	5162      	str	r2, [r4, r5]
 8003c1e:	604b      	str	r3, [r1, #4]
 8003c20:	4630      	mov	r0, r6
 8003c22:	f000 f82f 	bl	8003c84 <__malloc_unlock>
 8003c26:	f104 000b 	add.w	r0, r4, #11
 8003c2a:	1d23      	adds	r3, r4, #4
 8003c2c:	f020 0007 	bic.w	r0, r0, #7
 8003c30:	1ac2      	subs	r2, r0, r3
 8003c32:	bf1c      	itt	ne
 8003c34:	1a1b      	subne	r3, r3, r0
 8003c36:	50a3      	strne	r3, [r4, r2]
 8003c38:	e7af      	b.n	8003b9a <_malloc_r+0x22>
 8003c3a:	6862      	ldr	r2, [r4, #4]
 8003c3c:	42a3      	cmp	r3, r4
 8003c3e:	bf0c      	ite	eq
 8003c40:	f8c8 2000 	streq.w	r2, [r8]
 8003c44:	605a      	strne	r2, [r3, #4]
 8003c46:	e7eb      	b.n	8003c20 <_malloc_r+0xa8>
 8003c48:	4623      	mov	r3, r4
 8003c4a:	6864      	ldr	r4, [r4, #4]
 8003c4c:	e7ae      	b.n	8003bac <_malloc_r+0x34>
 8003c4e:	463c      	mov	r4, r7
 8003c50:	687f      	ldr	r7, [r7, #4]
 8003c52:	e7b6      	b.n	8003bc2 <_malloc_r+0x4a>
 8003c54:	461a      	mov	r2, r3
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	42a3      	cmp	r3, r4
 8003c5a:	d1fb      	bne.n	8003c54 <_malloc_r+0xdc>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6053      	str	r3, [r2, #4]
 8003c60:	e7de      	b.n	8003c20 <_malloc_r+0xa8>
 8003c62:	230c      	movs	r3, #12
 8003c64:	6033      	str	r3, [r6, #0]
 8003c66:	4630      	mov	r0, r6
 8003c68:	f000 f80c 	bl	8003c84 <__malloc_unlock>
 8003c6c:	e794      	b.n	8003b98 <_malloc_r+0x20>
 8003c6e:	6005      	str	r5, [r0, #0]
 8003c70:	e7d6      	b.n	8003c20 <_malloc_r+0xa8>
 8003c72:	bf00      	nop
 8003c74:	20000324 	.word	0x20000324

08003c78 <__malloc_lock>:
 8003c78:	4801      	ldr	r0, [pc, #4]	@ (8003c80 <__malloc_lock+0x8>)
 8003c7a:	f7ff bf0f 	b.w	8003a9c <__retarget_lock_acquire_recursive>
 8003c7e:	bf00      	nop
 8003c80:	2000031c 	.word	0x2000031c

08003c84 <__malloc_unlock>:
 8003c84:	4801      	ldr	r0, [pc, #4]	@ (8003c8c <__malloc_unlock+0x8>)
 8003c86:	f7ff bf0a 	b.w	8003a9e <__retarget_lock_release_recursive>
 8003c8a:	bf00      	nop
 8003c8c:	2000031c 	.word	0x2000031c

08003c90 <__ssputs_r>:
 8003c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c94:	688e      	ldr	r6, [r1, #8]
 8003c96:	461f      	mov	r7, r3
 8003c98:	42be      	cmp	r6, r7
 8003c9a:	680b      	ldr	r3, [r1, #0]
 8003c9c:	4682      	mov	sl, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	4690      	mov	r8, r2
 8003ca2:	d82d      	bhi.n	8003d00 <__ssputs_r+0x70>
 8003ca4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ca8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003cac:	d026      	beq.n	8003cfc <__ssputs_r+0x6c>
 8003cae:	6965      	ldr	r5, [r4, #20]
 8003cb0:	6909      	ldr	r1, [r1, #16]
 8003cb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cb6:	eba3 0901 	sub.w	r9, r3, r1
 8003cba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003cbe:	1c7b      	adds	r3, r7, #1
 8003cc0:	444b      	add	r3, r9
 8003cc2:	106d      	asrs	r5, r5, #1
 8003cc4:	429d      	cmp	r5, r3
 8003cc6:	bf38      	it	cc
 8003cc8:	461d      	movcc	r5, r3
 8003cca:	0553      	lsls	r3, r2, #21
 8003ccc:	d527      	bpl.n	8003d1e <__ssputs_r+0x8e>
 8003cce:	4629      	mov	r1, r5
 8003cd0:	f7ff ff52 	bl	8003b78 <_malloc_r>
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	b360      	cbz	r0, 8003d32 <__ssputs_r+0xa2>
 8003cd8:	6921      	ldr	r1, [r4, #16]
 8003cda:	464a      	mov	r2, r9
 8003cdc:	f000 fae8 	bl	80042b0 <memcpy>
 8003ce0:	89a3      	ldrh	r3, [r4, #12]
 8003ce2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cea:	81a3      	strh	r3, [r4, #12]
 8003cec:	6126      	str	r6, [r4, #16]
 8003cee:	6165      	str	r5, [r4, #20]
 8003cf0:	444e      	add	r6, r9
 8003cf2:	eba5 0509 	sub.w	r5, r5, r9
 8003cf6:	6026      	str	r6, [r4, #0]
 8003cf8:	60a5      	str	r5, [r4, #8]
 8003cfa:	463e      	mov	r6, r7
 8003cfc:	42be      	cmp	r6, r7
 8003cfe:	d900      	bls.n	8003d02 <__ssputs_r+0x72>
 8003d00:	463e      	mov	r6, r7
 8003d02:	6820      	ldr	r0, [r4, #0]
 8003d04:	4632      	mov	r2, r6
 8003d06:	4641      	mov	r1, r8
 8003d08:	f000 faa8 	bl	800425c <memmove>
 8003d0c:	68a3      	ldr	r3, [r4, #8]
 8003d0e:	1b9b      	subs	r3, r3, r6
 8003d10:	60a3      	str	r3, [r4, #8]
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	4433      	add	r3, r6
 8003d16:	6023      	str	r3, [r4, #0]
 8003d18:	2000      	movs	r0, #0
 8003d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d1e:	462a      	mov	r2, r5
 8003d20:	f000 fad4 	bl	80042cc <_realloc_r>
 8003d24:	4606      	mov	r6, r0
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d1e0      	bne.n	8003cec <__ssputs_r+0x5c>
 8003d2a:	6921      	ldr	r1, [r4, #16]
 8003d2c:	4650      	mov	r0, sl
 8003d2e:	f7ff feb7 	bl	8003aa0 <_free_r>
 8003d32:	230c      	movs	r3, #12
 8003d34:	f8ca 3000 	str.w	r3, [sl]
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d3e:	81a3      	strh	r3, [r4, #12]
 8003d40:	f04f 30ff 	mov.w	r0, #4294967295
 8003d44:	e7e9      	b.n	8003d1a <__ssputs_r+0x8a>
	...

08003d48 <_svfiprintf_r>:
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	4698      	mov	r8, r3
 8003d4e:	898b      	ldrh	r3, [r1, #12]
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	b09d      	sub	sp, #116	@ 0x74
 8003d54:	4607      	mov	r7, r0
 8003d56:	460d      	mov	r5, r1
 8003d58:	4614      	mov	r4, r2
 8003d5a:	d510      	bpl.n	8003d7e <_svfiprintf_r+0x36>
 8003d5c:	690b      	ldr	r3, [r1, #16]
 8003d5e:	b973      	cbnz	r3, 8003d7e <_svfiprintf_r+0x36>
 8003d60:	2140      	movs	r1, #64	@ 0x40
 8003d62:	f7ff ff09 	bl	8003b78 <_malloc_r>
 8003d66:	6028      	str	r0, [r5, #0]
 8003d68:	6128      	str	r0, [r5, #16]
 8003d6a:	b930      	cbnz	r0, 8003d7a <_svfiprintf_r+0x32>
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	f04f 30ff 	mov.w	r0, #4294967295
 8003d74:	b01d      	add	sp, #116	@ 0x74
 8003d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d7a:	2340      	movs	r3, #64	@ 0x40
 8003d7c:	616b      	str	r3, [r5, #20]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d82:	2320      	movs	r3, #32
 8003d84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d88:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d8c:	2330      	movs	r3, #48	@ 0x30
 8003d8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003f2c <_svfiprintf_r+0x1e4>
 8003d92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d96:	f04f 0901 	mov.w	r9, #1
 8003d9a:	4623      	mov	r3, r4
 8003d9c:	469a      	mov	sl, r3
 8003d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003da2:	b10a      	cbz	r2, 8003da8 <_svfiprintf_r+0x60>
 8003da4:	2a25      	cmp	r2, #37	@ 0x25
 8003da6:	d1f9      	bne.n	8003d9c <_svfiprintf_r+0x54>
 8003da8:	ebba 0b04 	subs.w	fp, sl, r4
 8003dac:	d00b      	beq.n	8003dc6 <_svfiprintf_r+0x7e>
 8003dae:	465b      	mov	r3, fp
 8003db0:	4622      	mov	r2, r4
 8003db2:	4629      	mov	r1, r5
 8003db4:	4638      	mov	r0, r7
 8003db6:	f7ff ff6b 	bl	8003c90 <__ssputs_r>
 8003dba:	3001      	adds	r0, #1
 8003dbc:	f000 80a7 	beq.w	8003f0e <_svfiprintf_r+0x1c6>
 8003dc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dc2:	445a      	add	r2, fp
 8003dc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 809f 	beq.w	8003f0e <_svfiprintf_r+0x1c6>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dda:	f10a 0a01 	add.w	sl, sl, #1
 8003dde:	9304      	str	r3, [sp, #16]
 8003de0:	9307      	str	r3, [sp, #28]
 8003de2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003de6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003de8:	4654      	mov	r4, sl
 8003dea:	2205      	movs	r2, #5
 8003dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df0:	484e      	ldr	r0, [pc, #312]	@ (8003f2c <_svfiprintf_r+0x1e4>)
 8003df2:	f7fc f9fd 	bl	80001f0 <memchr>
 8003df6:	9a04      	ldr	r2, [sp, #16]
 8003df8:	b9d8      	cbnz	r0, 8003e32 <_svfiprintf_r+0xea>
 8003dfa:	06d0      	lsls	r0, r2, #27
 8003dfc:	bf44      	itt	mi
 8003dfe:	2320      	movmi	r3, #32
 8003e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e04:	0711      	lsls	r1, r2, #28
 8003e06:	bf44      	itt	mi
 8003e08:	232b      	movmi	r3, #43	@ 0x2b
 8003e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8003e12:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e14:	d015      	beq.n	8003e42 <_svfiprintf_r+0xfa>
 8003e16:	9a07      	ldr	r2, [sp, #28]
 8003e18:	4654      	mov	r4, sl
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f04f 0c0a 	mov.w	ip, #10
 8003e20:	4621      	mov	r1, r4
 8003e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e26:	3b30      	subs	r3, #48	@ 0x30
 8003e28:	2b09      	cmp	r3, #9
 8003e2a:	d94b      	bls.n	8003ec4 <_svfiprintf_r+0x17c>
 8003e2c:	b1b0      	cbz	r0, 8003e5c <_svfiprintf_r+0x114>
 8003e2e:	9207      	str	r2, [sp, #28]
 8003e30:	e014      	b.n	8003e5c <_svfiprintf_r+0x114>
 8003e32:	eba0 0308 	sub.w	r3, r0, r8
 8003e36:	fa09 f303 	lsl.w	r3, r9, r3
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	9304      	str	r3, [sp, #16]
 8003e3e:	46a2      	mov	sl, r4
 8003e40:	e7d2      	b.n	8003de8 <_svfiprintf_r+0xa0>
 8003e42:	9b03      	ldr	r3, [sp, #12]
 8003e44:	1d19      	adds	r1, r3, #4
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	9103      	str	r1, [sp, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	bfbb      	ittet	lt
 8003e4e:	425b      	neglt	r3, r3
 8003e50:	f042 0202 	orrlt.w	r2, r2, #2
 8003e54:	9307      	strge	r3, [sp, #28]
 8003e56:	9307      	strlt	r3, [sp, #28]
 8003e58:	bfb8      	it	lt
 8003e5a:	9204      	strlt	r2, [sp, #16]
 8003e5c:	7823      	ldrb	r3, [r4, #0]
 8003e5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e60:	d10a      	bne.n	8003e78 <_svfiprintf_r+0x130>
 8003e62:	7863      	ldrb	r3, [r4, #1]
 8003e64:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e66:	d132      	bne.n	8003ece <_svfiprintf_r+0x186>
 8003e68:	9b03      	ldr	r3, [sp, #12]
 8003e6a:	1d1a      	adds	r2, r3, #4
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	9203      	str	r2, [sp, #12]
 8003e70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e74:	3402      	adds	r4, #2
 8003e76:	9305      	str	r3, [sp, #20]
 8003e78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003f3c <_svfiprintf_r+0x1f4>
 8003e7c:	7821      	ldrb	r1, [r4, #0]
 8003e7e:	2203      	movs	r2, #3
 8003e80:	4650      	mov	r0, sl
 8003e82:	f7fc f9b5 	bl	80001f0 <memchr>
 8003e86:	b138      	cbz	r0, 8003e98 <_svfiprintf_r+0x150>
 8003e88:	9b04      	ldr	r3, [sp, #16]
 8003e8a:	eba0 000a 	sub.w	r0, r0, sl
 8003e8e:	2240      	movs	r2, #64	@ 0x40
 8003e90:	4082      	lsls	r2, r0
 8003e92:	4313      	orrs	r3, r2
 8003e94:	3401      	adds	r4, #1
 8003e96:	9304      	str	r3, [sp, #16]
 8003e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e9c:	4824      	ldr	r0, [pc, #144]	@ (8003f30 <_svfiprintf_r+0x1e8>)
 8003e9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003ea2:	2206      	movs	r2, #6
 8003ea4:	f7fc f9a4 	bl	80001f0 <memchr>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d036      	beq.n	8003f1a <_svfiprintf_r+0x1d2>
 8003eac:	4b21      	ldr	r3, [pc, #132]	@ (8003f34 <_svfiprintf_r+0x1ec>)
 8003eae:	bb1b      	cbnz	r3, 8003ef8 <_svfiprintf_r+0x1b0>
 8003eb0:	9b03      	ldr	r3, [sp, #12]
 8003eb2:	3307      	adds	r3, #7
 8003eb4:	f023 0307 	bic.w	r3, r3, #7
 8003eb8:	3308      	adds	r3, #8
 8003eba:	9303      	str	r3, [sp, #12]
 8003ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ebe:	4433      	add	r3, r6
 8003ec0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ec2:	e76a      	b.n	8003d9a <_svfiprintf_r+0x52>
 8003ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ec8:	460c      	mov	r4, r1
 8003eca:	2001      	movs	r0, #1
 8003ecc:	e7a8      	b.n	8003e20 <_svfiprintf_r+0xd8>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	3401      	adds	r4, #1
 8003ed2:	9305      	str	r3, [sp, #20]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f04f 0c0a 	mov.w	ip, #10
 8003eda:	4620      	mov	r0, r4
 8003edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ee0:	3a30      	subs	r2, #48	@ 0x30
 8003ee2:	2a09      	cmp	r2, #9
 8003ee4:	d903      	bls.n	8003eee <_svfiprintf_r+0x1a6>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0c6      	beq.n	8003e78 <_svfiprintf_r+0x130>
 8003eea:	9105      	str	r1, [sp, #20]
 8003eec:	e7c4      	b.n	8003e78 <_svfiprintf_r+0x130>
 8003eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e7f0      	b.n	8003eda <_svfiprintf_r+0x192>
 8003ef8:	ab03      	add	r3, sp, #12
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	462a      	mov	r2, r5
 8003efe:	4b0e      	ldr	r3, [pc, #56]	@ (8003f38 <_svfiprintf_r+0x1f0>)
 8003f00:	a904      	add	r1, sp, #16
 8003f02:	4638      	mov	r0, r7
 8003f04:	f3af 8000 	nop.w
 8003f08:	1c42      	adds	r2, r0, #1
 8003f0a:	4606      	mov	r6, r0
 8003f0c:	d1d6      	bne.n	8003ebc <_svfiprintf_r+0x174>
 8003f0e:	89ab      	ldrh	r3, [r5, #12]
 8003f10:	065b      	lsls	r3, r3, #25
 8003f12:	f53f af2d 	bmi.w	8003d70 <_svfiprintf_r+0x28>
 8003f16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f18:	e72c      	b.n	8003d74 <_svfiprintf_r+0x2c>
 8003f1a:	ab03      	add	r3, sp, #12
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	462a      	mov	r2, r5
 8003f20:	4b05      	ldr	r3, [pc, #20]	@ (8003f38 <_svfiprintf_r+0x1f0>)
 8003f22:	a904      	add	r1, sp, #16
 8003f24:	4638      	mov	r0, r7
 8003f26:	f000 f879 	bl	800401c <_printf_i>
 8003f2a:	e7ed      	b.n	8003f08 <_svfiprintf_r+0x1c0>
 8003f2c:	08004378 	.word	0x08004378
 8003f30:	08004382 	.word	0x08004382
 8003f34:	00000000 	.word	0x00000000
 8003f38:	08003c91 	.word	0x08003c91
 8003f3c:	0800437e 	.word	0x0800437e

08003f40 <_printf_common>:
 8003f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f44:	4616      	mov	r6, r2
 8003f46:	4698      	mov	r8, r3
 8003f48:	688a      	ldr	r2, [r1, #8]
 8003f4a:	690b      	ldr	r3, [r1, #16]
 8003f4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bfb8      	it	lt
 8003f54:	4613      	movlt	r3, r2
 8003f56:	6033      	str	r3, [r6, #0]
 8003f58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f5c:	4607      	mov	r7, r0
 8003f5e:	460c      	mov	r4, r1
 8003f60:	b10a      	cbz	r2, 8003f66 <_printf_common+0x26>
 8003f62:	3301      	adds	r3, #1
 8003f64:	6033      	str	r3, [r6, #0]
 8003f66:	6823      	ldr	r3, [r4, #0]
 8003f68:	0699      	lsls	r1, r3, #26
 8003f6a:	bf42      	ittt	mi
 8003f6c:	6833      	ldrmi	r3, [r6, #0]
 8003f6e:	3302      	addmi	r3, #2
 8003f70:	6033      	strmi	r3, [r6, #0]
 8003f72:	6825      	ldr	r5, [r4, #0]
 8003f74:	f015 0506 	ands.w	r5, r5, #6
 8003f78:	d106      	bne.n	8003f88 <_printf_common+0x48>
 8003f7a:	f104 0a19 	add.w	sl, r4, #25
 8003f7e:	68e3      	ldr	r3, [r4, #12]
 8003f80:	6832      	ldr	r2, [r6, #0]
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	42ab      	cmp	r3, r5
 8003f86:	dc26      	bgt.n	8003fd6 <_printf_common+0x96>
 8003f88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f8c:	6822      	ldr	r2, [r4, #0]
 8003f8e:	3b00      	subs	r3, #0
 8003f90:	bf18      	it	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	0692      	lsls	r2, r2, #26
 8003f96:	d42b      	bmi.n	8003ff0 <_printf_common+0xb0>
 8003f98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	47c8      	blx	r9
 8003fa2:	3001      	adds	r0, #1
 8003fa4:	d01e      	beq.n	8003fe4 <_printf_common+0xa4>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	6922      	ldr	r2, [r4, #16]
 8003faa:	f003 0306 	and.w	r3, r3, #6
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf02      	ittt	eq
 8003fb2:	68e5      	ldreq	r5, [r4, #12]
 8003fb4:	6833      	ldreq	r3, [r6, #0]
 8003fb6:	1aed      	subeq	r5, r5, r3
 8003fb8:	68a3      	ldr	r3, [r4, #8]
 8003fba:	bf0c      	ite	eq
 8003fbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fc0:	2500      	movne	r5, #0
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	bfc4      	itt	gt
 8003fc6:	1a9b      	subgt	r3, r3, r2
 8003fc8:	18ed      	addgt	r5, r5, r3
 8003fca:	2600      	movs	r6, #0
 8003fcc:	341a      	adds	r4, #26
 8003fce:	42b5      	cmp	r5, r6
 8003fd0:	d11a      	bne.n	8004008 <_printf_common+0xc8>
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	e008      	b.n	8003fe8 <_printf_common+0xa8>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	4652      	mov	r2, sl
 8003fda:	4641      	mov	r1, r8
 8003fdc:	4638      	mov	r0, r7
 8003fde:	47c8      	blx	r9
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	d103      	bne.n	8003fec <_printf_common+0xac>
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fec:	3501      	adds	r5, #1
 8003fee:	e7c6      	b.n	8003f7e <_printf_common+0x3e>
 8003ff0:	18e1      	adds	r1, r4, r3
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	2030      	movs	r0, #48	@ 0x30
 8003ff6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ffa:	4422      	add	r2, r4
 8003ffc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004000:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004004:	3302      	adds	r3, #2
 8004006:	e7c7      	b.n	8003f98 <_printf_common+0x58>
 8004008:	2301      	movs	r3, #1
 800400a:	4622      	mov	r2, r4
 800400c:	4641      	mov	r1, r8
 800400e:	4638      	mov	r0, r7
 8004010:	47c8      	blx	r9
 8004012:	3001      	adds	r0, #1
 8004014:	d0e6      	beq.n	8003fe4 <_printf_common+0xa4>
 8004016:	3601      	adds	r6, #1
 8004018:	e7d9      	b.n	8003fce <_printf_common+0x8e>
	...

0800401c <_printf_i>:
 800401c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004020:	7e0f      	ldrb	r7, [r1, #24]
 8004022:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004024:	2f78      	cmp	r7, #120	@ 0x78
 8004026:	4691      	mov	r9, r2
 8004028:	4680      	mov	r8, r0
 800402a:	460c      	mov	r4, r1
 800402c:	469a      	mov	sl, r3
 800402e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004032:	d807      	bhi.n	8004044 <_printf_i+0x28>
 8004034:	2f62      	cmp	r7, #98	@ 0x62
 8004036:	d80a      	bhi.n	800404e <_printf_i+0x32>
 8004038:	2f00      	cmp	r7, #0
 800403a:	f000 80d2 	beq.w	80041e2 <_printf_i+0x1c6>
 800403e:	2f58      	cmp	r7, #88	@ 0x58
 8004040:	f000 80b9 	beq.w	80041b6 <_printf_i+0x19a>
 8004044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004048:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800404c:	e03a      	b.n	80040c4 <_printf_i+0xa8>
 800404e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004052:	2b15      	cmp	r3, #21
 8004054:	d8f6      	bhi.n	8004044 <_printf_i+0x28>
 8004056:	a101      	add	r1, pc, #4	@ (adr r1, 800405c <_printf_i+0x40>)
 8004058:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800405c:	080040b5 	.word	0x080040b5
 8004060:	080040c9 	.word	0x080040c9
 8004064:	08004045 	.word	0x08004045
 8004068:	08004045 	.word	0x08004045
 800406c:	08004045 	.word	0x08004045
 8004070:	08004045 	.word	0x08004045
 8004074:	080040c9 	.word	0x080040c9
 8004078:	08004045 	.word	0x08004045
 800407c:	08004045 	.word	0x08004045
 8004080:	08004045 	.word	0x08004045
 8004084:	08004045 	.word	0x08004045
 8004088:	080041c9 	.word	0x080041c9
 800408c:	080040f3 	.word	0x080040f3
 8004090:	08004183 	.word	0x08004183
 8004094:	08004045 	.word	0x08004045
 8004098:	08004045 	.word	0x08004045
 800409c:	080041eb 	.word	0x080041eb
 80040a0:	08004045 	.word	0x08004045
 80040a4:	080040f3 	.word	0x080040f3
 80040a8:	08004045 	.word	0x08004045
 80040ac:	08004045 	.word	0x08004045
 80040b0:	0800418b 	.word	0x0800418b
 80040b4:	6833      	ldr	r3, [r6, #0]
 80040b6:	1d1a      	adds	r2, r3, #4
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6032      	str	r2, [r6, #0]
 80040bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040c4:	2301      	movs	r3, #1
 80040c6:	e09d      	b.n	8004204 <_printf_i+0x1e8>
 80040c8:	6833      	ldr	r3, [r6, #0]
 80040ca:	6820      	ldr	r0, [r4, #0]
 80040cc:	1d19      	adds	r1, r3, #4
 80040ce:	6031      	str	r1, [r6, #0]
 80040d0:	0606      	lsls	r6, r0, #24
 80040d2:	d501      	bpl.n	80040d8 <_printf_i+0xbc>
 80040d4:	681d      	ldr	r5, [r3, #0]
 80040d6:	e003      	b.n	80040e0 <_printf_i+0xc4>
 80040d8:	0645      	lsls	r5, r0, #25
 80040da:	d5fb      	bpl.n	80040d4 <_printf_i+0xb8>
 80040dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040e0:	2d00      	cmp	r5, #0
 80040e2:	da03      	bge.n	80040ec <_printf_i+0xd0>
 80040e4:	232d      	movs	r3, #45	@ 0x2d
 80040e6:	426d      	negs	r5, r5
 80040e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040ec:	4859      	ldr	r0, [pc, #356]	@ (8004254 <_printf_i+0x238>)
 80040ee:	230a      	movs	r3, #10
 80040f0:	e011      	b.n	8004116 <_printf_i+0xfa>
 80040f2:	6821      	ldr	r1, [r4, #0]
 80040f4:	6833      	ldr	r3, [r6, #0]
 80040f6:	0608      	lsls	r0, r1, #24
 80040f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80040fc:	d402      	bmi.n	8004104 <_printf_i+0xe8>
 80040fe:	0649      	lsls	r1, r1, #25
 8004100:	bf48      	it	mi
 8004102:	b2ad      	uxthmi	r5, r5
 8004104:	2f6f      	cmp	r7, #111	@ 0x6f
 8004106:	4853      	ldr	r0, [pc, #332]	@ (8004254 <_printf_i+0x238>)
 8004108:	6033      	str	r3, [r6, #0]
 800410a:	bf14      	ite	ne
 800410c:	230a      	movne	r3, #10
 800410e:	2308      	moveq	r3, #8
 8004110:	2100      	movs	r1, #0
 8004112:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004116:	6866      	ldr	r6, [r4, #4]
 8004118:	60a6      	str	r6, [r4, #8]
 800411a:	2e00      	cmp	r6, #0
 800411c:	bfa2      	ittt	ge
 800411e:	6821      	ldrge	r1, [r4, #0]
 8004120:	f021 0104 	bicge.w	r1, r1, #4
 8004124:	6021      	strge	r1, [r4, #0]
 8004126:	b90d      	cbnz	r5, 800412c <_printf_i+0x110>
 8004128:	2e00      	cmp	r6, #0
 800412a:	d04b      	beq.n	80041c4 <_printf_i+0x1a8>
 800412c:	4616      	mov	r6, r2
 800412e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004132:	fb03 5711 	mls	r7, r3, r1, r5
 8004136:	5dc7      	ldrb	r7, [r0, r7]
 8004138:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800413c:	462f      	mov	r7, r5
 800413e:	42bb      	cmp	r3, r7
 8004140:	460d      	mov	r5, r1
 8004142:	d9f4      	bls.n	800412e <_printf_i+0x112>
 8004144:	2b08      	cmp	r3, #8
 8004146:	d10b      	bne.n	8004160 <_printf_i+0x144>
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	07df      	lsls	r7, r3, #31
 800414c:	d508      	bpl.n	8004160 <_printf_i+0x144>
 800414e:	6923      	ldr	r3, [r4, #16]
 8004150:	6861      	ldr	r1, [r4, #4]
 8004152:	4299      	cmp	r1, r3
 8004154:	bfde      	ittt	le
 8004156:	2330      	movle	r3, #48	@ 0x30
 8004158:	f806 3c01 	strble.w	r3, [r6, #-1]
 800415c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004160:	1b92      	subs	r2, r2, r6
 8004162:	6122      	str	r2, [r4, #16]
 8004164:	f8cd a000 	str.w	sl, [sp]
 8004168:	464b      	mov	r3, r9
 800416a:	aa03      	add	r2, sp, #12
 800416c:	4621      	mov	r1, r4
 800416e:	4640      	mov	r0, r8
 8004170:	f7ff fee6 	bl	8003f40 <_printf_common>
 8004174:	3001      	adds	r0, #1
 8004176:	d14a      	bne.n	800420e <_printf_i+0x1f2>
 8004178:	f04f 30ff 	mov.w	r0, #4294967295
 800417c:	b004      	add	sp, #16
 800417e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	f043 0320 	orr.w	r3, r3, #32
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	4833      	ldr	r0, [pc, #204]	@ (8004258 <_printf_i+0x23c>)
 800418c:	2778      	movs	r7, #120	@ 0x78
 800418e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	6831      	ldr	r1, [r6, #0]
 8004196:	061f      	lsls	r7, r3, #24
 8004198:	f851 5b04 	ldr.w	r5, [r1], #4
 800419c:	d402      	bmi.n	80041a4 <_printf_i+0x188>
 800419e:	065f      	lsls	r7, r3, #25
 80041a0:	bf48      	it	mi
 80041a2:	b2ad      	uxthmi	r5, r5
 80041a4:	6031      	str	r1, [r6, #0]
 80041a6:	07d9      	lsls	r1, r3, #31
 80041a8:	bf44      	itt	mi
 80041aa:	f043 0320 	orrmi.w	r3, r3, #32
 80041ae:	6023      	strmi	r3, [r4, #0]
 80041b0:	b11d      	cbz	r5, 80041ba <_printf_i+0x19e>
 80041b2:	2310      	movs	r3, #16
 80041b4:	e7ac      	b.n	8004110 <_printf_i+0xf4>
 80041b6:	4827      	ldr	r0, [pc, #156]	@ (8004254 <_printf_i+0x238>)
 80041b8:	e7e9      	b.n	800418e <_printf_i+0x172>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	f023 0320 	bic.w	r3, r3, #32
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	e7f6      	b.n	80041b2 <_printf_i+0x196>
 80041c4:	4616      	mov	r6, r2
 80041c6:	e7bd      	b.n	8004144 <_printf_i+0x128>
 80041c8:	6833      	ldr	r3, [r6, #0]
 80041ca:	6825      	ldr	r5, [r4, #0]
 80041cc:	6961      	ldr	r1, [r4, #20]
 80041ce:	1d18      	adds	r0, r3, #4
 80041d0:	6030      	str	r0, [r6, #0]
 80041d2:	062e      	lsls	r6, r5, #24
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	d501      	bpl.n	80041dc <_printf_i+0x1c0>
 80041d8:	6019      	str	r1, [r3, #0]
 80041da:	e002      	b.n	80041e2 <_printf_i+0x1c6>
 80041dc:	0668      	lsls	r0, r5, #25
 80041de:	d5fb      	bpl.n	80041d8 <_printf_i+0x1bc>
 80041e0:	8019      	strh	r1, [r3, #0]
 80041e2:	2300      	movs	r3, #0
 80041e4:	6123      	str	r3, [r4, #16]
 80041e6:	4616      	mov	r6, r2
 80041e8:	e7bc      	b.n	8004164 <_printf_i+0x148>
 80041ea:	6833      	ldr	r3, [r6, #0]
 80041ec:	1d1a      	adds	r2, r3, #4
 80041ee:	6032      	str	r2, [r6, #0]
 80041f0:	681e      	ldr	r6, [r3, #0]
 80041f2:	6862      	ldr	r2, [r4, #4]
 80041f4:	2100      	movs	r1, #0
 80041f6:	4630      	mov	r0, r6
 80041f8:	f7fb fffa 	bl	80001f0 <memchr>
 80041fc:	b108      	cbz	r0, 8004202 <_printf_i+0x1e6>
 80041fe:	1b80      	subs	r0, r0, r6
 8004200:	6060      	str	r0, [r4, #4]
 8004202:	6863      	ldr	r3, [r4, #4]
 8004204:	6123      	str	r3, [r4, #16]
 8004206:	2300      	movs	r3, #0
 8004208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800420c:	e7aa      	b.n	8004164 <_printf_i+0x148>
 800420e:	6923      	ldr	r3, [r4, #16]
 8004210:	4632      	mov	r2, r6
 8004212:	4649      	mov	r1, r9
 8004214:	4640      	mov	r0, r8
 8004216:	47d0      	blx	sl
 8004218:	3001      	adds	r0, #1
 800421a:	d0ad      	beq.n	8004178 <_printf_i+0x15c>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	079b      	lsls	r3, r3, #30
 8004220:	d413      	bmi.n	800424a <_printf_i+0x22e>
 8004222:	68e0      	ldr	r0, [r4, #12]
 8004224:	9b03      	ldr	r3, [sp, #12]
 8004226:	4298      	cmp	r0, r3
 8004228:	bfb8      	it	lt
 800422a:	4618      	movlt	r0, r3
 800422c:	e7a6      	b.n	800417c <_printf_i+0x160>
 800422e:	2301      	movs	r3, #1
 8004230:	4632      	mov	r2, r6
 8004232:	4649      	mov	r1, r9
 8004234:	4640      	mov	r0, r8
 8004236:	47d0      	blx	sl
 8004238:	3001      	adds	r0, #1
 800423a:	d09d      	beq.n	8004178 <_printf_i+0x15c>
 800423c:	3501      	adds	r5, #1
 800423e:	68e3      	ldr	r3, [r4, #12]
 8004240:	9903      	ldr	r1, [sp, #12]
 8004242:	1a5b      	subs	r3, r3, r1
 8004244:	42ab      	cmp	r3, r5
 8004246:	dcf2      	bgt.n	800422e <_printf_i+0x212>
 8004248:	e7eb      	b.n	8004222 <_printf_i+0x206>
 800424a:	2500      	movs	r5, #0
 800424c:	f104 0619 	add.w	r6, r4, #25
 8004250:	e7f5      	b.n	800423e <_printf_i+0x222>
 8004252:	bf00      	nop
 8004254:	08004389 	.word	0x08004389
 8004258:	0800439a 	.word	0x0800439a

0800425c <memmove>:
 800425c:	4288      	cmp	r0, r1
 800425e:	b510      	push	{r4, lr}
 8004260:	eb01 0402 	add.w	r4, r1, r2
 8004264:	d902      	bls.n	800426c <memmove+0x10>
 8004266:	4284      	cmp	r4, r0
 8004268:	4623      	mov	r3, r4
 800426a:	d807      	bhi.n	800427c <memmove+0x20>
 800426c:	1e43      	subs	r3, r0, #1
 800426e:	42a1      	cmp	r1, r4
 8004270:	d008      	beq.n	8004284 <memmove+0x28>
 8004272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800427a:	e7f8      	b.n	800426e <memmove+0x12>
 800427c:	4402      	add	r2, r0
 800427e:	4601      	mov	r1, r0
 8004280:	428a      	cmp	r2, r1
 8004282:	d100      	bne.n	8004286 <memmove+0x2a>
 8004284:	bd10      	pop	{r4, pc}
 8004286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800428a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800428e:	e7f7      	b.n	8004280 <memmove+0x24>

08004290 <_sbrk_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	4d06      	ldr	r5, [pc, #24]	@ (80042ac <_sbrk_r+0x1c>)
 8004294:	2300      	movs	r3, #0
 8004296:	4604      	mov	r4, r0
 8004298:	4608      	mov	r0, r1
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	f7fc fe24 	bl	8000ee8 <_sbrk>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d102      	bne.n	80042aa <_sbrk_r+0x1a>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	b103      	cbz	r3, 80042aa <_sbrk_r+0x1a>
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	20000318 	.word	0x20000318

080042b0 <memcpy>:
 80042b0:	440a      	add	r2, r1
 80042b2:	4291      	cmp	r1, r2
 80042b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80042b8:	d100      	bne.n	80042bc <memcpy+0xc>
 80042ba:	4770      	bx	lr
 80042bc:	b510      	push	{r4, lr}
 80042be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042c6:	4291      	cmp	r1, r2
 80042c8:	d1f9      	bne.n	80042be <memcpy+0xe>
 80042ca:	bd10      	pop	{r4, pc}

080042cc <_realloc_r>:
 80042cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d0:	4680      	mov	r8, r0
 80042d2:	4615      	mov	r5, r2
 80042d4:	460c      	mov	r4, r1
 80042d6:	b921      	cbnz	r1, 80042e2 <_realloc_r+0x16>
 80042d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042dc:	4611      	mov	r1, r2
 80042de:	f7ff bc4b 	b.w	8003b78 <_malloc_r>
 80042e2:	b92a      	cbnz	r2, 80042f0 <_realloc_r+0x24>
 80042e4:	f7ff fbdc 	bl	8003aa0 <_free_r>
 80042e8:	2400      	movs	r4, #0
 80042ea:	4620      	mov	r0, r4
 80042ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f0:	f000 f81a 	bl	8004328 <_malloc_usable_size_r>
 80042f4:	4285      	cmp	r5, r0
 80042f6:	4606      	mov	r6, r0
 80042f8:	d802      	bhi.n	8004300 <_realloc_r+0x34>
 80042fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042fe:	d8f4      	bhi.n	80042ea <_realloc_r+0x1e>
 8004300:	4629      	mov	r1, r5
 8004302:	4640      	mov	r0, r8
 8004304:	f7ff fc38 	bl	8003b78 <_malloc_r>
 8004308:	4607      	mov	r7, r0
 800430a:	2800      	cmp	r0, #0
 800430c:	d0ec      	beq.n	80042e8 <_realloc_r+0x1c>
 800430e:	42b5      	cmp	r5, r6
 8004310:	462a      	mov	r2, r5
 8004312:	4621      	mov	r1, r4
 8004314:	bf28      	it	cs
 8004316:	4632      	movcs	r2, r6
 8004318:	f7ff ffca 	bl	80042b0 <memcpy>
 800431c:	4621      	mov	r1, r4
 800431e:	4640      	mov	r0, r8
 8004320:	f7ff fbbe 	bl	8003aa0 <_free_r>
 8004324:	463c      	mov	r4, r7
 8004326:	e7e0      	b.n	80042ea <_realloc_r+0x1e>

08004328 <_malloc_usable_size_r>:
 8004328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800432c:	1f18      	subs	r0, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	bfbc      	itt	lt
 8004332:	580b      	ldrlt	r3, [r1, r0]
 8004334:	18c0      	addlt	r0, r0, r3
 8004336:	4770      	bx	lr

08004338 <_init>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr

08004344 <_fini>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr
