
Ball_Launcher_Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cbc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005e5c  08005e5c  00006e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb8  08005eb8  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005eb8  08005eb8  00006eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ec0  08005ec0  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ec0  08005ec0  00006ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ec4  08005ec4  00006ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005ec8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002cc  20000060  08005f28  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08005f28  0000732c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5b2  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002395  00000000  00000000  00015642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000179d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a52  00000000  00000000  00018720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001735c  00000000  00000000  00019172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109aa  00000000  00000000  000304ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e5e6  00000000  00000000  00040e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf45e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d2c  00000000  00000000  000cf4a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000d31d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e44 	.word	0x08005e44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005e44 	.word	0x08005e44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <D4215_init>:
  *
  * @param bldcx Pointer to the D4215X structure
  * @param timer Timer handle
  * @param channel Timer channel
  */
void D4215_init(D4215X* bldcx, TIM_HandleTypeDef* timer, uint32_t channel) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
    bldcx->timer = timer;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	601a      	str	r2, [r3, #0]
    bldcx->channel = channel;
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	605a      	str	r2, [r3, #4]
    bldcx->speed = 0;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
    HAL_TIM_PWM_Start(bldcx->timer, bldcx->channel); /**< Start PWM for the specified timer and channel */
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4619      	mov	r1, r3
 8000de4:	4610      	mov	r0, r2
 8000de6:	f002 fa71 	bl	80032cc <HAL_TIM_PWM_Start>
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	0000      	movs	r0, r0
 8000df4:	0000      	movs	r0, r0
	...

08000df8 <D4215_set>:
  * @brief Sets the speed of the D4215 motor.
  *
  * @param bldcx Pointer to the D4215X structure
  * @param spd Speed of the motor (range: 0 to 100)
  */
void D4215_set(D4215X* bldcx, int32_t spd) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
	float speed = 0.05 * spd + 5; /**< Calculate the duty cycle based on the input speed */
 8000e02:	6838      	ldr	r0, [r7, #0]
 8000e04:	f7ff fb96 	bl	8000534 <__aeabi_i2d>
 8000e08:	a337      	add	r3, pc, #220	@ (adr r3, 8000ee8 <D4215_set+0xf0>)
 8000e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0e:	f7ff fbfb 	bl	8000608 <__aeabi_dmul>
 8000e12:	4602      	mov	r2, r0
 8000e14:	460b      	mov	r3, r1
 8000e16:	4610      	mov	r0, r2
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f04f 0200 	mov.w	r2, #0
 8000e1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ee0 <D4215_set+0xe8>)
 8000e20:	f7ff fa3c 	bl	800029c <__adddf3>
 8000e24:	4602      	mov	r2, r0
 8000e26:	460b      	mov	r3, r1
 8000e28:	4610      	mov	r0, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f7ff fdfe 	bl	8000a2c <__aeabi_d2f>
 8000e30:	4603      	mov	r3, r0
 8000e32:	60fb      	str	r3, [r7, #12]
    bldcx->speed = speed;
 8000e34:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e3c:	ee17 2a90 	vmov	r2, s15
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	609a      	str	r2, [r3, #8]
    __HAL_TIM_SET_COMPARE(bldcx->timer, bldcx->channel, speed * 200); /**< Set the duty cycle for the PWM */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10e      	bne.n	8000e6a <D4215_set+0x72>
 8000e4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e50:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000ee4 <D4215_set+0xec>
 8000e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e62:	ee17 2a90 	vmov	r2, s15
 8000e66:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e68:	e033      	b.n	8000ed2 <D4215_set+0xda>
    __HAL_TIM_SET_COMPARE(bldcx->timer, bldcx->channel, speed * 200); /**< Set the duty cycle for the PWM */
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d10e      	bne.n	8000e90 <D4215_set+0x98>
 8000e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e76:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000ee4 <D4215_set+0xec>
 8000e7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e88:	ee17 3a90 	vmov	r3, s15
 8000e8c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000e8e:	e020      	b.n	8000ed2 <D4215_set+0xda>
    __HAL_TIM_SET_COMPARE(bldcx->timer, bldcx->channel, speed * 200); /**< Set the duty cycle for the PWM */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d10e      	bne.n	8000eb6 <D4215_set+0xbe>
 8000e98:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e9c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000ee4 <D4215_set+0xec>
 8000ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eae:	ee17 3a90 	vmov	r3, s15
 8000eb2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000eb4:	e00d      	b.n	8000ed2 <D4215_set+0xda>
    __HAL_TIM_SET_COMPARE(bldcx->timer, bldcx->channel, speed * 200); /**< Set the duty cycle for the PWM */
 8000eb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eba:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000ee4 <D4215_set+0xec>
 8000ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ecc:	ee17 3a90 	vmov	r3, s15
 8000ed0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	f3af 8000 	nop.w
 8000ee0:	40140000 	.word	0x40140000
 8000ee4:	43480000 	.word	0x43480000
 8000ee8:	9999999a 	.word	0x9999999a
 8000eec:	3fa99999 	.word	0x3fa99999

08000ef0 <LED_init>:
  *
  * @param LEDx Pointer to the LEDX structure
  * @param GPIO GPIO port
  * @param PIN GPIO pin
  */
void LED_init(LEDX* LEDx, GPIO_TypeDef* GPIO, uint16_t PIN) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	4613      	mov	r3, r2
 8000efc:	80fb      	strh	r3, [r7, #6]
	LEDx->GPIOx = GPIO;/**< Assign the GPIO port */
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	601a      	str	r2, [r3, #0]
	LEDx->PIN   = PIN;/**< Assign the GPIO pin */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	88fa      	ldrh	r2, [r7, #6]
 8000f08:	809a      	strh	r2, [r3, #4]
}
 8000f0a:	bf00      	nop
 8000f0c:	3714      	adds	r7, #20
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <LED_on>:
/**
  * @brief Turns on the LED.
  *
  * @param LEDx Pointer to the LEDX structure
  */
void LED_on(LEDX* LEDx) {
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDx->GPIOx, LEDx->PIN, GPIO_PIN_SET);/**< Set the pin high to turn on the LED */
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6818      	ldr	r0, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	889b      	ldrh	r3, [r3, #4]
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f001 fcb3 	bl	8002894 <HAL_GPIO_WritePin>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <LED_off>:
/**
  * @brief Turns off the LED.
  *
  * @param LEDx Pointer to the LEDX structure
  */
void LED_off(LEDX* LEDx) {
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LEDx->GPIOx, LEDx->PIN, GPIO_PIN_RESET); /**< Set the pin low to turn off the LED */
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6818      	ldr	r0, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	889b      	ldrh	r3, [r3, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f001 fca3 	bl	8002894 <HAL_GPIO_WritePin>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b0bb      	sub	sp, #236	@ 0xec
 8000f5c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f001 f8e7 	bl	8002130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 fabb 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 fc3b 	bl	80017e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f6a:	f000 fbe5 	bl	8001738 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000f6e:	f000 fc0d 	bl	800178c <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8000f72:	f000 fb1b 	bl	80015ac <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f76:	f000 fb7d 	bl	8001674 <MX_TIM4_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Print to UART6 for debug
      char buffer[100];
	  HAL_UART_Receive_IT(&huart1, (uint8_t *)&charIn, 1);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	4994      	ldr	r1, [pc, #592]	@ (80011d0 <main+0x278>)
 8000f7e:	4895      	ldr	r0, [pc, #596]	@ (80011d4 <main+0x27c>)
 8000f80:	f003 fb31 	bl	80045e6 <HAL_UART_Receive_IT>
      snprintf(buffer, sizeof(buffer), "%d\t%d\t%d\t%d\t\r\n", MOVE, SHOT, ESTOP, STATE);
 8000f84:	4b94      	ldr	r3, [pc, #592]	@ (80011d8 <main+0x280>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461c      	mov	r4, r3
 8000f8a:	4b94      	ldr	r3, [pc, #592]	@ (80011dc <main+0x284>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b93      	ldr	r3, [pc, #588]	@ (80011e0 <main+0x288>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	4b93      	ldr	r3, [pc, #588]	@ (80011e4 <main+0x28c>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	1d38      	adds	r0, r7, #4
 8000f9c:	9302      	str	r3, [sp, #8]
 8000f9e:	9101      	str	r1, [sp, #4]
 8000fa0:	9200      	str	r2, [sp, #0]
 8000fa2:	4623      	mov	r3, r4
 8000fa4:	4a90      	ldr	r2, [pc, #576]	@ (80011e8 <main+0x290>)
 8000fa6:	2164      	movs	r1, #100	@ 0x64
 8000fa8:	f004 fa98 	bl	80054dc <sniprintf>
      HAL_UART_Transmit(&huart6, (uint8_t *)buffer, strlen(buffer), 100);
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff f916 	bl	80001e0 <strlen>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	1d39      	adds	r1, r7, #4
 8000fba:	2364      	movs	r3, #100	@ 0x64
 8000fbc:	488b      	ldr	r0, [pc, #556]	@ (80011ec <main+0x294>)
 8000fbe:	f003 fa87 	bl	80044d0 <HAL_UART_Transmit>

      // Run Finite State Machine

      // STATE 0: INIT ALL OBJECTS
	  if (STATE == STATE_0_INIT) {
 8000fc2:	4b88      	ldr	r3, [pc, #544]	@ (80011e4 <main+0x28c>)
 8000fc4:	781a      	ldrb	r2, [r3, #0]
 8000fc6:	4b8a      	ldr	r3, [pc, #552]	@ (80011f0 <main+0x298>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d155      	bne.n	800107a <main+0x122>
		  // INIT RADIO TIMER
		  HAL_TIM_Base_Start(&htim4);
 8000fce:	4889      	ldr	r0, [pc, #548]	@ (80011f4 <main+0x29c>)
 8000fd0:	f002 f8d2 	bl	8003178 <HAL_TIM_Base_Start>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4887      	ldr	r0, [pc, #540]	@ (80011f4 <main+0x29c>)
 8000fd8:	f002 fa78 	bl	80034cc <HAL_TIM_IC_Start_IT>
		  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4885      	ldr	r0, [pc, #532]	@ (80011f4 <main+0x29c>)
 8000fe0:	f002 fa74 	bl	80034cc <HAL_TIM_IC_Start_IT>
		  // INIT STEPPER MOTOR
  		  Stepper_init(&STEPPER1, GPIOA, GPIO_PIN_3, GPIO_PIN_5, GPIO_PIN_7);
 8000fe4:	f107 00b4 	add.w	r0, r7, #180	@ 0xb4
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2320      	movs	r3, #32
 8000fee:	2208      	movs	r2, #8
 8000ff0:	4981      	ldr	r1, [pc, #516]	@ (80011f8 <main+0x2a0>)
 8000ff2:	f000 fdbc 	bl	8001b6e <Stepper_init>
  		  Stepper_init(&STEPPER2, GPIOA, GPIO_PIN_4, GPIO_PIN_6, GPIO_PIN_8);
 8000ff6:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8000ffa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2340      	movs	r3, #64	@ 0x40
 8001002:	2210      	movs	r2, #16
 8001004:	497c      	ldr	r1, [pc, #496]	@ (80011f8 <main+0x2a0>)
 8001006:	f000 fdb2 	bl	8001b6e <Stepper_init>
  		  // INIT D4215 BLDC MOTORS
  		  D4215_init  (&ESC1,&htim2,TIM_CHANNEL_2);
 800100a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800100e:	2204      	movs	r2, #4
 8001010:	497a      	ldr	r1, [pc, #488]	@ (80011fc <main+0x2a4>)
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fed2 	bl	8000dbc <D4215_init>
  		  D4215_init  (&ESC2,&htim2,TIM_CHANNEL_3);
 8001018:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800101c:	2208      	movs	r2, #8
 800101e:	4977      	ldr	r1, [pc, #476]	@ (80011fc <main+0x2a4>)
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fecb 	bl	8000dbc <D4215_init>
  		  // INIT 3 LIMIT SWITCHES
  		  Switch_init (&S1, GPIOB, GPIO_PIN_0);
 8001026:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800102a:	2201      	movs	r2, #1
 800102c:	4974      	ldr	r1, [pc, #464]	@ (8001200 <main+0x2a8>)
 800102e:	4618      	mov	r0, r3
 8001030:	f000 ffde 	bl	8001ff0 <Switch_init>
  		  Switch_init (&S2, GPIOB, GPIO_PIN_1);
 8001034:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001038:	2202      	movs	r2, #2
 800103a:	4971      	ldr	r1, [pc, #452]	@ (8001200 <main+0x2a8>)
 800103c:	4618      	mov	r0, r3
 800103e:	f000 ffd7 	bl	8001ff0 <Switch_init>
  		  Switch_init (&S3, GPIOB, GPIO_PIN_2);
 8001042:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001046:	2204      	movs	r2, #4
 8001048:	496d      	ldr	r1, [pc, #436]	@ (8001200 <main+0x2a8>)
 800104a:	4618      	mov	r0, r3
 800104c:	f000 ffd0 	bl	8001ff0 <Switch_init>
  		  // INIT 2 EXTRA LEDS
  		  LED_init    (&LED1, GPIOB, GPIO_PIN_14);
 8001050:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8001054:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001058:	4969      	ldr	r1, [pc, #420]	@ (8001200 <main+0x2a8>)
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff48 	bl	8000ef0 <LED_init>
  		  LED_init    (&LED2, GPIOB, GPIO_PIN_15);
 8001060:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001064:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001068:	4965      	ldr	r1, [pc, #404]	@ (8001200 <main+0x2a8>)
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff40 	bl	8000ef0 <LED_init>
  		  // MOVE --> STATE 1: DECISION HUB
  		  STATE = STATE_1_HUB;
 8001070:	4b64      	ldr	r3, [pc, #400]	@ (8001204 <main+0x2ac>)
 8001072:	781a      	ldrb	r2, [r3, #0]
 8001074:	4b5b      	ldr	r3, [pc, #364]	@ (80011e4 <main+0x28c>)
 8001076:	701a      	strb	r2, [r3, #0]
 8001078:	e77f      	b.n	8000f7a <main+0x22>
	  }

	  // STATE 1: DECISION HUB TO BRANCH TO DIFFERENT HUB
	  else if (STATE == STATE_1_HUB) {
 800107a:	4b5a      	ldr	r3, [pc, #360]	@ (80011e4 <main+0x28c>)
 800107c:	781a      	ldrb	r2, [r3, #0]
 800107e:	4b61      	ldr	r3, [pc, #388]	@ (8001204 <main+0x2ac>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	f040 80d6 	bne.w	8001234 <main+0x2dc>
		  LED_off(&LED1);
 8001088:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff52 	bl	8000f36 <LED_off>
		  LED_off(&LED2);
 8001092:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff4d 	bl	8000f36 <LED_off>
		  // ENABLE 2 STEPPERS
  		  Stepper_enable(&STEPPER1);
 800109c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fd81 	bl	8001ba8 <Stepper_enable>
  		  Stepper_enable(&STEPPER2);
 80010a6:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fd7c 	bl	8001ba8 <Stepper_enable>
  		  // READ 3 LIMIT SWITCHES
		  SW1   = Switch_getStatus(&S1);
 80010b0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 ffb1 	bl	800201c <Switch_getStatus>
 80010ba:	4603      	mov	r3, r0
 80010bc:	461a      	mov	r2, r3
 80010be:	4b52      	ldr	r3, [pc, #328]	@ (8001208 <main+0x2b0>)
 80010c0:	701a      	strb	r2, [r3, #0]
		  SW2   = Switch_getStatus(&S2);
 80010c2:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 ffa8 	bl	800201c <Switch_getStatus>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	4b4e      	ldr	r3, [pc, #312]	@ (800120c <main+0x2b4>)
 80010d2:	701a      	strb	r2, [r3, #0]
		  SW3   = Switch_getStatus(&S3);
 80010d4:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 ff9f 	bl	800201c <Switch_getStatus>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001210 <main+0x2b8>)
 80010e4:	701a      	strb	r2, [r3, #0]
		  // CHECK ESTOP
		  if (ESTOP == 1) {
 80010e6:	4b3e      	ldr	r3, [pc, #248]	@ (80011e0 <main+0x288>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d109      	bne.n	8001102 <main+0x1aa>
			  ti = HAL_GetTick();
 80010ee:	f001 f885 	bl	80021fc <HAL_GetTick>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a47      	ldr	r2, [pc, #284]	@ (8001214 <main+0x2bc>)
 80010f6:	6013      	str	r3, [r2, #0]
			  STATE = STATE_2_ESTOP;
 80010f8:	4b47      	ldr	r3, [pc, #284]	@ (8001218 <main+0x2c0>)
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	4b39      	ldr	r3, [pc, #228]	@ (80011e4 <main+0x28c>)
 80010fe:	701a      	strb	r2, [r3, #0]
 8001100:	e73b      	b.n	8000f7a <main+0x22>
		  }
		  // CHECK LIMIT SWITCHES OR "MOVE" FLAG FROM CONTROLLER
		  else if ((MOVE == 1 && SHOT == 0) || SW1 == 0 || SW2 == 0 || SW3 == 0) {
 8001102:	4b35      	ldr	r3, [pc, #212]	@ (80011d8 <main+0x280>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d103      	bne.n	8001112 <main+0x1ba>
 800110a:	4b34      	ldr	r3, [pc, #208]	@ (80011dc <main+0x284>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <main+0x1d2>
 8001112:	4b3d      	ldr	r3, [pc, #244]	@ (8001208 <main+0x2b0>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d007      	beq.n	800112a <main+0x1d2>
 800111a:	4b3c      	ldr	r3, [pc, #240]	@ (800120c <main+0x2b4>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <main+0x1d2>
 8001122:	4b3b      	ldr	r3, [pc, #236]	@ (8001210 <main+0x2b8>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d134      	bne.n	8001194 <main+0x23c>
			  if (SW1 == 0) {
 800112a:	4b37      	ldr	r3, [pc, #220]	@ (8001208 <main+0x2b0>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <main+0x1ee>
			      SW = 1;
 8001132:	4b3a      	ldr	r3, [pc, #232]	@ (800121c <main+0x2c4>)
 8001134:	2201      	movs	r2, #1
 8001136:	701a      	strb	r2, [r3, #0]
			      angleTarget = 10;
 8001138:	4b39      	ldr	r3, [pc, #228]	@ (8001220 <main+0x2c8>)
 800113a:	220a      	movs	r2, #10
 800113c:	801a      	strh	r2, [r3, #0]
			      yawDirectionSW = 0;
 800113e:	4b39      	ldr	r3, [pc, #228]	@ (8001224 <main+0x2cc>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e021      	b.n	800118a <main+0x232>
			  } else if (SW2 == 0) {
 8001146:	4b31      	ldr	r3, [pc, #196]	@ (800120c <main+0x2b4>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d109      	bne.n	8001162 <main+0x20a>
			      SW = 2;
 800114e:	4b33      	ldr	r3, [pc, #204]	@ (800121c <main+0x2c4>)
 8001150:	2202      	movs	r2, #2
 8001152:	701a      	strb	r2, [r3, #0]
			      angleTarget = 10;
 8001154:	4b32      	ldr	r3, [pc, #200]	@ (8001220 <main+0x2c8>)
 8001156:	220a      	movs	r2, #10
 8001158:	801a      	strh	r2, [r3, #0]
			      yawDirectionSW = 1;
 800115a:	4b32      	ldr	r3, [pc, #200]	@ (8001224 <main+0x2cc>)
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	e013      	b.n	800118a <main+0x232>
			  } else if (SW3 == 0) {
 8001162:	4b2b      	ldr	r3, [pc, #172]	@ (8001210 <main+0x2b8>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d109      	bne.n	800117e <main+0x226>
				  SW = 3;
 800116a:	4b2c      	ldr	r3, [pc, #176]	@ (800121c <main+0x2c4>)
 800116c:	2203      	movs	r2, #3
 800116e:	701a      	strb	r2, [r3, #0]
			      angleTarget = 10;
 8001170:	4b2b      	ldr	r3, [pc, #172]	@ (8001220 <main+0x2c8>)
 8001172:	220a      	movs	r2, #10
 8001174:	801a      	strh	r2, [r3, #0]
			      pitchDirectionSW = 0;
 8001176:	4b2c      	ldr	r3, [pc, #176]	@ (8001228 <main+0x2d0>)
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	e005      	b.n	800118a <main+0x232>
			  } else {
				  angleTarget = 10;
 800117e:	4b28      	ldr	r3, [pc, #160]	@ (8001220 <main+0x2c8>)
 8001180:	220a      	movs	r2, #10
 8001182:	801a      	strh	r2, [r3, #0]
				  SW = 0;
 8001184:	4b25      	ldr	r3, [pc, #148]	@ (800121c <main+0x2c4>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
			  }
			  STATE = STATE_3_STEPPER;
 800118a:	4b28      	ldr	r3, [pc, #160]	@ (800122c <main+0x2d4>)
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <main+0x28c>)
 8001190:	701a      	strb	r2, [r3, #0]
 8001192:	e17e      	b.n	8001492 <main+0x53a>
		  }
		  // CHECK "SHOT" FLAG FROM CONTROLLER
		  else if (MOVE == 0 && SHOT == 1) {
 8001194:	4b10      	ldr	r3, [pc, #64]	@ (80011d8 <main+0x280>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d108      	bne.n	80011ae <main+0x256>
 800119c:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <main+0x284>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d104      	bne.n	80011ae <main+0x256>
			  STATE = STATE_4_BLDC;
 80011a4:	4b22      	ldr	r3, [pc, #136]	@ (8001230 <main+0x2d8>)
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <main+0x28c>)
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e171      	b.n	8001492 <main+0x53a>
		  }
		  // STOP IF
		  else {
			  D4215_set(&ESC1, 0);
 80011ae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff fe1f 	bl	8000df8 <D4215_set>
			  D4215_set(&ESC2, 0);
 80011ba:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fe19 	bl	8000df8 <D4215_set>
			  STATE = STATE_1_HUB;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <main+0x2ac>)
 80011c8:	781a      	ldrb	r2, [r3, #0]
 80011ca:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <main+0x28c>)
 80011cc:	701a      	strb	r2, [r3, #0]
 80011ce:	e6d4      	b.n	8000f7a <main+0x22>
 80011d0:	2000019c 	.word	0x2000019c
 80011d4:	2000010c 	.word	0x2000010c
 80011d8:	200001d1 	.word	0x200001d1
 80011dc:	200001d2 	.word	0x200001d2
 80011e0:	200001d3 	.word	0x200001d3
 80011e4:	200001d8 	.word	0x200001d8
 80011e8:	08005e5c 	.word	0x08005e5c
 80011ec:	20000154 	.word	0x20000154
 80011f0:	200001d9 	.word	0x200001d9
 80011f4:	200000c4 	.word	0x200000c4
 80011f8:	40020000 	.word	0x40020000
 80011fc:	2000007c 	.word	0x2000007c
 8001200:	40020400 	.word	0x40020400
 8001204:	20000000 	.word	0x20000000
 8001208:	200001d4 	.word	0x200001d4
 800120c:	200001d5 	.word	0x200001d5
 8001210:	200001d6 	.word	0x200001d6
 8001214:	200001b4 	.word	0x200001b4
 8001218:	20000001 	.word	0x20000001
 800121c:	200001d7 	.word	0x200001d7
 8001220:	200001c4 	.word	0x200001c4
 8001224:	200001ce 	.word	0x200001ce
 8001228:	200001cf 	.word	0x200001cf
 800122c:	20000002 	.word	0x20000002
 8001230:	20000003 	.word	0x20000003
		  }
	  }
	  // STATE 2: EMERGENCY STOP STATE
	  else if (STATE == STATE_2_ESTOP) {
 8001234:	4b97      	ldr	r3, [pc, #604]	@ (8001494 <main+0x53c>)
 8001236:	781a      	ldrb	r2, [r3, #0]
 8001238:	4b97      	ldr	r3, [pc, #604]	@ (8001498 <main+0x540>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d142      	bne.n	80012c6 <main+0x36e>
		  // DISABLE STEPPER MOTORS
  		  Stepper_disable(&STEPPER1);
 8001240:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001244:	4618      	mov	r0, r3
 8001246:	f000 fcbf 	bl	8001bc8 <Stepper_disable>
  		  Stepper_disable(&STEPPER2);
 800124a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fcba 	bl	8001bc8 <Stepper_disable>
  		  // STOP BLDC MOTORS
		  D4215_set(&ESC1, 0);
 8001254:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fdcc 	bl	8000df8 <D4215_set>
		  D4215_set(&ESC2, 0);
 8001260:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fdc6 	bl	8000df8 <D4215_set>
		  // CHECK FOR RESET BY PUSHING 2 BUTTONS AT THE SAME TIME FOR 5 SECONDS
		  if (MOVE == 1 && SHOT == 1) {
 800126c:	4b8b      	ldr	r3, [pc, #556]	@ (800149c <main+0x544>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	d117      	bne.n	80012a4 <main+0x34c>
 8001274:	4b8a      	ldr	r3, [pc, #552]	@ (80014a0 <main+0x548>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d113      	bne.n	80012a4 <main+0x34c>
			  tf = HAL_GetTick();
 800127c:	f000 ffbe 	bl	80021fc <HAL_GetTick>
 8001280:	4603      	mov	r3, r0
 8001282:	4a88      	ldr	r2, [pc, #544]	@ (80014a4 <main+0x54c>)
 8001284:	6013      	str	r3, [r2, #0]
			  dt += (tf-ti);
 8001286:	4b87      	ldr	r3, [pc, #540]	@ (80014a4 <main+0x54c>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b87      	ldr	r3, [pc, #540]	@ (80014a8 <main+0x550>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	1ad2      	subs	r2, r2, r3
 8001290:	4b86      	ldr	r3, [pc, #536]	@ (80014ac <main+0x554>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4413      	add	r3, r2
 8001296:	4a85      	ldr	r2, [pc, #532]	@ (80014ac <main+0x554>)
 8001298:	6013      	str	r3, [r2, #0]
			  ti = tf;
 800129a:	4b82      	ldr	r3, [pc, #520]	@ (80014a4 <main+0x54c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a82      	ldr	r2, [pc, #520]	@ (80014a8 <main+0x550>)
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e002      	b.n	80012aa <main+0x352>
		  }
		  else {
			  dt = 0;
 80012a4:	4b81      	ldr	r3, [pc, #516]	@ (80014ac <main+0x554>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
		  }
		  STATE = (dt > 5000) ? STATE_1_HUB : STATE_2_ESTOP;
 80012aa:	4b80      	ldr	r3, [pc, #512]	@ (80014ac <main+0x554>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d902      	bls.n	80012bc <main+0x364>
 80012b6:	4b7e      	ldr	r3, [pc, #504]	@ (80014b0 <main+0x558>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	e001      	b.n	80012c0 <main+0x368>
 80012bc:	4b76      	ldr	r3, [pc, #472]	@ (8001498 <main+0x540>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4a74      	ldr	r2, [pc, #464]	@ (8001494 <main+0x53c>)
 80012c2:	7013      	strb	r3, [r2, #0]
 80012c4:	e659      	b.n	8000f7a <main+0x22>

	  }
	  // STATE 3: SPIN STEPPER MOTORS
	  else if (STATE == STATE_3_STEPPER) {\
 80012c6:	4b73      	ldr	r3, [pc, #460]	@ (8001494 <main+0x53c>)
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	4b7a      	ldr	r3, [pc, #488]	@ (80014b4 <main+0x55c>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	f040 80bf 	bne.w	8001452 <main+0x4fa>
		  LED_on(&LED1);
 80012d4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe1c 	bl	8000f16 <LED_on>
		  // LEFT SWITCH HIT --> MOVE TO THE RIGHT
		  if (SW == 1) {
 80012de:	4b76      	ldr	r3, [pc, #472]	@ (80014b8 <main+0x560>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d11d      	bne.n	8001322 <main+0x3ca>
			  for (int i = 0; i <= angleTarget/2; i++) {
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80012ec:	e00c      	b.n	8001308 <main+0x3b0>
				  Stepper_setspeed (&STEPPER1, 10, yawDirectionSW);
 80012ee:	4b73      	ldr	r3, [pc, #460]	@ (80014bc <main+0x564>)
 80012f0:	781a      	ldrb	r2, [r3, #0]
 80012f2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80012f6:	210a      	movs	r1, #10
 80012f8:	4618      	mov	r0, r3
 80012fa:	f000 fc75 	bl	8001be8 <Stepper_setspeed>
			  for (int i = 0; i <= angleTarget/2; i++) {
 80012fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001302:	3301      	adds	r3, #1
 8001304:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001308:	4b6d      	ldr	r3, [pc, #436]	@ (80014c0 <main+0x568>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	085b      	lsrs	r3, r3, #1
 800130e:	b29b      	uxth	r3, r3
 8001310:	461a      	mov	r2, r3
 8001312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001316:	4293      	cmp	r3, r2
 8001318:	dde9      	ble.n	80012ee <main+0x396>
			  }
			  SW = 0;
 800131a:	4b67      	ldr	r3, [pc, #412]	@ (80014b8 <main+0x560>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	e092      	b.n	8001448 <main+0x4f0>
		  }
		  // RIGHT SWITCH HIT --> MOVE TO THE LEFT
		  else if (SW == 2) {
 8001322:	4b65      	ldr	r3, [pc, #404]	@ (80014b8 <main+0x560>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d11d      	bne.n	8001366 <main+0x40e>
			  for (int i = 0; i <= angleTarget/2; i ++) {
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001330:	e00c      	b.n	800134c <main+0x3f4>
				  Stepper_setspeed (&STEPPER1, 10, yawDirectionSW);
 8001332:	4b62      	ldr	r3, [pc, #392]	@ (80014bc <main+0x564>)
 8001334:	781a      	ldrb	r2, [r3, #0]
 8001336:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800133a:	210a      	movs	r1, #10
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fc53 	bl	8001be8 <Stepper_setspeed>
			  for (int i = 0; i <= angleTarget/2; i ++) {
 8001342:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001346:	3301      	adds	r3, #1
 8001348:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800134c:	4b5c      	ldr	r3, [pc, #368]	@ (80014c0 <main+0x568>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	085b      	lsrs	r3, r3, #1
 8001352:	b29b      	uxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800135a:	4293      	cmp	r3, r2
 800135c:	dde9      	ble.n	8001332 <main+0x3da>
			  }
			  SW = 0;
 800135e:	4b56      	ldr	r3, [pc, #344]	@ (80014b8 <main+0x560>)
 8001360:	2200      	movs	r2, #0
 8001362:	701a      	strb	r2, [r3, #0]
 8001364:	e070      	b.n	8001448 <main+0x4f0>
		  }
		  // MID SWITCH HIT --> MOVE UP
		  else if (SW == 3) {
 8001366:	4b54      	ldr	r3, [pc, #336]	@ (80014b8 <main+0x560>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b03      	cmp	r3, #3
 800136c:	d11e      	bne.n	80013ac <main+0x454>
			  for (int i = 0; i <= 10 * angleTarget/2; i ++) {
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001374:	e00c      	b.n	8001390 <main+0x438>
				  Stepper_setspeed (&STEPPER2, 10, pitchDirectionSW);
 8001376:	4b53      	ldr	r3, [pc, #332]	@ (80014c4 <main+0x56c>)
 8001378:	781a      	ldrb	r2, [r3, #0]
 800137a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800137e:	210a      	movs	r1, #10
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fc31 	bl	8001be8 <Stepper_setspeed>
			  for (int i = 0; i <= 10 * angleTarget/2; i ++) {
 8001386:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800138a:	3301      	adds	r3, #1
 800138c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001390:	4b4b      	ldr	r3, [pc, #300]	@ (80014c0 <main+0x568>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80013a0:	429a      	cmp	r2, r3
 80013a2:	dde8      	ble.n	8001376 <main+0x41e>
			  }
			  SW = 0;
 80013a4:	4b44      	ldr	r3, [pc, #272]	@ (80014b8 <main+0x560>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
 80013aa:	e04d      	b.n	8001448 <main+0x4f0>
		  }
		  // IF NOT SWITCH, MOVE ACCODING TO THE IMU DATA
		  else {
			  uint16_t yaw_map = map(yaw, 20, 250, 5, 30);
 80013ac:	4b46      	ldr	r3, [pc, #280]	@ (80014c8 <main+0x570>)
 80013ae:	8818      	ldrh	r0, [r3, #0]
 80013b0:	231e      	movs	r3, #30
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	2305      	movs	r3, #5
 80013b6:	22fa      	movs	r2, #250	@ 0xfa
 80013b8:	2114      	movs	r1, #20
 80013ba:	f000 fbad 	bl	8001b18 <map>
 80013be:	4603      	mov	r3, r0
 80013c0:	f8a7 30c2 	strh.w	r3, [r7, #194]	@ 0xc2
			  if (yaw > 20) {
 80013c4:	4b40      	ldr	r3, [pc, #256]	@ (80014c8 <main+0x570>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	2b14      	cmp	r3, #20
 80013ca:	d916      	bls.n	80013fa <main+0x4a2>
				  for (int i = 0; i <= yaw_map; i ++) {
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80013d2:	e00c      	b.n	80013ee <main+0x496>
					  Stepper_setspeed (&STEPPER1, 1, yawDirection);
 80013d4:	4b3d      	ldr	r3, [pc, #244]	@ (80014cc <main+0x574>)
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80013dc:	2101      	movs	r1, #1
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 fc02 	bl	8001be8 <Stepper_setspeed>
				  for (int i = 0; i <= yaw_map; i ++) {
 80013e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80013e8:	3301      	adds	r3, #1
 80013ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80013ee:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	@ 0xc2
 80013f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80013f6:	429a      	cmp	r2, r3
 80013f8:	ddec      	ble.n	80013d4 <main+0x47c>
				  }
			  }
			  uint16_t pitch_map = map(pitch, 20, 250, 5, 50);
 80013fa:	4b35      	ldr	r3, [pc, #212]	@ (80014d0 <main+0x578>)
 80013fc:	8818      	ldrh	r0, [r3, #0]
 80013fe:	2332      	movs	r3, #50	@ 0x32
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	2305      	movs	r3, #5
 8001404:	22fa      	movs	r2, #250	@ 0xfa
 8001406:	2114      	movs	r1, #20
 8001408:	f000 fb86 	bl	8001b18 <map>
 800140c:	4603      	mov	r3, r0
 800140e:	f8a7 30c0 	strh.w	r3, [r7, #192]	@ 0xc0
			  if (pitch > 20) {
 8001412:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <main+0x578>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	2b14      	cmp	r3, #20
 8001418:	d916      	bls.n	8001448 <main+0x4f0>
				  for (int i = 0; i <= pitch_map; i ++) {
 800141a:	2300      	movs	r3, #0
 800141c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001420:	e00c      	b.n	800143c <main+0x4e4>
					  Stepper_setspeed (&STEPPER2, 1, pitchDirection);
 8001422:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <main+0x57c>)
 8001424:	781a      	ldrb	r2, [r3, #0]
 8001426:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800142a:	2101      	movs	r1, #1
 800142c:	4618      	mov	r0, r3
 800142e:	f000 fbdb 	bl	8001be8 <Stepper_setspeed>
				  for (int i = 0; i <= pitch_map; i ++) {
 8001432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001436:	3301      	adds	r3, #1
 8001438:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800143c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	@ 0xc0
 8001440:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001444:	429a      	cmp	r2, r3
 8001446:	ddec      	ble.n	8001422 <main+0x4ca>
				  }
			  }
		  }
		  STATE = STATE_1_HUB;
 8001448:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <main+0x558>)
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <main+0x53c>)
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	e593      	b.n	8000f7a <main+0x22>
	  }

	  // STATE 4: BLDC MOTOR
	  else if (STATE == STATE_4_BLDC) {
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <main+0x53c>)
 8001454:	781a      	ldrb	r2, [r3, #0]
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <main+0x580>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d115      	bne.n	800148a <main+0x532>
		  LED_on(&LED2);
 800145e:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fd57 	bl	8000f16 <LED_on>
		  D4215_set(&ESC1, 30);
 8001468:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800146c:	211e      	movs	r1, #30
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fcc2 	bl	8000df8 <D4215_set>
		  D4215_set(&ESC2, 30);
 8001474:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001478:	211e      	movs	r1, #30
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fcbc 	bl	8000df8 <D4215_set>
		  STATE = STATE_1_HUB;
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <main+0x558>)
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <main+0x53c>)
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	e577      	b.n	8000f7a <main+0x22>
	  }

	  // STATE 1: DECISION HUB IN CASE SOME ERROR
	  else {
		  STATE = STATE_1_HUB;
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <main+0x558>)
 800148c:	781a      	ldrb	r2, [r3, #0]
 800148e:	4b01      	ldr	r3, [pc, #4]	@ (8001494 <main+0x53c>)
 8001490:	701a      	strb	r2, [r3, #0]
  {
 8001492:	e572      	b.n	8000f7a <main+0x22>
 8001494:	200001d8 	.word	0x200001d8
 8001498:	20000001 	.word	0x20000001
 800149c:	200001d1 	.word	0x200001d1
 80014a0:	200001d2 	.word	0x200001d2
 80014a4:	200001b8 	.word	0x200001b8
 80014a8:	200001b4 	.word	0x200001b4
 80014ac:	200001bc 	.word	0x200001bc
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000002 	.word	0x20000002
 80014b8:	200001d7 	.word	0x200001d7
 80014bc:	200001ce 	.word	0x200001ce
 80014c0:	200001c4 	.word	0x200001c4
 80014c4:	200001cf 	.word	0x200001cf
 80014c8:	200001c0 	.word	0x200001c0
 80014cc:	200001cc 	.word	0x200001cc
 80014d0:	200001c2 	.word	0x200001c2
 80014d4:	200001cd 	.word	0x200001cd
 80014d8:	20000003 	.word	0x20000003

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b094      	sub	sp, #80	@ 0x50
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	2230      	movs	r2, #48	@ 0x30
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f004 f82a 	bl	8005544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	4b27      	ldr	r3, [pc, #156]	@ (80015a4 <SystemClock_Config+0xc8>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	4a26      	ldr	r2, [pc, #152]	@ (80015a4 <SystemClock_Config+0xc8>)
 800150a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001510:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <SystemClock_Config+0xc8>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	4b21      	ldr	r3, [pc, #132]	@ (80015a8 <SystemClock_Config+0xcc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a20      	ldr	r2, [pc, #128]	@ (80015a8 <SystemClock_Config+0xcc>)
 8001526:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <SystemClock_Config+0xcc>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001538:	2301      	movs	r3, #1
 800153a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800153c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001542:	2302      	movs	r3, #2
 8001544:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001546:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800154a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800154c:	2319      	movs	r3, #25
 800154e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001550:	23c0      	movs	r3, #192	@ 0xc0
 8001552:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001554:	2302      	movs	r3, #2
 8001556:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001558:	2304      	movs	r3, #4
 800155a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155c:	f107 0320 	add.w	r3, r7, #32
 8001560:	4618      	mov	r0, r3
 8001562:	f001 f9b1 	bl	80028c8 <HAL_RCC_OscConfig>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800156c:	f000 faf9 	bl	8001b62 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001570:	230f      	movs	r3, #15
 8001572:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001574:	2302      	movs	r3, #2
 8001576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800157c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001582:	2300      	movs	r3, #0
 8001584:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2103      	movs	r1, #3
 800158c:	4618      	mov	r0, r3
 800158e:	f001 fc13 	bl	8002db8 <HAL_RCC_ClockConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001598:	f000 fae3 	bl	8001b62 <Error_Handler>
  }
}
 800159c:	bf00      	nop
 800159e:	3750      	adds	r7, #80	@ 0x50
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000

080015ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	@ 0x28
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	615a      	str	r2, [r3, #20]
 80015cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015ce:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <MX_TIM2_Init+0xc4>)
 80015d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 80015d6:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <MX_TIM2_Init+0xc4>)
 80015d8:	225f      	movs	r2, #95	@ 0x5f
 80015da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <MX_TIM2_Init+0xc4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80015e2:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <MX_TIM2_Init+0xc4>)
 80015e4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80015e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <MX_TIM2_Init+0xc4>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <MX_TIM2_Init+0xc4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015f6:	481e      	ldr	r0, [pc, #120]	@ (8001670 <MX_TIM2_Init+0xc4>)
 80015f8:	f001 fe18 	bl	800322c <HAL_TIM_PWM_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001602:	f000 faae 	bl	8001b62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800160e:	f107 0320 	add.w	r3, r7, #32
 8001612:	4619      	mov	r1, r3
 8001614:	4816      	ldr	r0, [pc, #88]	@ (8001670 <MX_TIM2_Init+0xc4>)
 8001616:	f002 fe89 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001620:	f000 fa9f 	bl	8001b62 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001624:	2360      	movs	r3, #96	@ 0x60
 8001626:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2204      	movs	r2, #4
 8001638:	4619      	mov	r1, r3
 800163a:	480d      	ldr	r0, [pc, #52]	@ (8001670 <MX_TIM2_Init+0xc4>)
 800163c:	f002 f9ec 	bl	8003a18 <HAL_TIM_PWM_ConfigChannel>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001646:	f000 fa8c 	bl	8001b62 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2208      	movs	r2, #8
 800164e:	4619      	mov	r1, r3
 8001650:	4807      	ldr	r0, [pc, #28]	@ (8001670 <MX_TIM2_Init+0xc4>)
 8001652:	f002 f9e1 	bl	8003a18 <HAL_TIM_PWM_ConfigChannel>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800165c:	f000 fa81 	bl	8001b62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001660:	4803      	ldr	r0, [pc, #12]	@ (8001670 <MX_TIM2_Init+0xc4>)
 8001662:	f000 fbc3 	bl	8001dec <HAL_TIM_MspPostInit>

}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	@ 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	2000007c 	.word	0x2000007c

08001674 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167a:	f107 0310 	add.w	r3, r7, #16
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001690:	4b27      	ldr	r3, [pc, #156]	@ (8001730 <MX_TIM4_Init+0xbc>)
 8001692:	4a28      	ldr	r2, [pc, #160]	@ (8001734 <MX_TIM4_Init+0xc0>)
 8001694:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 8001696:	4b26      	ldr	r3, [pc, #152]	@ (8001730 <MX_TIM4_Init+0xbc>)
 8001698:	225f      	movs	r2, #95	@ 0x5f
 800169a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169c:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <MX_TIM4_Init+0xbc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 17499;
 80016a2:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <MX_TIM4_Init+0xbc>)
 80016a4:	f244 425b 	movw	r2, #17499	@ 0x445b
 80016a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016aa:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <MX_TIM4_Init+0xbc>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001730 <MX_TIM4_Init+0xbc>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80016b6:	481e      	ldr	r0, [pc, #120]	@ (8001730 <MX_TIM4_Init+0xbc>)
 80016b8:	f001 feb8 	bl	800342c <HAL_TIM_IC_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80016c2:	f000 fa4e 	bl	8001b62 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016ce:	f107 0310 	add.w	r3, r7, #16
 80016d2:	4619      	mov	r1, r3
 80016d4:	4816      	ldr	r0, [pc, #88]	@ (8001730 <MX_TIM4_Init+0xbc>)
 80016d6:	f002 fe29 	bl	800432c <HAL_TIMEx_MasterConfigSynchronization>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80016e0:	f000 fa3f 	bl	8001b62 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016e4:	2300      	movs	r3, #0
 80016e6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016e8:	2301      	movs	r3, #1
 80016ea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	2200      	movs	r2, #0
 80016f8:	4619      	mov	r1, r3
 80016fa:	480d      	ldr	r0, [pc, #52]	@ (8001730 <MX_TIM4_Init+0xbc>)
 80016fc:	f002 f8f0 	bl	80038e0 <HAL_TIM_IC_ConfigChannel>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001706:	f000 fa2c 	bl	8001b62 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800170a:	2302      	movs	r3, #2
 800170c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800170e:	2302      	movs	r3, #2
 8001710:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001712:	463b      	mov	r3, r7
 8001714:	2204      	movs	r2, #4
 8001716:	4619      	mov	r1, r3
 8001718:	4805      	ldr	r0, [pc, #20]	@ (8001730 <MX_TIM4_Init+0xbc>)
 800171a:	f002 f8e1 	bl	80038e0 <HAL_TIM_IC_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001724:	f000 fa1d 	bl	8001b62 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	200000c4 	.word	0x200000c4
 8001734:	40000800 	.word	0x40000800

08001738 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800173c:	4b11      	ldr	r3, [pc, #68]	@ (8001784 <MX_USART1_UART_Init+0x4c>)
 800173e:	4a12      	ldr	r2, [pc, #72]	@ (8001788 <MX_USART1_UART_Init+0x50>)
 8001740:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001742:	4b10      	ldr	r3, [pc, #64]	@ (8001784 <MX_USART1_UART_Init+0x4c>)
 8001744:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001748:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b0e      	ldr	r3, [pc, #56]	@ (8001784 <MX_USART1_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <MX_USART1_UART_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <MX_USART1_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <MX_USART1_UART_Init+0x4c>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <MX_USART1_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <MX_USART1_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	@ (8001784 <MX_USART1_UART_Init+0x4c>)
 8001770:	f002 fe5e 	bl	8004430 <HAL_UART_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800177a:	f000 f9f2 	bl	8001b62 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000010c 	.word	0x2000010c
 8001788:	40011000 	.word	0x40011000

0800178c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <MX_USART6_UART_Init+0x4c>)
 8001792:	4a12      	ldr	r2, [pc, #72]	@ (80017dc <MX_USART6_UART_Init+0x50>)
 8001794:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001796:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <MX_USART6_UART_Init+0x4c>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0b      	ldr	r3, [pc, #44]	@ (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017c2:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <MX_USART6_UART_Init+0x4c>)
 80017c4:	f002 fe34 	bl	8004430 <HAL_UART_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017ce:	f000 f9c8 	bl	8001b62 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000154 	.word	0x20000154
 80017dc:	40011400 	.word	0x40011400

080017e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
 80017f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	4b31      	ldr	r3, [pc, #196]	@ (80018c0 <MX_GPIO_Init+0xe0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a30      	ldr	r2, [pc, #192]	@ (80018c0 <MX_GPIO_Init+0xe0>)
 8001800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b2e      	ldr	r3, [pc, #184]	@ (80018c0 <MX_GPIO_Init+0xe0>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b2a      	ldr	r3, [pc, #168]	@ (80018c0 <MX_GPIO_Init+0xe0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a29      	ldr	r2, [pc, #164]	@ (80018c0 <MX_GPIO_Init+0xe0>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b27      	ldr	r3, [pc, #156]	@ (80018c0 <MX_GPIO_Init+0xe0>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <MX_GPIO_Init+0xe0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a22      	ldr	r2, [pc, #136]	@ (80018c0 <MX_GPIO_Init+0xe0>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b20      	ldr	r3, [pc, #128]	@ (80018c0 <MX_GPIO_Init+0xe0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800184a:	2200      	movs	r2, #0
 800184c:	f44f 71fc 	mov.w	r1, #504	@ 0x1f8
 8001850:	481c      	ldr	r0, [pc, #112]	@ (80018c4 <MX_GPIO_Init+0xe4>)
 8001852:	f001 f81f 	bl	8002894 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 4177 	mov.w	r1, #63232	@ 0xf700
 800185c:	481a      	ldr	r0, [pc, #104]	@ (80018c8 <MX_GPIO_Init+0xe8>)
 800185e:	f001 f819 	bl	8002894 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8001862:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8001866:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001868:	2301      	movs	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	4619      	mov	r1, r3
 800187a:	4812      	ldr	r0, [pc, #72]	@ (80018c4 <MX_GPIO_Init+0xe4>)
 800187c:	f000 fe6e 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001880:	2307      	movs	r3, #7
 8001882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4619      	mov	r1, r3
 8001892:	480d      	ldr	r0, [pc, #52]	@ (80018c8 <MX_GPIO_Init+0xe8>)
 8001894:	f000 fe62 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB14
                           PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001898:	f44f 4377 	mov.w	r3, #63232	@ 0xf700
 800189c:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189e:	2301      	movs	r3, #1
 80018a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4619      	mov	r1, r3
 80018b0:	4805      	ldr	r0, [pc, #20]	@ (80018c8 <MX_GPIO_Init+0xe8>)
 80018b2:	f000 fe53 	bl	800255c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b6:	bf00      	nop
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	40020400 	.word	0x40020400

080018cc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a15      	ldr	r2, [pc, #84]	@ (8001930 <HAL_UART_RxCpltCallback+0x64>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d124      	bne.n	8001928 <HAL_UART_RxCpltCallback+0x5c>
  {
    if (charIn == '\n')
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <HAL_UART_RxCpltCallback+0x68>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b0a      	cmp	r3, #10
 80018e4:	d10c      	bne.n	8001900 <HAL_UART_RxCpltCallback+0x34>
    {
      data[idx] = '\0'; // Null-terminate the buffer
 80018e6:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <HAL_UART_RxCpltCallback+0x6c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	4b13      	ldr	r3, [pc, #76]	@ (800193c <HAL_UART_RxCpltCallback+0x70>)
 80018ee:	2100      	movs	r1, #0
 80018f0:	5499      	strb	r1, [r3, r2]
//      HAL_UART_Transmit(&huart6, (uint8_t*)data, idx, 100);
//      HAL_UART_Transmit(&huart6, (uint8_t*)"\r\n", 2, 100);
      dataProcess(data);
 80018f2:	4812      	ldr	r0, [pc, #72]	@ (800193c <HAL_UART_RxCpltCallback+0x70>)
 80018f4:	f000 f826 	bl	8001944 <dataProcess>
      idx = 0;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <HAL_UART_RxCpltCallback+0x6c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e00e      	b.n	800191e <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      if (idx < sizeof(data) - 1)
 8001900:	4b0d      	ldr	r3, [pc, #52]	@ (8001938 <HAL_UART_RxCpltCallback+0x6c>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b12      	cmp	r3, #18
 8001906:	d80a      	bhi.n	800191e <HAL_UART_RxCpltCallback+0x52>
      {
        data[idx++] = charIn;
 8001908:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <HAL_UART_RxCpltCallback+0x6c>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	b2d1      	uxtb	r1, r2
 8001910:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <HAL_UART_RxCpltCallback+0x6c>)
 8001912:	7011      	strb	r1, [r2, #0]
 8001914:	461a      	mov	r2, r3
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <HAL_UART_RxCpltCallback+0x68>)
 8001918:	7819      	ldrb	r1, [r3, #0]
 800191a:	4b08      	ldr	r3, [pc, #32]	@ (800193c <HAL_UART_RxCpltCallback+0x70>)
 800191c:	5499      	strb	r1, [r3, r2]
      }
    }
    // Restart UART receive interrupt for next character
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&charIn, 1);
 800191e:	2201      	movs	r2, #1
 8001920:	4904      	ldr	r1, [pc, #16]	@ (8001934 <HAL_UART_RxCpltCallback+0x68>)
 8001922:	4807      	ldr	r0, [pc, #28]	@ (8001940 <HAL_UART_RxCpltCallback+0x74>)
 8001924:	f002 fe5f 	bl	80045e6 <HAL_UART_Receive_IT>
  }
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40011000 	.word	0x40011000
 8001934:	2000019c 	.word	0x2000019c
 8001938:	200001d0 	.word	0x200001d0
 800193c:	200001a0 	.word	0x200001a0
 8001940:	2000010c 	.word	0x2000010c

08001944 <dataProcess>:

void dataProcess(char* data) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	MOVE = (int16_t)data[0] - 48;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	3b30      	subs	r3, #48	@ 0x30
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <dataProcess+0xbc>)
 8001956:	701a      	strb	r2, [r3, #0]
	SHOT = (int16_t)data[2] - 48;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3302      	adds	r3, #2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	3b30      	subs	r3, #48	@ 0x30
 8001960:	b2da      	uxtb	r2, r3
 8001962:	4b28      	ldr	r3, [pc, #160]	@ (8001a04 <dataProcess+0xc0>)
 8001964:	701a      	strb	r2, [r3, #0]
	yawDirection   = ((uint8_t)data[4] == 45) ? 0 : 1;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	3304      	adds	r3, #4
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b2d      	cmp	r3, #45	@ 0x2d
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	4b23      	ldr	r3, [pc, #140]	@ (8001a08 <dataProcess+0xc4>)
 800197a:	701a      	strb	r2, [r3, #0]
	pitchDirection = ((uint8_t)data[9] == 45) ? 0 : 1;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3309      	adds	r3, #9
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b2d      	cmp	r3, #45	@ 0x2d
 8001984:	bf14      	ite	ne
 8001986:	2301      	movne	r3, #1
 8001988:	2300      	moveq	r3, #0
 800198a:	b2db      	uxtb	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <dataProcess+0xc8>)
 8001990:	701a      	strb	r2, [r3, #0]
//		yawDirection == 1;
//	} else {
//		yawDirection == 0;
//	}

	uint16_t yaw1 = (uint16_t)data[5] - 48;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3305      	adds	r3, #5
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3b30      	subs	r3, #48	@ 0x30
 800199a:	82fb      	strh	r3, [r7, #22]
	uint16_t yaw2 = (uint16_t)data[6] - 48;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3306      	adds	r3, #6
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	3b30      	subs	r3, #48	@ 0x30
 80019a4:	82bb      	strh	r3, [r7, #20]
	uint16_t yaw3 = (uint16_t)data[7] - 48;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3307      	adds	r3, #7
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	3b30      	subs	r3, #48	@ 0x30
 80019ae:	827b      	strh	r3, [r7, #18]

	uint16_t pitch1 = (uint16_t)data[10] - 48;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	330a      	adds	r3, #10
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	3b30      	subs	r3, #48	@ 0x30
 80019b8:	823b      	strh	r3, [r7, #16]
	uint16_t pitch2 = (uint16_t)data[11] - 48;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	330b      	adds	r3, #11
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	3b30      	subs	r3, #48	@ 0x30
 80019c2:	81fb      	strh	r3, [r7, #14]
	uint16_t pitch3 = (uint16_t)data[12] - 48;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	330c      	adds	r3, #12
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	3b30      	subs	r3, #48	@ 0x30
 80019cc:	81bb      	strh	r3, [r7, #12]

	yaw   = speedCalculate(yaw1, yaw2, yaw3);
 80019ce:	8a7a      	ldrh	r2, [r7, #18]
 80019d0:	8ab9      	ldrh	r1, [r7, #20]
 80019d2:	8afb      	ldrh	r3, [r7, #22]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 f81f 	bl	8001a18 <speedCalculate>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <dataProcess+0xcc>)
 80019e0:	801a      	strh	r2, [r3, #0]
	pitch = speedCalculate(pitch1, pitch2, pitch3);
 80019e2:	89ba      	ldrh	r2, [r7, #12]
 80019e4:	89f9      	ldrh	r1, [r7, #14]
 80019e6:	8a3b      	ldrh	r3, [r7, #16]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f815 	bl	8001a18 <speedCalculate>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <dataProcess+0xd0>)
 80019f4:	801a      	strh	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	3718      	adds	r7, #24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200001d1 	.word	0x200001d1
 8001a04:	200001d2 	.word	0x200001d2
 8001a08:	200001cc 	.word	0x200001cc
 8001a0c:	200001cd 	.word	0x200001cd
 8001a10:	200001c0 	.word	0x200001c0
 8001a14:	200001c2 	.word	0x200001c2

08001a18 <speedCalculate>:


uint16_t speedCalculate(uint16_t first, uint16_t second, uint16_t third) {
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
 8001a22:	460b      	mov	r3, r1
 8001a24:	80bb      	strh	r3, [r7, #4]
 8001a26:	4613      	mov	r3, r2
 8001a28:	807b      	strh	r3, [r7, #2]
	uint16_t number = 100 * first + 10 * second + 1 * third;
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	0092      	lsls	r2, r2, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	461a      	mov	r2, r3
 8001a34:	0091      	lsls	r1, r2, #2
 8001a36:	461a      	mov	r2, r3
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	88bb      	ldrh	r3, [r7, #4]
 8001a42:	4619      	mov	r1, r3
 8001a44:	0089      	lsls	r1, r1, #2
 8001a46:	440b      	add	r3, r1
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	4413      	add	r3, r2
 8001a54:	81fb      	strh	r3, [r7, #14]
	return number;
 8001a56:	89fb      	ldrh	r3, [r7, #14]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a24      	ldr	r2, [pc, #144]	@ (8001b04 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d141      	bne.n	8001afa <HAL_TIM_IC_CaptureCallback+0x96>
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	7f1b      	ldrb	r3, [r3, #28]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d108      	bne.n	8001a90 <HAL_TIM_IC_CaptureCallback+0x2c>
            rise = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f002 f88b 	bl	8003b9c <HAL_TIM_ReadCapturedValue>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001a8c:	801a      	strh	r2, [r3, #0]
            else {
            	ESTOP = 0;
            }
        }
    }
}
 8001a8e:	e034      	b.n	8001afa <HAL_TIM_IC_CaptureCallback+0x96>
        } else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	7f1b      	ldrb	r3, [r3, #28]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d130      	bne.n	8001afa <HAL_TIM_IC_CaptureCallback+0x96>
            fall = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001a98:	2104      	movs	r1, #4
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f002 f87e 	bl	8003b9c <HAL_TIM_ReadCapturedValue>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001aa6:	801a      	strh	r2, [r3, #0]
            if (fall >= rise) {
 8001aa8:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001aaa:	881a      	ldrh	r2, [r3, #0]
 8001aac:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d308      	bcc.n	8001ac6 <HAL_TIM_IC_CaptureCallback+0x62>
                total = fall - rise;
 8001ab4:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001ab6:	881a      	ldrh	r2, [r3, #0]
 8001ab8:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001ac2:	801a      	strh	r2, [r3, #0]
 8001ac4:	e007      	b.n	8001ad6 <HAL_TIM_IC_CaptureCallback+0x72>
                total = UINT16_MAX - rise + fall + 1;
 8001ac6:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001ac8:	881a      	ldrh	r2, [r3, #0]
 8001aca:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001ad4:	801a      	strh	r2, [r3, #0]
            if (total > 1800 && total < 2200) {
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001ade:	d909      	bls.n	8001af4 <HAL_TIM_IC_CaptureCallback+0x90>
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_TIM_IC_CaptureCallback+0xac>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	f640 0297 	movw	r2, #2199	@ 0x897
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d803      	bhi.n	8001af4 <HAL_TIM_IC_CaptureCallback+0x90>
            	ESTOP = 1;
 8001aec:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001aee:	2201      	movs	r2, #1
 8001af0:	701a      	strb	r2, [r3, #0]
}
 8001af2:	e002      	b.n	8001afa <HAL_TIM_IC_CaptureCallback+0x96>
            	ESTOP = 0;
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40000800 	.word	0x40000800
 8001b08:	200001c6 	.word	0x200001c6
 8001b0c:	200001c8 	.word	0x200001c8
 8001b10:	200001ca 	.word	0x200001ca
 8001b14:	200001d3 	.word	0x200001d3

08001b18 <map>:
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001b18:	b490      	push	{r4, r7}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4604      	mov	r4, r0
 8001b20:	4608      	mov	r0, r1
 8001b22:	4611      	mov	r1, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	4623      	mov	r3, r4
 8001b28:	80fb      	strh	r3, [r7, #6]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80bb      	strh	r3, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	807b      	strh	r3, [r7, #2]
 8001b32:	4613      	mov	r3, r2
 8001b34:	803b      	strh	r3, [r7, #0]
    return (uint16_t)((x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min);
 8001b36:	88fa      	ldrh	r2, [r7, #6]
 8001b38:	88bb      	ldrh	r3, [r7, #4]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	8a39      	ldrh	r1, [r7, #16]
 8001b3e:	883a      	ldrh	r2, [r7, #0]
 8001b40:	1a8a      	subs	r2, r1, r2
 8001b42:	fb03 f202 	mul.w	r2, r3, r2
 8001b46:	8879      	ldrh	r1, [r7, #2]
 8001b48:	88bb      	ldrh	r3, [r7, #4]
 8001b4a:	1acb      	subs	r3, r1, r3
 8001b4c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	883b      	ldrh	r3, [r7, #0]
 8001b54:	4413      	add	r3, r2
 8001b56:	b29b      	uxth	r3, r3
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc90      	pop	{r4, r7}
 8001b60:	4770      	bx	lr

08001b62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b66:	b672      	cpsid	i
}
 8001b68:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6a:	bf00      	nop
 8001b6c:	e7fd      	b.n	8001b6a <Error_Handler+0x8>

08001b6e <Stepper_init>:
  * @param GPIO GPIO port
  * @param EN_PIN Enable pin
  * @param DIR_PIN Direction pin
  * @param STP_PIN Step pin
  */
void Stepper_init(StepperX* stepperx, GPIO_TypeDef* GPIO, uint16_t EN_PIN, uint16_t DIR_PIN, uint16_t STP_PIN) {
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	80fb      	strh	r3, [r7, #6]
 8001b80:	4613      	mov	r3, r2
 8001b82:	80bb      	strh	r3, [r7, #4]
	stepperx->GPIOx    = GPIO;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	601a      	str	r2, [r3, #0]
	stepperx->EN_PIN   = EN_PIN;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	88fa      	ldrh	r2, [r7, #6]
 8001b8e:	809a      	strh	r2, [r3, #4]
	stepperx->DIR_PIN  = DIR_PIN;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	88ba      	ldrh	r2, [r7, #4]
 8001b94:	80da      	strh	r2, [r3, #6]
	stepperx->STP_PIN  = STP_PIN;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8b3a      	ldrh	r2, [r7, #24]
 8001b9a:	811a      	strh	r2, [r3, #8]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <Stepper_enable>:
/**
  * @brief Enables the stepper motor driver.
  *
  * @param stepperx Pointer to the StepperX structure
  */
void Stepper_enable   (StepperX* stepperx) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin (stepperx->GPIOx, stepperx->EN_PIN, 0);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	889b      	ldrh	r3, [r3, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f000 fe6a 	bl	8002894 <HAL_GPIO_WritePin>
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <Stepper_disable>:
/**
  * @brief Disables the stepper motor driver.
  *
  * @param stepperx Pointer to the StepperX structure
  */
void Stepper_disable  (StepperX* stepperx) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin (stepperx->GPIOx, stepperx->EN_PIN, 1);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	889b      	ldrh	r3, [r3, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f000 fe5a 	bl	8002894 <HAL_GPIO_WritePin>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <Stepper_setspeed>:
  *
  * @param stepperx Pointer to the StepperX structure
  * @param speed Speed of the stepper motor (delay between steps)
  * @param dir Direction of the stepper motor (1 for one direction, 0 for the opposite)
  */
void Stepper_setspeed (StepperX* stepperx, uint16_t speed, uint8_t dir) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	807b      	strh	r3, [r7, #2]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin (stepperx->GPIOx, stepperx->DIR_PIN, dir);/**< Set the direction pin */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6818      	ldr	r0, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	88db      	ldrh	r3, [r3, #6]
 8001c00:	787a      	ldrb	r2, [r7, #1]
 8001c02:	4619      	mov	r1, r3
 8001c04:	f000 fe46 	bl	8002894 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (stepperx->GPIOx, stepperx->STP_PIN, 1);/**< Set the step pin high */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	891b      	ldrh	r3, [r3, #8]
 8001c10:	2201      	movs	r2, #1
 8001c12:	4619      	mov	r1, r3
 8001c14:	f000 fe3e 	bl	8002894 <HAL_GPIO_WritePin>
	Delay_us(speed);/**< Delay to control the speed */
 8001c18:	887b      	ldrh	r3, [r7, #2]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f810 	bl	8001c40 <Delay_us>
	HAL_GPIO_WritePin (stepperx->GPIOx, stepperx->STP_PIN, 0); /**< Set the step pin low */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	891b      	ldrh	r3, [r3, #8]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f000 fe32 	bl	8002894 <HAL_GPIO_WritePin>
	Delay_us(speed);/**< Delay to control the speed */
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 f804 	bl	8001c40 <Delay_us>

}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <Delay_us>:
  * @brief Delays the program execution for a specified number of microseconds.
  *
  * @param us Number of microseconds to delay
  */
void Delay_us(uint32_t us)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
    uint32_t startTick = SysTick->VAL;
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <Delay_us+0x70>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	617b      	str	r3, [r7, #20]
    uint32_t ticks = us * (SystemCoreClock / 1000000);
 8001c4e:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <Delay_us+0x74>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a19      	ldr	r2, [pc, #100]	@ (8001cb8 <Delay_us+0x78>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	0c9a      	lsrs	r2, r3, #18
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	60fb      	str	r3, [r7, #12]
    uint32_t elapsedTicks = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
    uint32_t currentTick;

    do
    {
        currentTick = SysTick->VAL;
 8001c66:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <Delay_us+0x70>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	60bb      	str	r3, [r7, #8]
        if (currentTick <= startTick)
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d806      	bhi.n	8001c82 <Delay_us+0x42>
        {
            elapsedTicks += startTick - currentTick;
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	e009      	b.n	8001c96 <Delay_us+0x56>
        }
        else
        {
            elapsedTicks += startTick + (SysTick->LOAD + 1 - currentTick);
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <Delay_us+0x70>)
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	1ad2      	subs	r2, r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3301      	adds	r3, #1
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4413      	add	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        }
        startTick = currentTick;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	617b      	str	r3, [r7, #20]
    } while (elapsedTicks < ticks);
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d3e1      	bcc.n	8001c66 <Delay_us+0x26>
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	371c      	adds	r7, #28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000e010 	.word	0xe000e010
 8001cb4:	20000004 	.word	0x20000004
 8001cb8:	431bde83 	.word	0x431bde83

08001cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	4a0f      	ldr	r2, [pc, #60]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	4a08      	ldr	r2, [pc, #32]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_MspInit+0x4c>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1c:	d10d      	bne.n	8001d3a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b09      	ldr	r3, [pc, #36]	@ (8001d48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	4a08      	ldr	r2, [pc, #32]	@ (8001d48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800

08001d4c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08a      	sub	sp, #40	@ 0x28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 0314 	add.w	r3, r7, #20
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1d      	ldr	r2, [pc, #116]	@ (8001de0 <HAL_TIM_IC_MspInit+0x94>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d133      	bne.n	8001dd6 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b1c      	ldr	r3, [pc, #112]	@ (8001de4 <HAL_TIM_IC_MspInit+0x98>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	4a1b      	ldr	r2, [pc, #108]	@ (8001de4 <HAL_TIM_IC_MspInit+0x98>)
 8001d78:	f043 0304 	orr.w	r3, r3, #4
 8001d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7e:	4b19      	ldr	r3, [pc, #100]	@ (8001de4 <HAL_TIM_IC_MspInit+0x98>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <HAL_TIM_IC_MspInit+0x98>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a14      	ldr	r2, [pc, #80]	@ (8001de4 <HAL_TIM_IC_MspInit+0x98>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_TIM_IC_MspInit+0x98>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001da6:	2340      	movs	r3, #64	@ 0x40
 8001da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001db6:	2302      	movs	r3, #2
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 0314 	add.w	r3, r7, #20
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4809      	ldr	r0, [pc, #36]	@ (8001de8 <HAL_TIM_IC_MspInit+0x9c>)
 8001dc2:	f000 fbcb 	bl	800255c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	201e      	movs	r0, #30
 8001dcc:	f000 fafd 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dd0:	201e      	movs	r0, #30
 8001dd2:	f000 fb16 	bl	8002402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	@ 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40000800 	.word	0x40000800
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020400 	.word	0x40020400

08001dec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e0c:	d11d      	bne.n	8001e4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	4b10      	ldr	r3, [pc, #64]	@ (8001e54 <HAL_TIM_MspPostInit+0x68>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a0f      	ldr	r2, [pc, #60]	@ (8001e54 <HAL_TIM_MspPostInit+0x68>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e54 <HAL_TIM_MspPostInit+0x68>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	4619      	mov	r1, r3
 8001e44:	4804      	ldr	r0, [pc, #16]	@ (8001e58 <HAL_TIM_MspPostInit+0x6c>)
 8001e46:	f000 fb89 	bl	800255c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40020000 	.word	0x40020000

08001e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08c      	sub	sp, #48	@ 0x30
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 031c 	add.w	r3, r7, #28
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a37      	ldr	r2, [pc, #220]	@ (8001f58 <HAL_UART_MspInit+0xfc>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d135      	bne.n	8001eea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	4b36      	ldr	r3, [pc, #216]	@ (8001f5c <HAL_UART_MspInit+0x100>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	4a35      	ldr	r2, [pc, #212]	@ (8001f5c <HAL_UART_MspInit+0x100>)
 8001e88:	f043 0310 	orr.w	r3, r3, #16
 8001e8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e8e:	4b33      	ldr	r3, [pc, #204]	@ (8001f5c <HAL_UART_MspInit+0x100>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f5c <HAL_UART_MspInit+0x100>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f5c <HAL_UART_MspInit+0x100>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8001f5c <HAL_UART_MspInit+0x100>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001eb6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ec8:	2307      	movs	r3, #7
 8001eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4823      	ldr	r0, [pc, #140]	@ (8001f60 <HAL_UART_MspInit+0x104>)
 8001ed4:	f000 fb42 	bl	800255c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	2025      	movs	r0, #37	@ 0x25
 8001ede:	f000 fa74 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ee2:	2025      	movs	r0, #37	@ 0x25
 8001ee4:	f000 fa8d 	bl	8002402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ee8:	e031      	b.n	8001f4e <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART6)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1d      	ldr	r2, [pc, #116]	@ (8001f64 <HAL_UART_MspInit+0x108>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d12c      	bne.n	8001f4e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	4b18      	ldr	r3, [pc, #96]	@ (8001f5c <HAL_UART_MspInit+0x100>)
 8001efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efc:	4a17      	ldr	r2, [pc, #92]	@ (8001f5c <HAL_UART_MspInit+0x100>)
 8001efe:	f043 0320 	orr.w	r3, r3, #32
 8001f02:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f04:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <HAL_UART_MspInit+0x100>)
 8001f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f08:	f003 0320 	and.w	r3, r3, #32
 8001f0c:	613b      	str	r3, [r7, #16]
 8001f0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	4b11      	ldr	r3, [pc, #68]	@ (8001f5c <HAL_UART_MspInit+0x100>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	4a10      	ldr	r2, [pc, #64]	@ (8001f5c <HAL_UART_MspInit+0x100>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f20:	4b0e      	ldr	r3, [pc, #56]	@ (8001f5c <HAL_UART_MspInit+0x100>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f2c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f3e:	2308      	movs	r3, #8
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	4805      	ldr	r0, [pc, #20]	@ (8001f60 <HAL_UART_MspInit+0x104>)
 8001f4a:	f000 fb07 	bl	800255c <HAL_GPIO_Init>
}
 8001f4e:	bf00      	nop
 8001f50:	3730      	adds	r7, #48	@ 0x30
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40011000 	.word	0x40011000
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020000 	.word	0x40020000
 8001f64:	40011400 	.word	0x40011400

08001f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <NMI_Handler+0x4>

08001f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <HardFault_Handler+0x4>

08001f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <MemManage_Handler+0x4>

08001f80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <BusFault_Handler+0x4>

08001f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <UsageFault_Handler+0x4>

08001f90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fbe:	f000 f909 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fcc:	4802      	ldr	r0, [pc, #8]	@ (8001fd8 <TIM4_IRQHandler+0x10>)
 8001fce:	f001 fb97 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200000c4 	.word	0x200000c4

08001fdc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <USART1_IRQHandler+0x10>)
 8001fe2:	f002 fb25 	bl	8004630 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2000010c 	.word	0x2000010c

08001ff0 <Switch_init>:
  *
  * @param switchx Pointer to the SwitchX structure
  * @param GPIO GPIO port
  * @param PIN GPIO pin
  */
void Switch_init(SwitchX* switchx, GPIO_TypeDef* GPIO, uint16_t PIN) {
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	80fb      	strh	r3, [r7, #6]
    switchx->GPIOx = GPIO;     /**< Assign the GPIO port */
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	68ba      	ldr	r2, [r7, #8]
 8002002:	601a      	str	r2, [r3, #0]
    switchx->PIN   = PIN;      /**< Assign the GPIO pin */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	88fa      	ldrh	r2, [r7, #6]
 8002008:	809a      	strh	r2, [r3, #4]
    switchx->status= 0;        /**< Initialize the status to 0 */
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	80da      	strh	r2, [r3, #6]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <Switch_getStatus>:
  * @brief Gets the status of the switch.
  *
  * @param switchx Pointer to the SwitchX structure
  * @return uint8_t Status of the switch (1 if pressed, 0 if not pressed)
  */
uint8_t Switch_getStatus(SwitchX* switchx) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	switchx->status = HAL_GPIO_ReadPin(switchx->GPIOx, switchx->PIN);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	889b      	ldrh	r3, [r3, #4]
 800202c:	4619      	mov	r1, r3
 800202e:	4610      	mov	r0, r2
 8002030:	f000 fc18 	bl	8002864 <HAL_GPIO_ReadPin>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	80da      	strh	r2, [r3, #6]
	return switchx->status;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	88db      	ldrh	r3, [r3, #6]
 8002040:	b2db      	uxtb	r3, r3
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002054:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <_sbrk+0x5c>)
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <_sbrk+0x60>)
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002060:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <_sbrk+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <_sbrk+0x64>)
 800206a:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <_sbrk+0x68>)
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	429a      	cmp	r2, r3
 800207a:	d207      	bcs.n	800208c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800207c:	f003 fa6a 	bl	8005554 <__errno>
 8002080:	4603      	mov	r3, r0
 8002082:	220c      	movs	r2, #12
 8002084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	e009      	b.n	80020a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800208c:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002092:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	4a05      	ldr	r2, [pc, #20]	@ (80020b0 <_sbrk+0x64>)
 800209c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209e:	68fb      	ldr	r3, [r7, #12]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20020000 	.word	0x20020000
 80020ac:	00000400 	.word	0x00000400
 80020b0:	200001dc 	.word	0x200001dc
 80020b4:	20000330 	.word	0x20000330

080020b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <SystemInit+0x20>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c2:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <SystemInit+0x20>)
 80020c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002114 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020e0:	f7ff ffea 	bl	80020b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e4:	480c      	ldr	r0, [pc, #48]	@ (8002118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020e6:	490d      	ldr	r1, [pc, #52]	@ (800211c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210a:	f003 fa29 	bl	8005560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210e:	f7fe ff23 	bl	8000f58 <main>
  bx  lr    
 8002112:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002120:	08005ec8 	.word	0x08005ec8
  ldr r2, =_sbss
 8002124:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002128:	2000032c 	.word	0x2000032c

0800212c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002134:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0d      	ldr	r2, [pc, #52]	@ (8002170 <HAL_Init+0x40>)
 800213a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800213e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <HAL_Init+0x40>)
 8002146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800214a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800214c:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a07      	ldr	r2, [pc, #28]	@ (8002170 <HAL_Init+0x40>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f000 f92b 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215e:	200f      	movs	r0, #15
 8002160:	f000 f808 	bl	8002174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002164:	f7ff fdaa 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800217c:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <HAL_InitTick+0x54>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b12      	ldr	r3, [pc, #72]	@ (80021cc <HAL_InitTick+0x58>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800218a:	fbb3 f3f1 	udiv	r3, r3, r1
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f943 	bl	800241e <HAL_SYSTICK_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e00e      	b.n	80021c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d80a      	bhi.n	80021be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f000 f90b 	bl	80023ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b4:	4a06      	ldr	r2, [pc, #24]	@ (80021d0 <HAL_InitTick+0x5c>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e000      	b.n	80021c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000004 	.word	0x20000004
 80021cc:	2000000c 	.word	0x2000000c
 80021d0:	20000008 	.word	0x20000008

080021d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <HAL_IncTick+0x20>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <HAL_IncTick+0x24>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <HAL_IncTick+0x24>)
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	2000000c 	.word	0x2000000c
 80021f8:	200001e0 	.word	0x200001e0

080021fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <HAL_GetTick+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	200001e0 	.word	0x200001e0

08002214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800223c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002246:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60d3      	str	r3, [r2, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002260:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <__NVIC_GetPriorityGrouping+0x18>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0307 	and.w	r3, r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	2b00      	cmp	r3, #0
 8002288:	db0b      	blt.n	80022a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	4907      	ldr	r1, [pc, #28]	@ (80022b0 <__NVIC_EnableIRQ+0x38>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2001      	movs	r0, #1
 800229a:	fa00 f202 	lsl.w	r2, r0, r2
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	@ (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	@ (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	@ 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
         );
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	@ 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002380:	d301      	bcc.n	8002386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002382:	2301      	movs	r3, #1
 8002384:	e00f      	b.n	80023a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002386:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <SysTick_Config+0x40>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238e:	210f      	movs	r1, #15
 8002390:	f04f 30ff 	mov.w	r0, #4294967295
 8002394:	f7ff ff8e 	bl	80022b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <SysTick_Config+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239e:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <SysTick_Config+0x40>)
 80023a0:	2207      	movs	r2, #7
 80023a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000e010 	.word	0xe000e010

080023b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff29 	bl	8002214 <__NVIC_SetPriorityGrouping>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023dc:	f7ff ff3e 	bl	800225c <__NVIC_GetPriorityGrouping>
 80023e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	6978      	ldr	r0, [r7, #20]
 80023e8:	f7ff ff8e 	bl	8002308 <NVIC_EncodePriority>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff5d 	bl	80022b4 <__NVIC_SetPriority>
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff31 	bl	8002278 <__NVIC_EnableIRQ>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ffa2 	bl	8002370 <SysTick_Config>
 800242c:	4603      	mov	r3, r0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002444:	f7ff feda 	bl	80021fc <HAL_GetTick>
 8002448:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d008      	beq.n	8002468 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2280      	movs	r2, #128	@ 0x80
 800245a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e052      	b.n	800250e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0216 	bic.w	r2, r2, #22
 8002476:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	695a      	ldr	r2, [r3, #20]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002486:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	2b00      	cmp	r3, #0
 800248e:	d103      	bne.n	8002498 <HAL_DMA_Abort+0x62>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0208 	bic.w	r2, r2, #8
 80024a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0201 	bic.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b8:	e013      	b.n	80024e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ba:	f7ff fe9f 	bl	80021fc <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b05      	cmp	r3, #5
 80024c6:	d90c      	bls.n	80024e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2203      	movs	r2, #3
 80024d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e015      	b.n	800250e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e4      	bne.n	80024ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f4:	223f      	movs	r2, #63	@ 0x3f
 80024f6:	409a      	lsls	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d004      	beq.n	8002534 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2280      	movs	r2, #128	@ 0x80
 800252e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e00c      	b.n	800254e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2205      	movs	r2, #5
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 0201 	bic.w	r2, r2, #1
 800254a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b089      	sub	sp, #36	@ 0x24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
 8002576:	e159      	b.n	800282c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002578:	2201      	movs	r2, #1
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	429a      	cmp	r2, r3
 8002592:	f040 8148 	bne.w	8002826 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d005      	beq.n	80025ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d130      	bne.n	8002610 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	2203      	movs	r2, #3
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025e4:	2201      	movs	r2, #1
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 0201 	and.w	r2, r3, #1
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b03      	cmp	r3, #3
 800261a:	d017      	beq.n	800264c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	2203      	movs	r2, #3
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d123      	bne.n	80026a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	08da      	lsrs	r2, r3, #3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3208      	adds	r2, #8
 8002660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	220f      	movs	r2, #15
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	08da      	lsrs	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3208      	adds	r2, #8
 800269a:	69b9      	ldr	r1, [r7, #24]
 800269c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0203 	and.w	r2, r3, #3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f000 80a2 	beq.w	8002826 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	4b57      	ldr	r3, [pc, #348]	@ (8002844 <HAL_GPIO_Init+0x2e8>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	4a56      	ldr	r2, [pc, #344]	@ (8002844 <HAL_GPIO_Init+0x2e8>)
 80026ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f2:	4b54      	ldr	r3, [pc, #336]	@ (8002844 <HAL_GPIO_Init+0x2e8>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fe:	4a52      	ldr	r2, [pc, #328]	@ (8002848 <HAL_GPIO_Init+0x2ec>)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	3302      	adds	r3, #2
 8002706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	220f      	movs	r2, #15
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a49      	ldr	r2, [pc, #292]	@ (800284c <HAL_GPIO_Init+0x2f0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d019      	beq.n	800275e <HAL_GPIO_Init+0x202>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a48      	ldr	r2, [pc, #288]	@ (8002850 <HAL_GPIO_Init+0x2f4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_GPIO_Init+0x1fe>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a47      	ldr	r2, [pc, #284]	@ (8002854 <HAL_GPIO_Init+0x2f8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00d      	beq.n	8002756 <HAL_GPIO_Init+0x1fa>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a46      	ldr	r2, [pc, #280]	@ (8002858 <HAL_GPIO_Init+0x2fc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d007      	beq.n	8002752 <HAL_GPIO_Init+0x1f6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a45      	ldr	r2, [pc, #276]	@ (800285c <HAL_GPIO_Init+0x300>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d101      	bne.n	800274e <HAL_GPIO_Init+0x1f2>
 800274a:	2304      	movs	r3, #4
 800274c:	e008      	b.n	8002760 <HAL_GPIO_Init+0x204>
 800274e:	2307      	movs	r3, #7
 8002750:	e006      	b.n	8002760 <HAL_GPIO_Init+0x204>
 8002752:	2303      	movs	r3, #3
 8002754:	e004      	b.n	8002760 <HAL_GPIO_Init+0x204>
 8002756:	2302      	movs	r3, #2
 8002758:	e002      	b.n	8002760 <HAL_GPIO_Init+0x204>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_GPIO_Init+0x204>
 800275e:	2300      	movs	r3, #0
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	f002 0203 	and.w	r2, r2, #3
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	4093      	lsls	r3, r2
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002770:	4935      	ldr	r1, [pc, #212]	@ (8002848 <HAL_GPIO_Init+0x2ec>)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	089b      	lsrs	r3, r3, #2
 8002776:	3302      	adds	r3, #2
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800277e:	4b38      	ldr	r3, [pc, #224]	@ (8002860 <HAL_GPIO_Init+0x304>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	43db      	mvns	r3, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4013      	ands	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027cc:	4a24      	ldr	r2, [pc, #144]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027d2:	4b23      	ldr	r3, [pc, #140]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	43db      	mvns	r3, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4013      	ands	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027f6:	4a1a      	ldr	r2, [pc, #104]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027fc:	4b18      	ldr	r3, [pc, #96]	@ (8002860 <HAL_GPIO_Init+0x304>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002820:	4a0f      	ldr	r2, [pc, #60]	@ (8002860 <HAL_GPIO_Init+0x304>)
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3301      	adds	r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	2b0f      	cmp	r3, #15
 8002830:	f67f aea2 	bls.w	8002578 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3724      	adds	r7, #36	@ 0x24
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	40013800 	.word	0x40013800
 800284c:	40020000 	.word	0x40020000
 8002850:	40020400 	.word	0x40020400
 8002854:	40020800 	.word	0x40020800
 8002858:	40020c00 	.word	0x40020c00
 800285c:	40021000 	.word	0x40021000
 8002860:	40013c00 	.word	0x40013c00

08002864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
 8002880:	e001      	b.n	8002886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002886:	7bfb      	ldrb	r3, [r7, #15]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a4:	787b      	ldrb	r3, [r7, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028aa:	887a      	ldrh	r2, [r7, #2]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028b0:	e003      	b.n	80028ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028b2:	887b      	ldrh	r3, [r7, #2]
 80028b4:	041a      	lsls	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	619a      	str	r2, [r3, #24]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e267      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d075      	beq.n	80029d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028e6:	4b88      	ldr	r3, [pc, #544]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d00c      	beq.n	800290c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f2:	4b85      	ldr	r3, [pc, #532]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d112      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fe:	4b82      	ldr	r3, [pc, #520]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800290a:	d10b      	bne.n	8002924 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	4b7e      	ldr	r3, [pc, #504]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d05b      	beq.n	80029d0 <HAL_RCC_OscConfig+0x108>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d157      	bne.n	80029d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e242      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800292c:	d106      	bne.n	800293c <HAL_RCC_OscConfig+0x74>
 800292e:	4b76      	ldr	r3, [pc, #472]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a75      	ldr	r2, [pc, #468]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e01d      	b.n	8002978 <HAL_RCC_OscConfig+0xb0>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0x98>
 8002946:	4b70      	ldr	r3, [pc, #448]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a6f      	ldr	r2, [pc, #444]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b6d      	ldr	r3, [pc, #436]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6c      	ldr	r2, [pc, #432]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0xb0>
 8002960:	4b69      	ldr	r3, [pc, #420]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a68      	ldr	r2, [pc, #416]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b66      	ldr	r3, [pc, #408]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a65      	ldr	r2, [pc, #404]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff fc3c 	bl	80021fc <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002988:	f7ff fc38 	bl	80021fc <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	@ 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e207      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b5b      	ldr	r3, [pc, #364]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0xc0>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff fc28 	bl	80021fc <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029b0:	f7ff fc24 	bl	80021fc <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	@ 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e1f3      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	4b51      	ldr	r3, [pc, #324]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0xe8>
 80029ce:	e000      	b.n	80029d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d063      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029de:	4b4a      	ldr	r3, [pc, #296]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00b      	beq.n	8002a02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ea:	4b47      	ldr	r3, [pc, #284]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d11c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029f6:	4b44      	ldr	r3, [pc, #272]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d116      	bne.n	8002a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a02:	4b41      	ldr	r3, [pc, #260]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_RCC_OscConfig+0x152>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d001      	beq.n	8002a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e1c7      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4937      	ldr	r1, [pc, #220]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a2e:	e03a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a38:	4b34      	ldr	r3, [pc, #208]	@ (8002b0c <HAL_RCC_OscConfig+0x244>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7ff fbdd 	bl	80021fc <HAL_GetTick>
 8002a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a46:	f7ff fbd9 	bl	80021fc <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e1a8      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a58:	4b2b      	ldr	r3, [pc, #172]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a64:	4b28      	ldr	r3, [pc, #160]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4925      	ldr	r1, [pc, #148]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	600b      	str	r3, [r1, #0]
 8002a78:	e015      	b.n	8002aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a7a:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <HAL_RCC_OscConfig+0x244>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7ff fbbc 	bl	80021fc <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a88:	f7ff fbb8 	bl	80021fc <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e187      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d036      	beq.n	8002b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d016      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aba:	4b15      	ldr	r3, [pc, #84]	@ (8002b10 <HAL_RCC_OscConfig+0x248>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7ff fb9c 	bl	80021fc <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac8:	f7ff fb98 	bl	80021fc <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e167      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ada:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_RCC_OscConfig+0x240>)
 8002adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x200>
 8002ae6:	e01b      	b.n	8002b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae8:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <HAL_RCC_OscConfig+0x248>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aee:	f7ff fb85 	bl	80021fc <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af4:	e00e      	b.n	8002b14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af6:	f7ff fb81 	bl	80021fc <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d907      	bls.n	8002b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e150      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	42470000 	.word	0x42470000
 8002b10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b14:	4b88      	ldr	r3, [pc, #544]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1ea      	bne.n	8002af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 8097 	beq.w	8002c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b32:	4b81      	ldr	r3, [pc, #516]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10f      	bne.n	8002b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]
 8002b42:	4b7d      	ldr	r3, [pc, #500]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	4a7c      	ldr	r2, [pc, #496]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5e:	4b77      	ldr	r3, [pc, #476]	@ (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d118      	bne.n	8002b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b6a:	4b74      	ldr	r3, [pc, #464]	@ (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a73      	ldr	r2, [pc, #460]	@ (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b76:	f7ff fb41 	bl	80021fc <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b7e:	f7ff fb3d 	bl	80021fc <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e10c      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b90:	4b6a      	ldr	r3, [pc, #424]	@ (8002d3c <HAL_RCC_OscConfig+0x474>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f0      	beq.n	8002b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d106      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x2ea>
 8002ba4:	4b64      	ldr	r3, [pc, #400]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba8:	4a63      	ldr	r2, [pc, #396]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb0:	e01c      	b.n	8002bec <HAL_RCC_OscConfig+0x324>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x30c>
 8002bba:	4b5f      	ldr	r3, [pc, #380]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bbe:	4a5e      	ldr	r2, [pc, #376]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bca:	4a5b      	ldr	r2, [pc, #364]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd2:	e00b      	b.n	8002bec <HAL_RCC_OscConfig+0x324>
 8002bd4:	4b58      	ldr	r3, [pc, #352]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd8:	4a57      	ldr	r2, [pc, #348]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002bda:	f023 0301 	bic.w	r3, r3, #1
 8002bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be0:	4b55      	ldr	r3, [pc, #340]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be4:	4a54      	ldr	r2, [pc, #336]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002be6:	f023 0304 	bic.w	r3, r3, #4
 8002bea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d015      	beq.n	8002c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf4:	f7ff fb02 	bl	80021fc <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfa:	e00a      	b.n	8002c12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bfc:	f7ff fafe 	bl	80021fc <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e0cb      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	4b49      	ldr	r3, [pc, #292]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0ee      	beq.n	8002bfc <HAL_RCC_OscConfig+0x334>
 8002c1e:	e014      	b.n	8002c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c20:	f7ff faec 	bl	80021fc <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f7ff fae8 	bl	80021fc <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e0b5      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1ee      	bne.n	8002c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c50:	4b39      	ldr	r3, [pc, #228]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	4a38      	ldr	r2, [pc, #224]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80a1 	beq.w	8002da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c66:	4b34      	ldr	r3, [pc, #208]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d05c      	beq.n	8002d2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d141      	bne.n	8002cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7a:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff fabc 	bl	80021fc <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c88:	f7ff fab8 	bl	80021fc <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e087      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9a:	4b27      	ldr	r3, [pc, #156]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	019b      	lsls	r3, r3, #6
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbc:	085b      	lsrs	r3, r3, #1
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	041b      	lsls	r3, r3, #16
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	061b      	lsls	r3, r3, #24
 8002cca:	491b      	ldr	r1, [pc, #108]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd6:	f7ff fa91 	bl	80021fc <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cde:	f7ff fa8d 	bl	80021fc <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e05c      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf0:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x416>
 8002cfc:	e054      	b.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <HAL_RCC_OscConfig+0x478>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7ff fa7a 	bl	80021fc <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0c:	f7ff fa76 	bl	80021fc <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e045      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <HAL_RCC_OscConfig+0x470>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x444>
 8002d2a:	e03d      	b.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d107      	bne.n	8002d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e038      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d44:	4b1b      	ldr	r3, [pc, #108]	@ (8002db4 <HAL_RCC_OscConfig+0x4ec>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d028      	beq.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d121      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d11a      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d111      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800

08002db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0cc      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dcc:	4b68      	ldr	r3, [pc, #416]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d90c      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dda:	4b65      	ldr	r3, [pc, #404]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b63      	ldr	r3, [pc, #396]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b8      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e0c:	4b59      	ldr	r3, [pc, #356]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4a58      	ldr	r2, [pc, #352]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e24:	4b53      	ldr	r3, [pc, #332]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a52      	ldr	r2, [pc, #328]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b50      	ldr	r3, [pc, #320]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	494d      	ldr	r1, [pc, #308]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d044      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b47      	ldr	r3, [pc, #284]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d119      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e07f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d003      	beq.n	8002e76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e72:	2b03      	cmp	r3, #3
 8002e74:	d107      	bne.n	8002e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e76:	4b3f      	ldr	r3, [pc, #252]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e06f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e86:	4b3b      	ldr	r3, [pc, #236]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e067      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e96:	4b37      	ldr	r3, [pc, #220]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	4934      	ldr	r1, [pc, #208]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea8:	f7ff f9a8 	bl	80021fc <HAL_GetTick>
 8002eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7ff f9a4 	bl	80021fc <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e04f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 020c 	and.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1eb      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b25      	ldr	r3, [pc, #148]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d20c      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b22      	ldr	r3, [pc, #136]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b20      	ldr	r3, [pc, #128]	@ (8002f70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e032      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b19      	ldr	r3, [pc, #100]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4916      	ldr	r1, [pc, #88]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f2a:	4b12      	ldr	r3, [pc, #72]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	490e      	ldr	r1, [pc, #56]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f3e:	f000 f821 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490a      	ldr	r1, [pc, #40]	@ (8002f78 <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	4a09      	ldr	r2, [pc, #36]	@ (8002f7c <HAL_RCC_ClockConfig+0x1c4>)
 8002f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f5a:	4b09      	ldr	r3, [pc, #36]	@ (8002f80 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff f908 	bl	8002174 <HAL_InitTick>

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023c00 	.word	0x40023c00
 8002f74:	40023800 	.word	0x40023800
 8002f78:	08005e6c 	.word	0x08005e6c
 8002f7c:	20000004 	.word	0x20000004
 8002f80:	20000008 	.word	0x20000008

08002f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f88:	b090      	sub	sp, #64	@ 0x40
 8002f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f90:	2300      	movs	r3, #0
 8002f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f94:	2300      	movs	r3, #0
 8002f96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f9c:	4b59      	ldr	r3, [pc, #356]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 030c 	and.w	r3, r3, #12
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d00d      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	f200 80a1 	bhi.w	80030f0 <HAL_RCC_GetSysClockFreq+0x16c>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d003      	beq.n	8002fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8002fb6:	e09b      	b.n	80030f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fb8:	4b53      	ldr	r3, [pc, #332]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x184>)
 8002fba:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002fbc:	e09b      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fbe:	4b53      	ldr	r3, [pc, #332]	@ (800310c <HAL_RCC_GetSysClockFreq+0x188>)
 8002fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002fc2:	e098      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fc4:	4b4f      	ldr	r3, [pc, #316]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fcc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fce:	4b4d      	ldr	r3, [pc, #308]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d028      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fda:	4b4a      	ldr	r3, [pc, #296]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	623b      	str	r3, [r7, #32]
 8002fe4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002fe6:	6a3b      	ldr	r3, [r7, #32]
 8002fe8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fec:	2100      	movs	r1, #0
 8002fee:	4b47      	ldr	r3, [pc, #284]	@ (800310c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ff0:	fb03 f201 	mul.w	r2, r3, r1
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	fb00 f303 	mul.w	r3, r0, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a43      	ldr	r2, [pc, #268]	@ (800310c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ffe:	fba0 1202 	umull	r1, r2, r0, r2
 8003002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003004:	460a      	mov	r2, r1
 8003006:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800300a:	4413      	add	r3, r2
 800300c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800300e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003010:	2200      	movs	r2, #0
 8003012:	61bb      	str	r3, [r7, #24]
 8003014:	61fa      	str	r2, [r7, #28]
 8003016:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800301a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800301e:	f7fd fd55 	bl	8000acc <__aeabi_uldivmod>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4613      	mov	r3, r2
 8003028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800302a:	e053      	b.n	80030d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302c:	4b35      	ldr	r3, [pc, #212]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	2200      	movs	r2, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	617a      	str	r2, [r7, #20]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800303e:	f04f 0b00 	mov.w	fp, #0
 8003042:	4652      	mov	r2, sl
 8003044:	465b      	mov	r3, fp
 8003046:	f04f 0000 	mov.w	r0, #0
 800304a:	f04f 0100 	mov.w	r1, #0
 800304e:	0159      	lsls	r1, r3, #5
 8003050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003054:	0150      	lsls	r0, r2, #5
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	ebb2 080a 	subs.w	r8, r2, sl
 800305e:	eb63 090b 	sbc.w	r9, r3, fp
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800306e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003072:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003076:	ebb2 0408 	subs.w	r4, r2, r8
 800307a:	eb63 0509 	sbc.w	r5, r3, r9
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	00eb      	lsls	r3, r5, #3
 8003088:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800308c:	00e2      	lsls	r2, r4, #3
 800308e:	4614      	mov	r4, r2
 8003090:	461d      	mov	r5, r3
 8003092:	eb14 030a 	adds.w	r3, r4, sl
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	eb45 030b 	adc.w	r3, r5, fp
 800309c:	607b      	str	r3, [r7, #4]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f04f 0300 	mov.w	r3, #0
 80030a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030aa:	4629      	mov	r1, r5
 80030ac:	028b      	lsls	r3, r1, #10
 80030ae:	4621      	mov	r1, r4
 80030b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030b4:	4621      	mov	r1, r4
 80030b6:	028a      	lsls	r2, r1, #10
 80030b8:	4610      	mov	r0, r2
 80030ba:	4619      	mov	r1, r3
 80030bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030be:	2200      	movs	r2, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	60fa      	str	r2, [r7, #12]
 80030c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030c8:	f7fd fd00 	bl	8000acc <__aeabi_uldivmod>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4613      	mov	r3, r2
 80030d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x180>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	0c1b      	lsrs	r3, r3, #16
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	3301      	adds	r3, #1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80030e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030ee:	e002      	b.n	80030f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <HAL_RCC_GetSysClockFreq+0x184>)
 80030f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3740      	adds	r7, #64	@ 0x40
 80030fc:	46bd      	mov	sp, r7
 80030fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003102:	bf00      	nop
 8003104:	40023800 	.word	0x40023800
 8003108:	00f42400 	.word	0x00f42400
 800310c:	017d7840 	.word	0x017d7840

08003110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003114:	4b03      	ldr	r3, [pc, #12]	@ (8003124 <HAL_RCC_GetHCLKFreq+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000004 	.word	0x20000004

08003128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800312c:	f7ff fff0 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003130:	4602      	mov	r2, r0
 8003132:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	0a9b      	lsrs	r3, r3, #10
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	4903      	ldr	r1, [pc, #12]	@ (800314c <HAL_RCC_GetPCLK1Freq+0x24>)
 800313e:	5ccb      	ldrb	r3, [r1, r3]
 8003140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	08005e7c 	.word	0x08005e7c

08003150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003154:	f7ff ffdc 	bl	8003110 <HAL_RCC_GetHCLKFreq>
 8003158:	4602      	mov	r2, r0
 800315a:	4b05      	ldr	r3, [pc, #20]	@ (8003170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	0b5b      	lsrs	r3, r3, #13
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	4903      	ldr	r1, [pc, #12]	@ (8003174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003166:	5ccb      	ldrb	r3, [r1, r3]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40023800 	.word	0x40023800
 8003174:	08005e7c 	.word	0x08005e7c

08003178 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d001      	beq.n	8003190 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e03c      	b.n	800320a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a1e      	ldr	r2, [pc, #120]	@ (8003218 <HAL_TIM_Base_Start+0xa0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d018      	beq.n	80031d4 <HAL_TIM_Base_Start+0x5c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031aa:	d013      	beq.n	80031d4 <HAL_TIM_Base_Start+0x5c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1a      	ldr	r2, [pc, #104]	@ (800321c <HAL_TIM_Base_Start+0xa4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00e      	beq.n	80031d4 <HAL_TIM_Base_Start+0x5c>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a19      	ldr	r2, [pc, #100]	@ (8003220 <HAL_TIM_Base_Start+0xa8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d009      	beq.n	80031d4 <HAL_TIM_Base_Start+0x5c>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a17      	ldr	r2, [pc, #92]	@ (8003224 <HAL_TIM_Base_Start+0xac>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_TIM_Base_Start+0x5c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a16      	ldr	r2, [pc, #88]	@ (8003228 <HAL_TIM_Base_Start+0xb0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d111      	bne.n	80031f8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b06      	cmp	r3, #6
 80031e4:	d010      	beq.n	8003208 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f042 0201 	orr.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031f6:	e007      	b.n	8003208 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40010000 	.word	0x40010000
 800321c:	40000400 	.word	0x40000400
 8003220:	40000800 	.word	0x40000800
 8003224:	40000c00 	.word	0x40000c00
 8003228:	40014000 	.word	0x40014000

0800322c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e041      	b.n	80032c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fe fd5a 	bl	8001d0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2202      	movs	r2, #2
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3304      	adds	r3, #4
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f000 fd02 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d109      	bne.n	80032f0 <HAL_TIM_PWM_Start+0x24>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e022      	b.n	8003336 <HAL_TIM_PWM_Start+0x6a>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d109      	bne.n	800330a <HAL_TIM_PWM_Start+0x3e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	bf14      	ite	ne
 8003302:	2301      	movne	r3, #1
 8003304:	2300      	moveq	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e015      	b.n	8003336 <HAL_TIM_PWM_Start+0x6a>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d109      	bne.n	8003324 <HAL_TIM_PWM_Start+0x58>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e008      	b.n	8003336 <HAL_TIM_PWM_Start+0x6a>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e068      	b.n	8003410 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start+0x82>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800334c:	e013      	b.n	8003376 <HAL_TIM_PWM_Start+0xaa>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Start+0x92>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800335c:	e00b      	b.n	8003376 <HAL_TIM_PWM_Start+0xaa>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Start+0xa2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800336c:	e003      	b.n	8003376 <HAL_TIM_PWM_Start+0xaa>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2201      	movs	r2, #1
 800337c:	6839      	ldr	r1, [r7, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 ffae 	bl	80042e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a23      	ldr	r2, [pc, #140]	@ (8003418 <HAL_TIM_PWM_Start+0x14c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d107      	bne.n	800339e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800339c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003418 <HAL_TIM_PWM_Start+0x14c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d018      	beq.n	80033da <HAL_TIM_PWM_Start+0x10e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b0:	d013      	beq.n	80033da <HAL_TIM_PWM_Start+0x10e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a19      	ldr	r2, [pc, #100]	@ (800341c <HAL_TIM_PWM_Start+0x150>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00e      	beq.n	80033da <HAL_TIM_PWM_Start+0x10e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a17      	ldr	r2, [pc, #92]	@ (8003420 <HAL_TIM_PWM_Start+0x154>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_TIM_PWM_Start+0x10e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a16      	ldr	r2, [pc, #88]	@ (8003424 <HAL_TIM_PWM_Start+0x158>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_TIM_PWM_Start+0x10e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a14      	ldr	r2, [pc, #80]	@ (8003428 <HAL_TIM_PWM_Start+0x15c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d111      	bne.n	80033fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b06      	cmp	r3, #6
 80033ea:	d010      	beq.n	800340e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0201 	orr.w	r2, r2, #1
 80033fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fc:	e007      	b.n	800340e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0201 	orr.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40010000 	.word	0x40010000
 800341c:	40000400 	.word	0x40000400
 8003420:	40000800 	.word	0x40000800
 8003424:	40000c00 	.word	0x40000c00
 8003428:	40014000 	.word	0x40014000

0800342c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e041      	b.n	80034c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fe fc7a 	bl	8001d4c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	4619      	mov	r1, r3
 800346a:	4610      	mov	r0, r2
 800346c:	f000 fc02 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
	...

080034cc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_TIM_IC_Start_IT+0x1e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e013      	b.n	8003512 <HAL_TIM_IC_Start_IT+0x46>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_IC_Start_IT+0x2e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_IC_Start_IT+0x46>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d104      	bne.n	800350a <HAL_TIM_IC_Start_IT+0x3e>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003506:	b2db      	uxtb	r3, r3
 8003508:	e003      	b.n	8003512 <HAL_TIM_IC_Start_IT+0x46>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003510:	b2db      	uxtb	r3, r3
 8003512:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_TIM_IC_Start_IT+0x58>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e013      	b.n	800354c <HAL_TIM_IC_Start_IT+0x80>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	2b04      	cmp	r3, #4
 8003528:	d104      	bne.n	8003534 <HAL_TIM_IC_Start_IT+0x68>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e00b      	b.n	800354c <HAL_TIM_IC_Start_IT+0x80>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b08      	cmp	r3, #8
 8003538:	d104      	bne.n	8003544 <HAL_TIM_IC_Start_IT+0x78>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003540:	b2db      	uxtb	r3, r3
 8003542:	e003      	b.n	800354c <HAL_TIM_IC_Start_IT+0x80>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800354a:	b2db      	uxtb	r3, r3
 800354c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800354e:	7bbb      	ldrb	r3, [r7, #14]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d102      	bne.n	800355a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003554:	7b7b      	ldrb	r3, [r7, #13]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d001      	beq.n	800355e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e0c2      	b.n	80036e4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d104      	bne.n	800356e <HAL_TIM_IC_Start_IT+0xa2>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800356c:	e013      	b.n	8003596 <HAL_TIM_IC_Start_IT+0xca>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d104      	bne.n	800357e <HAL_TIM_IC_Start_IT+0xb2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2202      	movs	r2, #2
 8003578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800357c:	e00b      	b.n	8003596 <HAL_TIM_IC_Start_IT+0xca>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b08      	cmp	r3, #8
 8003582:	d104      	bne.n	800358e <HAL_TIM_IC_Start_IT+0xc2>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800358c:	e003      	b.n	8003596 <HAL_TIM_IC_Start_IT+0xca>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d104      	bne.n	80035a6 <HAL_TIM_IC_Start_IT+0xda>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035a4:	e013      	b.n	80035ce <HAL_TIM_IC_Start_IT+0x102>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d104      	bne.n	80035b6 <HAL_TIM_IC_Start_IT+0xea>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035b4:	e00b      	b.n	80035ce <HAL_TIM_IC_Start_IT+0x102>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b08      	cmp	r3, #8
 80035ba:	d104      	bne.n	80035c6 <HAL_TIM_IC_Start_IT+0xfa>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035c4:	e003      	b.n	80035ce <HAL_TIM_IC_Start_IT+0x102>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	d841      	bhi.n	8003658 <HAL_TIM_IC_Start_IT+0x18c>
 80035d4:	a201      	add	r2, pc, #4	@ (adr r2, 80035dc <HAL_TIM_IC_Start_IT+0x110>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	08003611 	.word	0x08003611
 80035e0:	08003659 	.word	0x08003659
 80035e4:	08003659 	.word	0x08003659
 80035e8:	08003659 	.word	0x08003659
 80035ec:	08003623 	.word	0x08003623
 80035f0:	08003659 	.word	0x08003659
 80035f4:	08003659 	.word	0x08003659
 80035f8:	08003659 	.word	0x08003659
 80035fc:	08003635 	.word	0x08003635
 8003600:	08003659 	.word	0x08003659
 8003604:	08003659 	.word	0x08003659
 8003608:	08003659 	.word	0x08003659
 800360c:	08003647 	.word	0x08003647
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0202 	orr.w	r2, r2, #2
 800361e:	60da      	str	r2, [r3, #12]
      break;
 8003620:	e01d      	b.n	800365e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0204 	orr.w	r2, r2, #4
 8003630:	60da      	str	r2, [r3, #12]
      break;
 8003632:	e014      	b.n	800365e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0208 	orr.w	r2, r2, #8
 8003642:	60da      	str	r2, [r3, #12]
      break;
 8003644:	e00b      	b.n	800365e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0210 	orr.w	r2, r2, #16
 8003654:	60da      	str	r2, [r3, #12]
      break;
 8003656:	e002      	b.n	800365e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	bf00      	nop
  }

  if (status == HAL_OK)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d13e      	bne.n	80036e2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2201      	movs	r2, #1
 800366a:	6839      	ldr	r1, [r7, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fe37 	bl	80042e0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1d      	ldr	r2, [pc, #116]	@ (80036ec <HAL_TIM_IC_Start_IT+0x220>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d018      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0x1e2>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003684:	d013      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0x1e2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a19      	ldr	r2, [pc, #100]	@ (80036f0 <HAL_TIM_IC_Start_IT+0x224>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00e      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0x1e2>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a17      	ldr	r2, [pc, #92]	@ (80036f4 <HAL_TIM_IC_Start_IT+0x228>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0x1e2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a16      	ldr	r2, [pc, #88]	@ (80036f8 <HAL_TIM_IC_Start_IT+0x22c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d004      	beq.n	80036ae <HAL_TIM_IC_Start_IT+0x1e2>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a14      	ldr	r2, [pc, #80]	@ (80036fc <HAL_TIM_IC_Start_IT+0x230>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d111      	bne.n	80036d2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b06      	cmp	r3, #6
 80036be:	d010      	beq.n	80036e2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d0:	e007      	b.n	80036e2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40010000 	.word	0x40010000
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40014000 	.word	0x40014000

08003700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d020      	beq.n	8003764 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0202 	mvn.w	r2, #2
 8003734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fe f98a 	bl	8001a64 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fa70 	bl	8003c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fa77 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d020      	beq.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0204 	mvn.w	r2, #4
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f7fe f964 	bl	8001a64 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fa4a 	bl	8003c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fa51 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d020      	beq.n	80037fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01b      	beq.n	80037fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0208 	mvn.w	r2, #8
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2204      	movs	r2, #4
 80037d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fe f93e 	bl	8001a64 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 fa24 	bl	8003c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fa2b 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d020      	beq.n	8003848 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01b      	beq.n	8003848 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0210 	mvn.w	r2, #16
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2208      	movs	r2, #8
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7fe f918 	bl	8001a64 <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f9fe 	bl	8003c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fa05 	bl	8003c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0201 	mvn.w	r2, #1
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f9dc 	bl	8003c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fdc6 	bl	800441c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f9d6 	bl	8003c60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00c      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0220 	mvn.w	r2, #32
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fd98 	bl	8004408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e088      	b.n	8003a10 <HAL_TIM_IC_ConfigChannel+0x130>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11b      	bne.n	8003944 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800391c:	f000 fbc2 	bl	80040a4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 020c 	bic.w	r2, r2, #12
 800392e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6999      	ldr	r1, [r3, #24]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	619a      	str	r2, [r3, #24]
 8003942:	e060      	b.n	8003a06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b04      	cmp	r3, #4
 8003948:	d11c      	bne.n	8003984 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800395a:	f000 fc0b 	bl	8004174 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800396c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6999      	ldr	r1, [r3, #24]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	021a      	lsls	r2, r3, #8
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	430a      	orrs	r2, r1
 8003980:	619a      	str	r2, [r3, #24]
 8003982:	e040      	b.n	8003a06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b08      	cmp	r3, #8
 8003988:	d11b      	bne.n	80039c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800399a:	f000 fc28 	bl	80041ee <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	69da      	ldr	r2, [r3, #28]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 020c 	bic.w	r2, r2, #12
 80039ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69d9      	ldr	r1, [r3, #28]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	61da      	str	r2, [r3, #28]
 80039c0:	e021      	b.n	8003a06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b0c      	cmp	r3, #12
 80039c6:	d11c      	bne.n	8003a02 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80039d8:	f000 fc45 	bl	8004266 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	69da      	ldr	r2, [r3, #28]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80039ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69d9      	ldr	r1, [r3, #28]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	021a      	lsls	r2, r3, #8
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	61da      	str	r2, [r3, #28]
 8003a00:	e001      	b.n	8003a06 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e0ae      	b.n	8003b94 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b0c      	cmp	r3, #12
 8003a42:	f200 809f 	bhi.w	8003b84 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003a46:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4c:	08003a81 	.word	0x08003a81
 8003a50:	08003b85 	.word	0x08003b85
 8003a54:	08003b85 	.word	0x08003b85
 8003a58:	08003b85 	.word	0x08003b85
 8003a5c:	08003ac1 	.word	0x08003ac1
 8003a60:	08003b85 	.word	0x08003b85
 8003a64:	08003b85 	.word	0x08003b85
 8003a68:	08003b85 	.word	0x08003b85
 8003a6c:	08003b03 	.word	0x08003b03
 8003a70:	08003b85 	.word	0x08003b85
 8003a74:	08003b85 	.word	0x08003b85
 8003a78:	08003b85 	.word	0x08003b85
 8003a7c:	08003b43 	.word	0x08003b43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 f980 	bl	8003d8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0208 	orr.w	r2, r2, #8
 8003a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0204 	bic.w	r2, r2, #4
 8003aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6999      	ldr	r1, [r3, #24]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	619a      	str	r2, [r3, #24]
      break;
 8003abe:	e064      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 f9c6 	bl	8003e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6999      	ldr	r1, [r3, #24]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	619a      	str	r2, [r3, #24]
      break;
 8003b00:	e043      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68b9      	ldr	r1, [r7, #8]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 fa11 	bl	8003f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f042 0208 	orr.w	r2, r2, #8
 8003b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0204 	bic.w	r2, r2, #4
 8003b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69d9      	ldr	r1, [r3, #28]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	61da      	str	r2, [r3, #28]
      break;
 8003b40:	e023      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 fa5b 	bl	8004004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	69d9      	ldr	r1, [r3, #28]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	021a      	lsls	r2, r3, #8
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	61da      	str	r2, [r3, #28]
      break;
 8003b82:	e002      	b.n	8003b8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	75fb      	strb	r3, [r7, #23]
      break;
 8003b88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	d831      	bhi.n	8003c14 <HAL_TIM_ReadCapturedValue+0x78>
 8003bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bed 	.word	0x08003bed
 8003bbc:	08003c15 	.word	0x08003c15
 8003bc0:	08003c15 	.word	0x08003c15
 8003bc4:	08003c15 	.word	0x08003c15
 8003bc8:	08003bf7 	.word	0x08003bf7
 8003bcc:	08003c15 	.word	0x08003c15
 8003bd0:	08003c15 	.word	0x08003c15
 8003bd4:	08003c15 	.word	0x08003c15
 8003bd8:	08003c01 	.word	0x08003c01
 8003bdc:	08003c15 	.word	0x08003c15
 8003be0:	08003c15 	.word	0x08003c15
 8003be4:	08003c15 	.word	0x08003c15
 8003be8:	08003c0b 	.word	0x08003c0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf2:	60fb      	str	r3, [r7, #12]

      break;
 8003bf4:	e00f      	b.n	8003c16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfc:	60fb      	str	r3, [r7, #12]

      break;
 8003bfe:	e00a      	b.n	8003c16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c06:	60fb      	str	r3, [r7, #12]

      break;
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c10:	60fb      	str	r3, [r7, #12]

      break;
 8003c12:	e000      	b.n	8003c16 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003c14:	bf00      	nop
  }

  return tmpreg;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a3a      	ldr	r2, [pc, #232]	@ (8003d70 <TIM_Base_SetConfig+0xfc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d00f      	beq.n	8003cac <TIM_Base_SetConfig+0x38>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c92:	d00b      	beq.n	8003cac <TIM_Base_SetConfig+0x38>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a37      	ldr	r2, [pc, #220]	@ (8003d74 <TIM_Base_SetConfig+0x100>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d007      	beq.n	8003cac <TIM_Base_SetConfig+0x38>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a36      	ldr	r2, [pc, #216]	@ (8003d78 <TIM_Base_SetConfig+0x104>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_Base_SetConfig+0x38>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a35      	ldr	r2, [pc, #212]	@ (8003d7c <TIM_Base_SetConfig+0x108>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d108      	bne.n	8003cbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a2b      	ldr	r2, [pc, #172]	@ (8003d70 <TIM_Base_SetConfig+0xfc>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d01b      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ccc:	d017      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a28      	ldr	r2, [pc, #160]	@ (8003d74 <TIM_Base_SetConfig+0x100>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a27      	ldr	r2, [pc, #156]	@ (8003d78 <TIM_Base_SetConfig+0x104>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00f      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a26      	ldr	r2, [pc, #152]	@ (8003d7c <TIM_Base_SetConfig+0x108>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00b      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a25      	ldr	r2, [pc, #148]	@ (8003d80 <TIM_Base_SetConfig+0x10c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d007      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a24      	ldr	r2, [pc, #144]	@ (8003d84 <TIM_Base_SetConfig+0x110>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d003      	beq.n	8003cfe <TIM_Base_SetConfig+0x8a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a23      	ldr	r2, [pc, #140]	@ (8003d88 <TIM_Base_SetConfig+0x114>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d108      	bne.n	8003d10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a0e      	ldr	r2, [pc, #56]	@ (8003d70 <TIM_Base_SetConfig+0xfc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d103      	bne.n	8003d44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d105      	bne.n	8003d62 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f023 0201 	bic.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	611a      	str	r2, [r3, #16]
  }
}
 8003d62:	bf00      	nop
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40014000 	.word	0x40014000
 8003d84:	40014400 	.word	0x40014400
 8003d88:	40014800 	.word	0x40014800

08003d8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f023 0201 	bic.w	r2, r3, #1
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f023 0302 	bic.w	r3, r3, #2
 8003dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e54 <TIM_OC1_SetConfig+0xc8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d10c      	bne.n	8003e02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f023 0308 	bic.w	r3, r3, #8
 8003dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a13      	ldr	r2, [pc, #76]	@ (8003e54 <TIM_OC1_SetConfig+0xc8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d111      	bne.n	8003e2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	621a      	str	r2, [r3, #32]
}
 8003e48:	bf00      	nop
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	40010000 	.word	0x40010000

08003e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f023 0210 	bic.w	r2, r3, #16
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f023 0320 	bic.w	r3, r3, #32
 8003ea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f2c <TIM_OC2_SetConfig+0xd4>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d10d      	bne.n	8003ed4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a15      	ldr	r2, [pc, #84]	@ (8003f2c <TIM_OC2_SetConfig+0xd4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d113      	bne.n	8003f04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	693a      	ldr	r2, [r7, #16]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	621a      	str	r2, [r3, #32]
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000

08003f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0303 	bic.w	r3, r3, #3
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1d      	ldr	r2, [pc, #116]	@ (8004000 <TIM_OC3_SetConfig+0xd0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10d      	bne.n	8003faa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	021b      	lsls	r3, r3, #8
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a14      	ldr	r2, [pc, #80]	@ (8004000 <TIM_OC3_SetConfig+0xd0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d113      	bne.n	8003fda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	011b      	lsls	r3, r3, #4
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	621a      	str	r2, [r3, #32]
}
 8003ff4:	bf00      	nop
 8003ff6:	371c      	adds	r7, #28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	40010000 	.word	0x40010000

08004004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	021b      	lsls	r3, r3, #8
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800404e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	031b      	lsls	r3, r3, #12
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a10      	ldr	r2, [pc, #64]	@ (80040a0 <TIM_OC4_SetConfig+0x9c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d109      	bne.n	8004078 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800406a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	621a      	str	r2, [r3, #32]
}
 8004092:	bf00      	nop
 8004094:	371c      	adds	r7, #28
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	40010000 	.word	0x40010000

080040a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f023 0201 	bic.w	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a24      	ldr	r2, [pc, #144]	@ (8004160 <TIM_TI1_SetConfig+0xbc>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <TIM_TI1_SetConfig+0x56>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d8:	d00f      	beq.n	80040fa <TIM_TI1_SetConfig+0x56>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4a21      	ldr	r2, [pc, #132]	@ (8004164 <TIM_TI1_SetConfig+0xc0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00b      	beq.n	80040fa <TIM_TI1_SetConfig+0x56>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4a20      	ldr	r2, [pc, #128]	@ (8004168 <TIM_TI1_SetConfig+0xc4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d007      	beq.n	80040fa <TIM_TI1_SetConfig+0x56>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4a1f      	ldr	r2, [pc, #124]	@ (800416c <TIM_TI1_SetConfig+0xc8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d003      	beq.n	80040fa <TIM_TI1_SetConfig+0x56>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4a1e      	ldr	r2, [pc, #120]	@ (8004170 <TIM_TI1_SetConfig+0xcc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d101      	bne.n	80040fe <TIM_TI1_SetConfig+0x5a>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <TIM_TI1_SetConfig+0x5c>
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	e003      	b.n	800411e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004124:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	b2db      	uxtb	r3, r3
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f023 030a 	bic.w	r3, r3, #10
 8004138:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f003 030a 	and.w	r3, r3, #10
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	621a      	str	r2, [r3, #32]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40010000 	.word	0x40010000
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800
 800416c:	40000c00 	.word	0x40000c00
 8004170:	40014000 	.word	0x40014000

08004174 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	f023 0210 	bic.w	r2, r3, #16
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	021b      	lsls	r3, r3, #8
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	031b      	lsls	r3, r3, #12
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b087      	sub	sp, #28
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f023 0303 	bic.w	r3, r3, #3
 800421a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800422a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	b2db      	uxtb	r3, r3
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	4313      	orrs	r3, r2
 8004236:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800423e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004266:	b480      	push	{r7}
 8004268:	b087      	sub	sp, #28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004292:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4313      	orrs	r3, r2
 800429c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042a4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	031b      	lsls	r3, r3, #12
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80042b8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	031b      	lsls	r3, r3, #12
 80042be:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	621a      	str	r2, [r3, #32]
}
 80042d4:	bf00      	nop
 80042d6:	371c      	adds	r7, #28
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2201      	movs	r2, #1
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1a      	ldr	r2, [r3, #32]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	43db      	mvns	r3, r3
 8004302:	401a      	ands	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1a      	ldr	r2, [r3, #32]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	fa01 f303 	lsl.w	r3, r1, r3
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d101      	bne.n	8004344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004340:	2302      	movs	r3, #2
 8004342:	e050      	b.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800436a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1c      	ldr	r2, [pc, #112]	@ (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004390:	d013      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a18      	ldr	r2, [pc, #96]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a16      	ldr	r2, [pc, #88]	@ (80043fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a15      	ldr	r2, [pc, #84]	@ (8004400 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a13      	ldr	r2, [pc, #76]	@ (8004404 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10c      	bne.n	80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40000c00 	.word	0x40000c00
 8004404:	40014000 	.word	0x40014000

08004408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e042      	b.n	80044c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fd fd00 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2224      	movs	r2, #36	@ 0x24
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fdbd 	bl	8004ff4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	@ 0x28
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	4613      	mov	r3, r2
 80044de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d175      	bne.n	80045dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_UART_Transmit+0x2c>
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e06e      	b.n	80045de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2221      	movs	r2, #33	@ 0x21
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800450e:	f7fd fe75 	bl	80021fc <HAL_GetTick>
 8004512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	88fa      	ldrh	r2, [r7, #6]
 8004518:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	88fa      	ldrh	r2, [r7, #6]
 800451e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004528:	d108      	bne.n	800453c <HAL_UART_Transmit+0x6c>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d104      	bne.n	800453c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	e003      	b.n	8004544 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004544:	e02e      	b.n	80045a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2200      	movs	r2, #0
 800454e:	2180      	movs	r1, #128	@ 0x80
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 fb1f 	bl	8004b94 <UART_WaitOnFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e03a      	b.n	80045de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10b      	bne.n	8004586 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800457c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	3302      	adds	r3, #2
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	e007      	b.n	8004596 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	3301      	adds	r3, #1
 8004594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1cb      	bne.n	8004546 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2200      	movs	r2, #0
 80045b6:	2140      	movs	r1, #64	@ 0x40
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 faeb 	bl	8004b94 <UART_WaitOnFlagUntilTimeout>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e006      	b.n	80045de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045d8:	2300      	movs	r3, #0
 80045da:	e000      	b.n	80045de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045dc:	2302      	movs	r3, #2
  }
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3720      	adds	r7, #32
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	4613      	mov	r3, r2
 80045f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d112      	bne.n	8004626 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_UART_Receive_IT+0x26>
 8004606:	88fb      	ldrh	r3, [r7, #6]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d101      	bne.n	8004610 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e00b      	b.n	8004628 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	461a      	mov	r2, r3
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fb12 	bl	8004c46 <UART_Start_Receive_IT>
 8004622:	4603      	mov	r3, r0
 8004624:	e000      	b.n	8004628 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004626:	2302      	movs	r3, #2
  }
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b0ba      	sub	sp, #232	@ 0xe8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004656:	2300      	movs	r3, #0
 8004658:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800465c:	2300      	movs	r3, #0
 800465e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800466e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10f      	bne.n	8004696 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b00      	cmp	r3, #0
 8004680:	d009      	beq.n	8004696 <HAL_UART_IRQHandler+0x66>
 8004682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fbf2 	bl	8004e78 <UART_Receive_IT>
      return;
 8004694:	e25b      	b.n	8004b4e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 80de 	beq.w	800485c <HAL_UART_IRQHandler+0x22c>
 80046a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80d1 	beq.w	800485c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <HAL_UART_IRQHandler+0xae>
 80046c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	f043 0201 	orr.w	r2, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <HAL_UART_IRQHandler+0xd2>
 80046ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fa:	f043 0202 	orr.w	r2, r3, #2
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <HAL_UART_IRQHandler+0xf6>
 800470e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d005      	beq.n	8004726 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800471e:	f043 0204 	orr.w	r2, r3, #4
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d011      	beq.n	8004756 <HAL_UART_IRQHandler+0x126>
 8004732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b00      	cmp	r3, #0
 800473c:	d105      	bne.n	800474a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800473e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474e:	f043 0208 	orr.w	r2, r3, #8
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 81f2 	beq.w	8004b44 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d008      	beq.n	800477e <HAL_UART_IRQHandler+0x14e>
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fb7d 	bl	8004e78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004788:	2b40      	cmp	r3, #64	@ 0x40
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479a:	f003 0308 	and.w	r3, r3, #8
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d103      	bne.n	80047aa <HAL_UART_IRQHandler+0x17a>
 80047a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d04f      	beq.n	800484a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fa85 	bl	8004cba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ba:	2b40      	cmp	r3, #64	@ 0x40
 80047bc:	d141      	bne.n	8004842 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3314      	adds	r3, #20
 80047c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3314      	adds	r3, #20
 80047e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047fa:	e841 2300 	strex	r3, r2, [r1]
 80047fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004802:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1d9      	bne.n	80047be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d013      	beq.n	800483a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004816:	4a7e      	ldr	r2, [pc, #504]	@ (8004a10 <HAL_UART_IRQHandler+0x3e0>)
 8004818:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800481e:	4618      	mov	r0, r3
 8004820:	f7fd fe79 	bl	8002516 <HAL_DMA_Abort_IT>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d016      	beq.n	8004858 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004834:	4610      	mov	r0, r2
 8004836:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004838:	e00e      	b.n	8004858 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f994 	bl	8004b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004840:	e00a      	b.n	8004858 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f990 	bl	8004b68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004848:	e006      	b.n	8004858 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 f98c 	bl	8004b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004856:	e175      	b.n	8004b44 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004858:	bf00      	nop
    return;
 800485a:	e173      	b.n	8004b44 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004860:	2b01      	cmp	r3, #1
 8004862:	f040 814f 	bne.w	8004b04 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 8148 	beq.w	8004b04 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004878:	f003 0310 	and.w	r3, r3, #16
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8141 	beq.w	8004b04 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004882:	2300      	movs	r3, #0
 8004884:	60bb      	str	r3, [r7, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a2:	2b40      	cmp	r3, #64	@ 0x40
 80048a4:	f040 80b6 	bne.w	8004a14 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f000 8145 	beq.w	8004b48 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048c6:	429a      	cmp	r2, r3
 80048c8:	f080 813e 	bcs.w	8004b48 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048de:	f000 8088 	beq.w	80049f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	330c      	adds	r3, #12
 80048e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004900:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	330c      	adds	r3, #12
 800490a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800490e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004912:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800491a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800491e:	e841 2300 	strex	r3, r2, [r1]
 8004922:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004926:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1d9      	bne.n	80048e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	3314      	adds	r3, #20
 8004934:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004936:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004938:	e853 3f00 	ldrex	r3, [r3]
 800493c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800493e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004940:	f023 0301 	bic.w	r3, r3, #1
 8004944:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3314      	adds	r3, #20
 800494e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004952:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004956:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004958:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800495a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004964:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1e1      	bne.n	800492e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3314      	adds	r3, #20
 8004970:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800497a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800497c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004980:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3314      	adds	r3, #20
 800498a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800498e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004990:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004992:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004994:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004996:	e841 2300 	strex	r3, r2, [r1]
 800499a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800499c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1e3      	bne.n	800496a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2220      	movs	r2, #32
 80049a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	330c      	adds	r3, #12
 80049b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049c2:	f023 0310 	bic.w	r3, r3, #16
 80049c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80049d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e3      	bne.n	80049b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fd fd22 	bl	8002436 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f8b7 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a0e:	e09b      	b.n	8004b48 <HAL_UART_IRQHandler+0x518>
 8004a10:	08004d81 	.word	0x08004d81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 808e 	beq.w	8004b4c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8089 	beq.w	8004b4c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	330c      	adds	r3, #12
 8004a40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a50:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	330c      	adds	r3, #12
 8004a5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a5e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a60:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a64:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e3      	bne.n	8004a3a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3314      	adds	r3, #20
 8004a78:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	623b      	str	r3, [r7, #32]
   return(result);
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	3314      	adds	r3, #20
 8004a92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a96:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a9e:	e841 2300 	strex	r3, r2, [r1]
 8004aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1e3      	bne.n	8004a72 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	330c      	adds	r3, #12
 8004abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	e853 3f00 	ldrex	r3, [r3]
 8004ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0310 	bic.w	r3, r3, #16
 8004ace:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004adc:	61fa      	str	r2, [r7, #28]
 8004ade:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae0:	69b9      	ldr	r1, [r7, #24]
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	e841 2300 	strex	r3, r2, [r1]
 8004ae8:	617b      	str	r3, [r7, #20]
   return(result);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1e3      	bne.n	8004ab8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004af6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f83d 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b02:	e023      	b.n	8004b4c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d009      	beq.n	8004b24 <HAL_UART_IRQHandler+0x4f4>
 8004b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d003      	beq.n	8004b24 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f943 	bl	8004da8 <UART_Transmit_IT>
    return;
 8004b22:	e014      	b.n	8004b4e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00e      	beq.n	8004b4e <HAL_UART_IRQHandler+0x51e>
 8004b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 f983 	bl	8004e48 <UART_EndTransmit_IT>
    return;
 8004b42:	e004      	b.n	8004b4e <HAL_UART_IRQHandler+0x51e>
    return;
 8004b44:	bf00      	nop
 8004b46:	e002      	b.n	8004b4e <HAL_UART_IRQHandler+0x51e>
      return;
 8004b48:	bf00      	nop
 8004b4a:	e000      	b.n	8004b4e <HAL_UART_IRQHandler+0x51e>
      return;
 8004b4c:	bf00      	nop
  }
}
 8004b4e:	37e8      	adds	r7, #232	@ 0xe8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba4:	e03b      	b.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ba6:	6a3b      	ldr	r3, [r7, #32]
 8004ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bac:	d037      	beq.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bae:	f7fd fb25 	bl	80021fc <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	6a3a      	ldr	r2, [r7, #32]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d302      	bcc.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d101      	bne.n	8004bc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e03a      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d023      	beq.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b80      	cmp	r3, #128	@ 0x80
 8004bda:	d020      	beq.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b40      	cmp	r3, #64	@ 0x40
 8004be0:	d01d      	beq.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d116      	bne.n	8004c1e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f857 	bl	8004cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2208      	movs	r2, #8
 8004c10:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e00f      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4013      	ands	r3, r2
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	461a      	mov	r2, r3
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d0b4      	beq.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b085      	sub	sp, #20
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	4613      	mov	r3, r2
 8004c52:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	88fa      	ldrh	r2, [r7, #6]
 8004c5e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2222      	movs	r2, #34	@ 0x22
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	691b      	ldr	r3, [r3, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c8a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695a      	ldr	r2, [r3, #20]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0220 	orr.w	r2, r2, #32
 8004caa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b095      	sub	sp, #84	@ 0x54
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	330c      	adds	r3, #12
 8004cc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	330c      	adds	r3, #12
 8004ce0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ce2:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cea:	e841 2300 	strex	r3, r2, [r1]
 8004cee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d1e5      	bne.n	8004cc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	3314      	adds	r3, #20
 8004cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	e853 3f00 	ldrex	r3, [r3]
 8004d04:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3314      	adds	r3, #20
 8004d14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d18:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e5      	bne.n	8004cf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d119      	bne.n	8004d66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	330c      	adds	r3, #12
 8004d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f023 0310 	bic.w	r3, r3, #16
 8004d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	330c      	adds	r3, #12
 8004d50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d52:	61ba      	str	r2, [r7, #24]
 8004d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6979      	ldr	r1, [r7, #20]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e5      	bne.n	8004d32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d74:	bf00      	nop
 8004d76:	3754      	adds	r7, #84	@ 0x54
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff fee4 	bl	8004b68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b21      	cmp	r3, #33	@ 0x21
 8004dba:	d13e      	bne.n	8004e3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc4:	d114      	bne.n	8004df0 <UART_Transmit_IT+0x48>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d110      	bne.n	8004df0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	1c9a      	adds	r2, r3, #2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	621a      	str	r2, [r3, #32]
 8004dee:	e008      	b.n	8004e02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	1c59      	adds	r1, r3, #1
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6211      	str	r1, [r2, #32]
 8004dfa:	781a      	ldrb	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10f      	bne.n	8004e36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e36:	2300      	movs	r3, #0
 8004e38:	e000      	b.n	8004e3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e3a:	2302      	movs	r3, #2
  }
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7ff fe73 	bl	8004b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08c      	sub	sp, #48	@ 0x30
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b22      	cmp	r3, #34	@ 0x22
 8004e8a:	f040 80ae 	bne.w	8004fea <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e96:	d117      	bne.n	8004ec8 <UART_Receive_IT+0x50>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d113      	bne.n	8004ec8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec0:	1c9a      	adds	r2, r3, #2
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ec6:	e026      	b.n	8004f16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eda:	d007      	beq.n	8004eec <UART_Receive_IT+0x74>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <UART_Receive_IT+0x82>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	e008      	b.n	8004f0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4619      	mov	r1, r3
 8004f24:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d15d      	bne.n	8004fe6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0220 	bic.w	r2, r2, #32
 8004f38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695a      	ldr	r2, [r3, #20]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d135      	bne.n	8004fdc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	613b      	str	r3, [r7, #16]
   return(result);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f023 0310 	bic.w	r3, r3, #16
 8004f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	330c      	adds	r3, #12
 8004f94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f96:	623a      	str	r2, [r7, #32]
 8004f98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9a:	69f9      	ldr	r1, [r7, #28]
 8004f9c:	6a3a      	ldr	r2, [r7, #32]
 8004f9e:	e841 2300 	strex	r3, r2, [r1]
 8004fa2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1e5      	bne.n	8004f76 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d10a      	bne.n	8004fce <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fdd1 	bl	8004b7c <HAL_UARTEx_RxEventCallback>
 8004fda:	e002      	b.n	8004fe2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7fc fc75 	bl	80018cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e002      	b.n	8004fec <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e000      	b.n	8004fec <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004fea:	2302      	movs	r3, #2
  }
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3730      	adds	r7, #48	@ 0x30
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff8:	b0c0      	sub	sp, #256	@ 0x100
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005010:	68d9      	ldr	r1, [r3, #12]
 8005012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	ea40 0301 	orr.w	r3, r0, r1
 800501c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800501e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	431a      	orrs	r2, r3
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	431a      	orrs	r2, r3
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800504c:	f021 010c 	bic.w	r1, r1, #12
 8005050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800505a:	430b      	orrs	r3, r1
 800505c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800505e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506e:	6999      	ldr	r1, [r3, #24]
 8005070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	ea40 0301 	orr.w	r3, r0, r1
 800507a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800507c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b8f      	ldr	r3, [pc, #572]	@ (80052c0 <UART_SetConfig+0x2cc>)
 8005084:	429a      	cmp	r2, r3
 8005086:	d005      	beq.n	8005094 <UART_SetConfig+0xa0>
 8005088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b8d      	ldr	r3, [pc, #564]	@ (80052c4 <UART_SetConfig+0x2d0>)
 8005090:	429a      	cmp	r2, r3
 8005092:	d104      	bne.n	800509e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005094:	f7fe f85c 	bl	8003150 <HAL_RCC_GetPCLK2Freq>
 8005098:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800509c:	e003      	b.n	80050a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800509e:	f7fe f843 	bl	8003128 <HAL_RCC_GetPCLK1Freq>
 80050a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b0:	f040 810c 	bne.w	80052cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050b8:	2200      	movs	r2, #0
 80050ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050c6:	4622      	mov	r2, r4
 80050c8:	462b      	mov	r3, r5
 80050ca:	1891      	adds	r1, r2, r2
 80050cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050ce:	415b      	adcs	r3, r3
 80050d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050d6:	4621      	mov	r1, r4
 80050d8:	eb12 0801 	adds.w	r8, r2, r1
 80050dc:	4629      	mov	r1, r5
 80050de:	eb43 0901 	adc.w	r9, r3, r1
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050f6:	4690      	mov	r8, r2
 80050f8:	4699      	mov	r9, r3
 80050fa:	4623      	mov	r3, r4
 80050fc:	eb18 0303 	adds.w	r3, r8, r3
 8005100:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005104:	462b      	mov	r3, r5
 8005106:	eb49 0303 	adc.w	r3, r9, r3
 800510a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800511a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800511e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005122:	460b      	mov	r3, r1
 8005124:	18db      	adds	r3, r3, r3
 8005126:	653b      	str	r3, [r7, #80]	@ 0x50
 8005128:	4613      	mov	r3, r2
 800512a:	eb42 0303 	adc.w	r3, r2, r3
 800512e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005130:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005134:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005138:	f7fb fcc8 	bl	8000acc <__aeabi_uldivmod>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4b61      	ldr	r3, [pc, #388]	@ (80052c8 <UART_SetConfig+0x2d4>)
 8005142:	fba3 2302 	umull	r2, r3, r3, r2
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	011c      	lsls	r4, r3, #4
 800514a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514e:	2200      	movs	r2, #0
 8005150:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005154:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005158:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800515c:	4642      	mov	r2, r8
 800515e:	464b      	mov	r3, r9
 8005160:	1891      	adds	r1, r2, r2
 8005162:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005164:	415b      	adcs	r3, r3
 8005166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005168:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800516c:	4641      	mov	r1, r8
 800516e:	eb12 0a01 	adds.w	sl, r2, r1
 8005172:	4649      	mov	r1, r9
 8005174:	eb43 0b01 	adc.w	fp, r3, r1
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005184:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800518c:	4692      	mov	sl, r2
 800518e:	469b      	mov	fp, r3
 8005190:	4643      	mov	r3, r8
 8005192:	eb1a 0303 	adds.w	r3, sl, r3
 8005196:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800519a:	464b      	mov	r3, r9
 800519c:	eb4b 0303 	adc.w	r3, fp, r3
 80051a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80051b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051b8:	460b      	mov	r3, r1
 80051ba:	18db      	adds	r3, r3, r3
 80051bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80051be:	4613      	mov	r3, r2
 80051c0:	eb42 0303 	adc.w	r3, r2, r3
 80051c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80051c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051ce:	f7fb fc7d 	bl	8000acc <__aeabi_uldivmod>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4611      	mov	r1, r2
 80051d8:	4b3b      	ldr	r3, [pc, #236]	@ (80052c8 <UART_SetConfig+0x2d4>)
 80051da:	fba3 2301 	umull	r2, r3, r3, r1
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	2264      	movs	r2, #100	@ 0x64
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	1acb      	subs	r3, r1, r3
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051ee:	4b36      	ldr	r3, [pc, #216]	@ (80052c8 <UART_SetConfig+0x2d4>)
 80051f0:	fba3 2302 	umull	r2, r3, r3, r2
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051fc:	441c      	add	r4, r3
 80051fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005202:	2200      	movs	r2, #0
 8005204:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005208:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800520c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005210:	4642      	mov	r2, r8
 8005212:	464b      	mov	r3, r9
 8005214:	1891      	adds	r1, r2, r2
 8005216:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005218:	415b      	adcs	r3, r3
 800521a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800521c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005220:	4641      	mov	r1, r8
 8005222:	1851      	adds	r1, r2, r1
 8005224:	6339      	str	r1, [r7, #48]	@ 0x30
 8005226:	4649      	mov	r1, r9
 8005228:	414b      	adcs	r3, r1
 800522a:	637b      	str	r3, [r7, #52]	@ 0x34
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005238:	4659      	mov	r1, fp
 800523a:	00cb      	lsls	r3, r1, #3
 800523c:	4651      	mov	r1, sl
 800523e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005242:	4651      	mov	r1, sl
 8005244:	00ca      	lsls	r2, r1, #3
 8005246:	4610      	mov	r0, r2
 8005248:	4619      	mov	r1, r3
 800524a:	4603      	mov	r3, r0
 800524c:	4642      	mov	r2, r8
 800524e:	189b      	adds	r3, r3, r2
 8005250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005254:	464b      	mov	r3, r9
 8005256:	460a      	mov	r2, r1
 8005258:	eb42 0303 	adc.w	r3, r2, r3
 800525c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800526c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005270:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005274:	460b      	mov	r3, r1
 8005276:	18db      	adds	r3, r3, r3
 8005278:	62bb      	str	r3, [r7, #40]	@ 0x28
 800527a:	4613      	mov	r3, r2
 800527c:	eb42 0303 	adc.w	r3, r2, r3
 8005280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005282:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005286:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800528a:	f7fb fc1f 	bl	8000acc <__aeabi_uldivmod>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <UART_SetConfig+0x2d4>)
 8005294:	fba3 1302 	umull	r1, r3, r3, r2
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	2164      	movs	r1, #100	@ 0x64
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	3332      	adds	r3, #50	@ 0x32
 80052a6:	4a08      	ldr	r2, [pc, #32]	@ (80052c8 <UART_SetConfig+0x2d4>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	095b      	lsrs	r3, r3, #5
 80052ae:	f003 0207 	and.w	r2, r3, #7
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4422      	add	r2, r4
 80052ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052bc:	e106      	b.n	80054cc <UART_SetConfig+0x4d8>
 80052be:	bf00      	nop
 80052c0:	40011000 	.word	0x40011000
 80052c4:	40011400 	.word	0x40011400
 80052c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d0:	2200      	movs	r2, #0
 80052d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052de:	4642      	mov	r2, r8
 80052e0:	464b      	mov	r3, r9
 80052e2:	1891      	adds	r1, r2, r2
 80052e4:	6239      	str	r1, [r7, #32]
 80052e6:	415b      	adcs	r3, r3
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052ee:	4641      	mov	r1, r8
 80052f0:	1854      	adds	r4, r2, r1
 80052f2:	4649      	mov	r1, r9
 80052f4:	eb43 0501 	adc.w	r5, r3, r1
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	00eb      	lsls	r3, r5, #3
 8005302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005306:	00e2      	lsls	r2, r4, #3
 8005308:	4614      	mov	r4, r2
 800530a:	461d      	mov	r5, r3
 800530c:	4643      	mov	r3, r8
 800530e:	18e3      	adds	r3, r4, r3
 8005310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005314:	464b      	mov	r3, r9
 8005316:	eb45 0303 	adc.w	r3, r5, r3
 800531a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800532a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800532e:	f04f 0200 	mov.w	r2, #0
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800533a:	4629      	mov	r1, r5
 800533c:	008b      	lsls	r3, r1, #2
 800533e:	4621      	mov	r1, r4
 8005340:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005344:	4621      	mov	r1, r4
 8005346:	008a      	lsls	r2, r1, #2
 8005348:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800534c:	f7fb fbbe 	bl	8000acc <__aeabi_uldivmod>
 8005350:	4602      	mov	r2, r0
 8005352:	460b      	mov	r3, r1
 8005354:	4b60      	ldr	r3, [pc, #384]	@ (80054d8 <UART_SetConfig+0x4e4>)
 8005356:	fba3 2302 	umull	r2, r3, r3, r2
 800535a:	095b      	lsrs	r3, r3, #5
 800535c:	011c      	lsls	r4, r3, #4
 800535e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005362:	2200      	movs	r2, #0
 8005364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005368:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800536c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005370:	4642      	mov	r2, r8
 8005372:	464b      	mov	r3, r9
 8005374:	1891      	adds	r1, r2, r2
 8005376:	61b9      	str	r1, [r7, #24]
 8005378:	415b      	adcs	r3, r3
 800537a:	61fb      	str	r3, [r7, #28]
 800537c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005380:	4641      	mov	r1, r8
 8005382:	1851      	adds	r1, r2, r1
 8005384:	6139      	str	r1, [r7, #16]
 8005386:	4649      	mov	r1, r9
 8005388:	414b      	adcs	r3, r1
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005398:	4659      	mov	r1, fp
 800539a:	00cb      	lsls	r3, r1, #3
 800539c:	4651      	mov	r1, sl
 800539e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053a2:	4651      	mov	r1, sl
 80053a4:	00ca      	lsls	r2, r1, #3
 80053a6:	4610      	mov	r0, r2
 80053a8:	4619      	mov	r1, r3
 80053aa:	4603      	mov	r3, r0
 80053ac:	4642      	mov	r2, r8
 80053ae:	189b      	adds	r3, r3, r2
 80053b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053b4:	464b      	mov	r3, r9
 80053b6:	460a      	mov	r2, r1
 80053b8:	eb42 0303 	adc.w	r3, r2, r3
 80053bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053d8:	4649      	mov	r1, r9
 80053da:	008b      	lsls	r3, r1, #2
 80053dc:	4641      	mov	r1, r8
 80053de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053e2:	4641      	mov	r1, r8
 80053e4:	008a      	lsls	r2, r1, #2
 80053e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053ea:	f7fb fb6f 	bl	8000acc <__aeabi_uldivmod>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	4611      	mov	r1, r2
 80053f4:	4b38      	ldr	r3, [pc, #224]	@ (80054d8 <UART_SetConfig+0x4e4>)
 80053f6:	fba3 2301 	umull	r2, r3, r3, r1
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2264      	movs	r2, #100	@ 0x64
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
 8005402:	1acb      	subs	r3, r1, r3
 8005404:	011b      	lsls	r3, r3, #4
 8005406:	3332      	adds	r3, #50	@ 0x32
 8005408:	4a33      	ldr	r2, [pc, #204]	@ (80054d8 <UART_SetConfig+0x4e4>)
 800540a:	fba2 2303 	umull	r2, r3, r2, r3
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005414:	441c      	add	r4, r3
 8005416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541a:	2200      	movs	r2, #0
 800541c:	673b      	str	r3, [r7, #112]	@ 0x70
 800541e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005420:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005424:	4642      	mov	r2, r8
 8005426:	464b      	mov	r3, r9
 8005428:	1891      	adds	r1, r2, r2
 800542a:	60b9      	str	r1, [r7, #8]
 800542c:	415b      	adcs	r3, r3
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005434:	4641      	mov	r1, r8
 8005436:	1851      	adds	r1, r2, r1
 8005438:	6039      	str	r1, [r7, #0]
 800543a:	4649      	mov	r1, r9
 800543c:	414b      	adcs	r3, r1
 800543e:	607b      	str	r3, [r7, #4]
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800544c:	4659      	mov	r1, fp
 800544e:	00cb      	lsls	r3, r1, #3
 8005450:	4651      	mov	r1, sl
 8005452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005456:	4651      	mov	r1, sl
 8005458:	00ca      	lsls	r2, r1, #3
 800545a:	4610      	mov	r0, r2
 800545c:	4619      	mov	r1, r3
 800545e:	4603      	mov	r3, r0
 8005460:	4642      	mov	r2, r8
 8005462:	189b      	adds	r3, r3, r2
 8005464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005466:	464b      	mov	r3, r9
 8005468:	460a      	mov	r2, r1
 800546a:	eb42 0303 	adc.w	r3, r2, r3
 800546e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	663b      	str	r3, [r7, #96]	@ 0x60
 800547a:	667a      	str	r2, [r7, #100]	@ 0x64
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005488:	4649      	mov	r1, r9
 800548a:	008b      	lsls	r3, r1, #2
 800548c:	4641      	mov	r1, r8
 800548e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005492:	4641      	mov	r1, r8
 8005494:	008a      	lsls	r2, r1, #2
 8005496:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800549a:	f7fb fb17 	bl	8000acc <__aeabi_uldivmod>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	4b0d      	ldr	r3, [pc, #52]	@ (80054d8 <UART_SetConfig+0x4e4>)
 80054a4:	fba3 1302 	umull	r1, r3, r3, r2
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	2164      	movs	r1, #100	@ 0x64
 80054ac:	fb01 f303 	mul.w	r3, r1, r3
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	3332      	adds	r3, #50	@ 0x32
 80054b6:	4a08      	ldr	r2, [pc, #32]	@ (80054d8 <UART_SetConfig+0x4e4>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	095b      	lsrs	r3, r3, #5
 80054be:	f003 020f 	and.w	r2, r3, #15
 80054c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4422      	add	r2, r4
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054d2:	46bd      	mov	sp, r7
 80054d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054d8:	51eb851f 	.word	0x51eb851f

080054dc <sniprintf>:
 80054dc:	b40c      	push	{r2, r3}
 80054de:	b530      	push	{r4, r5, lr}
 80054e0:	4b17      	ldr	r3, [pc, #92]	@ (8005540 <sniprintf+0x64>)
 80054e2:	1e0c      	subs	r4, r1, #0
 80054e4:	681d      	ldr	r5, [r3, #0]
 80054e6:	b09d      	sub	sp, #116	@ 0x74
 80054e8:	da08      	bge.n	80054fc <sniprintf+0x20>
 80054ea:	238b      	movs	r3, #139	@ 0x8b
 80054ec:	602b      	str	r3, [r5, #0]
 80054ee:	f04f 30ff 	mov.w	r0, #4294967295
 80054f2:	b01d      	add	sp, #116	@ 0x74
 80054f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054f8:	b002      	add	sp, #8
 80054fa:	4770      	bx	lr
 80054fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005500:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005504:	bf14      	ite	ne
 8005506:	f104 33ff 	addne.w	r3, r4, #4294967295
 800550a:	4623      	moveq	r3, r4
 800550c:	9304      	str	r3, [sp, #16]
 800550e:	9307      	str	r3, [sp, #28]
 8005510:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005514:	9002      	str	r0, [sp, #8]
 8005516:	9006      	str	r0, [sp, #24]
 8005518:	f8ad 3016 	strh.w	r3, [sp, #22]
 800551c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800551e:	ab21      	add	r3, sp, #132	@ 0x84
 8005520:	a902      	add	r1, sp, #8
 8005522:	4628      	mov	r0, r5
 8005524:	9301      	str	r3, [sp, #4]
 8005526:	f000 f995 	bl	8005854 <_svfiprintf_r>
 800552a:	1c43      	adds	r3, r0, #1
 800552c:	bfbc      	itt	lt
 800552e:	238b      	movlt	r3, #139	@ 0x8b
 8005530:	602b      	strlt	r3, [r5, #0]
 8005532:	2c00      	cmp	r4, #0
 8005534:	d0dd      	beq.n	80054f2 <sniprintf+0x16>
 8005536:	9b02      	ldr	r3, [sp, #8]
 8005538:	2200      	movs	r2, #0
 800553a:	701a      	strb	r2, [r3, #0]
 800553c:	e7d9      	b.n	80054f2 <sniprintf+0x16>
 800553e:	bf00      	nop
 8005540:	20000010 	.word	0x20000010

08005544 <memset>:
 8005544:	4402      	add	r2, r0
 8005546:	4603      	mov	r3, r0
 8005548:	4293      	cmp	r3, r2
 800554a:	d100      	bne.n	800554e <memset+0xa>
 800554c:	4770      	bx	lr
 800554e:	f803 1b01 	strb.w	r1, [r3], #1
 8005552:	e7f9      	b.n	8005548 <memset+0x4>

08005554 <__errno>:
 8005554:	4b01      	ldr	r3, [pc, #4]	@ (800555c <__errno+0x8>)
 8005556:	6818      	ldr	r0, [r3, #0]
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000010 	.word	0x20000010

08005560 <__libc_init_array>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4d0d      	ldr	r5, [pc, #52]	@ (8005598 <__libc_init_array+0x38>)
 8005564:	4c0d      	ldr	r4, [pc, #52]	@ (800559c <__libc_init_array+0x3c>)
 8005566:	1b64      	subs	r4, r4, r5
 8005568:	10a4      	asrs	r4, r4, #2
 800556a:	2600      	movs	r6, #0
 800556c:	42a6      	cmp	r6, r4
 800556e:	d109      	bne.n	8005584 <__libc_init_array+0x24>
 8005570:	4d0b      	ldr	r5, [pc, #44]	@ (80055a0 <__libc_init_array+0x40>)
 8005572:	4c0c      	ldr	r4, [pc, #48]	@ (80055a4 <__libc_init_array+0x44>)
 8005574:	f000 fc66 	bl	8005e44 <_init>
 8005578:	1b64      	subs	r4, r4, r5
 800557a:	10a4      	asrs	r4, r4, #2
 800557c:	2600      	movs	r6, #0
 800557e:	42a6      	cmp	r6, r4
 8005580:	d105      	bne.n	800558e <__libc_init_array+0x2e>
 8005582:	bd70      	pop	{r4, r5, r6, pc}
 8005584:	f855 3b04 	ldr.w	r3, [r5], #4
 8005588:	4798      	blx	r3
 800558a:	3601      	adds	r6, #1
 800558c:	e7ee      	b.n	800556c <__libc_init_array+0xc>
 800558e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005592:	4798      	blx	r3
 8005594:	3601      	adds	r6, #1
 8005596:	e7f2      	b.n	800557e <__libc_init_array+0x1e>
 8005598:	08005ec0 	.word	0x08005ec0
 800559c:	08005ec0 	.word	0x08005ec0
 80055a0:	08005ec0 	.word	0x08005ec0
 80055a4:	08005ec4 	.word	0x08005ec4

080055a8 <__retarget_lock_acquire_recursive>:
 80055a8:	4770      	bx	lr

080055aa <__retarget_lock_release_recursive>:
 80055aa:	4770      	bx	lr

080055ac <_free_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4605      	mov	r5, r0
 80055b0:	2900      	cmp	r1, #0
 80055b2:	d041      	beq.n	8005638 <_free_r+0x8c>
 80055b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055b8:	1f0c      	subs	r4, r1, #4
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bfb8      	it	lt
 80055be:	18e4      	addlt	r4, r4, r3
 80055c0:	f000 f8e0 	bl	8005784 <__malloc_lock>
 80055c4:	4a1d      	ldr	r2, [pc, #116]	@ (800563c <_free_r+0x90>)
 80055c6:	6813      	ldr	r3, [r2, #0]
 80055c8:	b933      	cbnz	r3, 80055d8 <_free_r+0x2c>
 80055ca:	6063      	str	r3, [r4, #4]
 80055cc:	6014      	str	r4, [r2, #0]
 80055ce:	4628      	mov	r0, r5
 80055d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055d4:	f000 b8dc 	b.w	8005790 <__malloc_unlock>
 80055d8:	42a3      	cmp	r3, r4
 80055da:	d908      	bls.n	80055ee <_free_r+0x42>
 80055dc:	6820      	ldr	r0, [r4, #0]
 80055de:	1821      	adds	r1, r4, r0
 80055e0:	428b      	cmp	r3, r1
 80055e2:	bf01      	itttt	eq
 80055e4:	6819      	ldreq	r1, [r3, #0]
 80055e6:	685b      	ldreq	r3, [r3, #4]
 80055e8:	1809      	addeq	r1, r1, r0
 80055ea:	6021      	streq	r1, [r4, #0]
 80055ec:	e7ed      	b.n	80055ca <_free_r+0x1e>
 80055ee:	461a      	mov	r2, r3
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	b10b      	cbz	r3, 80055f8 <_free_r+0x4c>
 80055f4:	42a3      	cmp	r3, r4
 80055f6:	d9fa      	bls.n	80055ee <_free_r+0x42>
 80055f8:	6811      	ldr	r1, [r2, #0]
 80055fa:	1850      	adds	r0, r2, r1
 80055fc:	42a0      	cmp	r0, r4
 80055fe:	d10b      	bne.n	8005618 <_free_r+0x6c>
 8005600:	6820      	ldr	r0, [r4, #0]
 8005602:	4401      	add	r1, r0
 8005604:	1850      	adds	r0, r2, r1
 8005606:	4283      	cmp	r3, r0
 8005608:	6011      	str	r1, [r2, #0]
 800560a:	d1e0      	bne.n	80055ce <_free_r+0x22>
 800560c:	6818      	ldr	r0, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	6053      	str	r3, [r2, #4]
 8005612:	4408      	add	r0, r1
 8005614:	6010      	str	r0, [r2, #0]
 8005616:	e7da      	b.n	80055ce <_free_r+0x22>
 8005618:	d902      	bls.n	8005620 <_free_r+0x74>
 800561a:	230c      	movs	r3, #12
 800561c:	602b      	str	r3, [r5, #0]
 800561e:	e7d6      	b.n	80055ce <_free_r+0x22>
 8005620:	6820      	ldr	r0, [r4, #0]
 8005622:	1821      	adds	r1, r4, r0
 8005624:	428b      	cmp	r3, r1
 8005626:	bf04      	itt	eq
 8005628:	6819      	ldreq	r1, [r3, #0]
 800562a:	685b      	ldreq	r3, [r3, #4]
 800562c:	6063      	str	r3, [r4, #4]
 800562e:	bf04      	itt	eq
 8005630:	1809      	addeq	r1, r1, r0
 8005632:	6021      	streq	r1, [r4, #0]
 8005634:	6054      	str	r4, [r2, #4]
 8005636:	e7ca      	b.n	80055ce <_free_r+0x22>
 8005638:	bd38      	pop	{r3, r4, r5, pc}
 800563a:	bf00      	nop
 800563c:	20000328 	.word	0x20000328

08005640 <sbrk_aligned>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	4e0f      	ldr	r6, [pc, #60]	@ (8005680 <sbrk_aligned+0x40>)
 8005644:	460c      	mov	r4, r1
 8005646:	6831      	ldr	r1, [r6, #0]
 8005648:	4605      	mov	r5, r0
 800564a:	b911      	cbnz	r1, 8005652 <sbrk_aligned+0x12>
 800564c:	f000 fba6 	bl	8005d9c <_sbrk_r>
 8005650:	6030      	str	r0, [r6, #0]
 8005652:	4621      	mov	r1, r4
 8005654:	4628      	mov	r0, r5
 8005656:	f000 fba1 	bl	8005d9c <_sbrk_r>
 800565a:	1c43      	adds	r3, r0, #1
 800565c:	d103      	bne.n	8005666 <sbrk_aligned+0x26>
 800565e:	f04f 34ff 	mov.w	r4, #4294967295
 8005662:	4620      	mov	r0, r4
 8005664:	bd70      	pop	{r4, r5, r6, pc}
 8005666:	1cc4      	adds	r4, r0, #3
 8005668:	f024 0403 	bic.w	r4, r4, #3
 800566c:	42a0      	cmp	r0, r4
 800566e:	d0f8      	beq.n	8005662 <sbrk_aligned+0x22>
 8005670:	1a21      	subs	r1, r4, r0
 8005672:	4628      	mov	r0, r5
 8005674:	f000 fb92 	bl	8005d9c <_sbrk_r>
 8005678:	3001      	adds	r0, #1
 800567a:	d1f2      	bne.n	8005662 <sbrk_aligned+0x22>
 800567c:	e7ef      	b.n	800565e <sbrk_aligned+0x1e>
 800567e:	bf00      	nop
 8005680:	20000324 	.word	0x20000324

08005684 <_malloc_r>:
 8005684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005688:	1ccd      	adds	r5, r1, #3
 800568a:	f025 0503 	bic.w	r5, r5, #3
 800568e:	3508      	adds	r5, #8
 8005690:	2d0c      	cmp	r5, #12
 8005692:	bf38      	it	cc
 8005694:	250c      	movcc	r5, #12
 8005696:	2d00      	cmp	r5, #0
 8005698:	4606      	mov	r6, r0
 800569a:	db01      	blt.n	80056a0 <_malloc_r+0x1c>
 800569c:	42a9      	cmp	r1, r5
 800569e:	d904      	bls.n	80056aa <_malloc_r+0x26>
 80056a0:	230c      	movs	r3, #12
 80056a2:	6033      	str	r3, [r6, #0]
 80056a4:	2000      	movs	r0, #0
 80056a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005780 <_malloc_r+0xfc>
 80056ae:	f000 f869 	bl	8005784 <__malloc_lock>
 80056b2:	f8d8 3000 	ldr.w	r3, [r8]
 80056b6:	461c      	mov	r4, r3
 80056b8:	bb44      	cbnz	r4, 800570c <_malloc_r+0x88>
 80056ba:	4629      	mov	r1, r5
 80056bc:	4630      	mov	r0, r6
 80056be:	f7ff ffbf 	bl	8005640 <sbrk_aligned>
 80056c2:	1c43      	adds	r3, r0, #1
 80056c4:	4604      	mov	r4, r0
 80056c6:	d158      	bne.n	800577a <_malloc_r+0xf6>
 80056c8:	f8d8 4000 	ldr.w	r4, [r8]
 80056cc:	4627      	mov	r7, r4
 80056ce:	2f00      	cmp	r7, #0
 80056d0:	d143      	bne.n	800575a <_malloc_r+0xd6>
 80056d2:	2c00      	cmp	r4, #0
 80056d4:	d04b      	beq.n	800576e <_malloc_r+0xea>
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	4639      	mov	r1, r7
 80056da:	4630      	mov	r0, r6
 80056dc:	eb04 0903 	add.w	r9, r4, r3
 80056e0:	f000 fb5c 	bl	8005d9c <_sbrk_r>
 80056e4:	4581      	cmp	r9, r0
 80056e6:	d142      	bne.n	800576e <_malloc_r+0xea>
 80056e8:	6821      	ldr	r1, [r4, #0]
 80056ea:	1a6d      	subs	r5, r5, r1
 80056ec:	4629      	mov	r1, r5
 80056ee:	4630      	mov	r0, r6
 80056f0:	f7ff ffa6 	bl	8005640 <sbrk_aligned>
 80056f4:	3001      	adds	r0, #1
 80056f6:	d03a      	beq.n	800576e <_malloc_r+0xea>
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	442b      	add	r3, r5
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	bb62      	cbnz	r2, 8005760 <_malloc_r+0xdc>
 8005706:	f8c8 7000 	str.w	r7, [r8]
 800570a:	e00f      	b.n	800572c <_malloc_r+0xa8>
 800570c:	6822      	ldr	r2, [r4, #0]
 800570e:	1b52      	subs	r2, r2, r5
 8005710:	d420      	bmi.n	8005754 <_malloc_r+0xd0>
 8005712:	2a0b      	cmp	r2, #11
 8005714:	d917      	bls.n	8005746 <_malloc_r+0xc2>
 8005716:	1961      	adds	r1, r4, r5
 8005718:	42a3      	cmp	r3, r4
 800571a:	6025      	str	r5, [r4, #0]
 800571c:	bf18      	it	ne
 800571e:	6059      	strne	r1, [r3, #4]
 8005720:	6863      	ldr	r3, [r4, #4]
 8005722:	bf08      	it	eq
 8005724:	f8c8 1000 	streq.w	r1, [r8]
 8005728:	5162      	str	r2, [r4, r5]
 800572a:	604b      	str	r3, [r1, #4]
 800572c:	4630      	mov	r0, r6
 800572e:	f000 f82f 	bl	8005790 <__malloc_unlock>
 8005732:	f104 000b 	add.w	r0, r4, #11
 8005736:	1d23      	adds	r3, r4, #4
 8005738:	f020 0007 	bic.w	r0, r0, #7
 800573c:	1ac2      	subs	r2, r0, r3
 800573e:	bf1c      	itt	ne
 8005740:	1a1b      	subne	r3, r3, r0
 8005742:	50a3      	strne	r3, [r4, r2]
 8005744:	e7af      	b.n	80056a6 <_malloc_r+0x22>
 8005746:	6862      	ldr	r2, [r4, #4]
 8005748:	42a3      	cmp	r3, r4
 800574a:	bf0c      	ite	eq
 800574c:	f8c8 2000 	streq.w	r2, [r8]
 8005750:	605a      	strne	r2, [r3, #4]
 8005752:	e7eb      	b.n	800572c <_malloc_r+0xa8>
 8005754:	4623      	mov	r3, r4
 8005756:	6864      	ldr	r4, [r4, #4]
 8005758:	e7ae      	b.n	80056b8 <_malloc_r+0x34>
 800575a:	463c      	mov	r4, r7
 800575c:	687f      	ldr	r7, [r7, #4]
 800575e:	e7b6      	b.n	80056ce <_malloc_r+0x4a>
 8005760:	461a      	mov	r2, r3
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	42a3      	cmp	r3, r4
 8005766:	d1fb      	bne.n	8005760 <_malloc_r+0xdc>
 8005768:	2300      	movs	r3, #0
 800576a:	6053      	str	r3, [r2, #4]
 800576c:	e7de      	b.n	800572c <_malloc_r+0xa8>
 800576e:	230c      	movs	r3, #12
 8005770:	6033      	str	r3, [r6, #0]
 8005772:	4630      	mov	r0, r6
 8005774:	f000 f80c 	bl	8005790 <__malloc_unlock>
 8005778:	e794      	b.n	80056a4 <_malloc_r+0x20>
 800577a:	6005      	str	r5, [r0, #0]
 800577c:	e7d6      	b.n	800572c <_malloc_r+0xa8>
 800577e:	bf00      	nop
 8005780:	20000328 	.word	0x20000328

08005784 <__malloc_lock>:
 8005784:	4801      	ldr	r0, [pc, #4]	@ (800578c <__malloc_lock+0x8>)
 8005786:	f7ff bf0f 	b.w	80055a8 <__retarget_lock_acquire_recursive>
 800578a:	bf00      	nop
 800578c:	20000320 	.word	0x20000320

08005790 <__malloc_unlock>:
 8005790:	4801      	ldr	r0, [pc, #4]	@ (8005798 <__malloc_unlock+0x8>)
 8005792:	f7ff bf0a 	b.w	80055aa <__retarget_lock_release_recursive>
 8005796:	bf00      	nop
 8005798:	20000320 	.word	0x20000320

0800579c <__ssputs_r>:
 800579c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a0:	688e      	ldr	r6, [r1, #8]
 80057a2:	461f      	mov	r7, r3
 80057a4:	42be      	cmp	r6, r7
 80057a6:	680b      	ldr	r3, [r1, #0]
 80057a8:	4682      	mov	sl, r0
 80057aa:	460c      	mov	r4, r1
 80057ac:	4690      	mov	r8, r2
 80057ae:	d82d      	bhi.n	800580c <__ssputs_r+0x70>
 80057b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057b8:	d026      	beq.n	8005808 <__ssputs_r+0x6c>
 80057ba:	6965      	ldr	r5, [r4, #20]
 80057bc:	6909      	ldr	r1, [r1, #16]
 80057be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057c2:	eba3 0901 	sub.w	r9, r3, r1
 80057c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057ca:	1c7b      	adds	r3, r7, #1
 80057cc:	444b      	add	r3, r9
 80057ce:	106d      	asrs	r5, r5, #1
 80057d0:	429d      	cmp	r5, r3
 80057d2:	bf38      	it	cc
 80057d4:	461d      	movcc	r5, r3
 80057d6:	0553      	lsls	r3, r2, #21
 80057d8:	d527      	bpl.n	800582a <__ssputs_r+0x8e>
 80057da:	4629      	mov	r1, r5
 80057dc:	f7ff ff52 	bl	8005684 <_malloc_r>
 80057e0:	4606      	mov	r6, r0
 80057e2:	b360      	cbz	r0, 800583e <__ssputs_r+0xa2>
 80057e4:	6921      	ldr	r1, [r4, #16]
 80057e6:	464a      	mov	r2, r9
 80057e8:	f000 fae8 	bl	8005dbc <memcpy>
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80057f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f6:	81a3      	strh	r3, [r4, #12]
 80057f8:	6126      	str	r6, [r4, #16]
 80057fa:	6165      	str	r5, [r4, #20]
 80057fc:	444e      	add	r6, r9
 80057fe:	eba5 0509 	sub.w	r5, r5, r9
 8005802:	6026      	str	r6, [r4, #0]
 8005804:	60a5      	str	r5, [r4, #8]
 8005806:	463e      	mov	r6, r7
 8005808:	42be      	cmp	r6, r7
 800580a:	d900      	bls.n	800580e <__ssputs_r+0x72>
 800580c:	463e      	mov	r6, r7
 800580e:	6820      	ldr	r0, [r4, #0]
 8005810:	4632      	mov	r2, r6
 8005812:	4641      	mov	r1, r8
 8005814:	f000 faa8 	bl	8005d68 <memmove>
 8005818:	68a3      	ldr	r3, [r4, #8]
 800581a:	1b9b      	subs	r3, r3, r6
 800581c:	60a3      	str	r3, [r4, #8]
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	4433      	add	r3, r6
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	2000      	movs	r0, #0
 8005826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800582a:	462a      	mov	r2, r5
 800582c:	f000 fad4 	bl	8005dd8 <_realloc_r>
 8005830:	4606      	mov	r6, r0
 8005832:	2800      	cmp	r0, #0
 8005834:	d1e0      	bne.n	80057f8 <__ssputs_r+0x5c>
 8005836:	6921      	ldr	r1, [r4, #16]
 8005838:	4650      	mov	r0, sl
 800583a:	f7ff feb7 	bl	80055ac <_free_r>
 800583e:	230c      	movs	r3, #12
 8005840:	f8ca 3000 	str.w	r3, [sl]
 8005844:	89a3      	ldrh	r3, [r4, #12]
 8005846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800584a:	81a3      	strh	r3, [r4, #12]
 800584c:	f04f 30ff 	mov.w	r0, #4294967295
 8005850:	e7e9      	b.n	8005826 <__ssputs_r+0x8a>
	...

08005854 <_svfiprintf_r>:
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	4698      	mov	r8, r3
 800585a:	898b      	ldrh	r3, [r1, #12]
 800585c:	061b      	lsls	r3, r3, #24
 800585e:	b09d      	sub	sp, #116	@ 0x74
 8005860:	4607      	mov	r7, r0
 8005862:	460d      	mov	r5, r1
 8005864:	4614      	mov	r4, r2
 8005866:	d510      	bpl.n	800588a <_svfiprintf_r+0x36>
 8005868:	690b      	ldr	r3, [r1, #16]
 800586a:	b973      	cbnz	r3, 800588a <_svfiprintf_r+0x36>
 800586c:	2140      	movs	r1, #64	@ 0x40
 800586e:	f7ff ff09 	bl	8005684 <_malloc_r>
 8005872:	6028      	str	r0, [r5, #0]
 8005874:	6128      	str	r0, [r5, #16]
 8005876:	b930      	cbnz	r0, 8005886 <_svfiprintf_r+0x32>
 8005878:	230c      	movs	r3, #12
 800587a:	603b      	str	r3, [r7, #0]
 800587c:	f04f 30ff 	mov.w	r0, #4294967295
 8005880:	b01d      	add	sp, #116	@ 0x74
 8005882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005886:	2340      	movs	r3, #64	@ 0x40
 8005888:	616b      	str	r3, [r5, #20]
 800588a:	2300      	movs	r3, #0
 800588c:	9309      	str	r3, [sp, #36]	@ 0x24
 800588e:	2320      	movs	r3, #32
 8005890:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005894:	f8cd 800c 	str.w	r8, [sp, #12]
 8005898:	2330      	movs	r3, #48	@ 0x30
 800589a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a38 <_svfiprintf_r+0x1e4>
 800589e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058a2:	f04f 0901 	mov.w	r9, #1
 80058a6:	4623      	mov	r3, r4
 80058a8:	469a      	mov	sl, r3
 80058aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058ae:	b10a      	cbz	r2, 80058b4 <_svfiprintf_r+0x60>
 80058b0:	2a25      	cmp	r2, #37	@ 0x25
 80058b2:	d1f9      	bne.n	80058a8 <_svfiprintf_r+0x54>
 80058b4:	ebba 0b04 	subs.w	fp, sl, r4
 80058b8:	d00b      	beq.n	80058d2 <_svfiprintf_r+0x7e>
 80058ba:	465b      	mov	r3, fp
 80058bc:	4622      	mov	r2, r4
 80058be:	4629      	mov	r1, r5
 80058c0:	4638      	mov	r0, r7
 80058c2:	f7ff ff6b 	bl	800579c <__ssputs_r>
 80058c6:	3001      	adds	r0, #1
 80058c8:	f000 80a7 	beq.w	8005a1a <_svfiprintf_r+0x1c6>
 80058cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058ce:	445a      	add	r2, fp
 80058d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80058d2:	f89a 3000 	ldrb.w	r3, [sl]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 809f 	beq.w	8005a1a <_svfiprintf_r+0x1c6>
 80058dc:	2300      	movs	r3, #0
 80058de:	f04f 32ff 	mov.w	r2, #4294967295
 80058e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058e6:	f10a 0a01 	add.w	sl, sl, #1
 80058ea:	9304      	str	r3, [sp, #16]
 80058ec:	9307      	str	r3, [sp, #28]
 80058ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80058f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80058f4:	4654      	mov	r4, sl
 80058f6:	2205      	movs	r2, #5
 80058f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fc:	484e      	ldr	r0, [pc, #312]	@ (8005a38 <_svfiprintf_r+0x1e4>)
 80058fe:	f7fa fc77 	bl	80001f0 <memchr>
 8005902:	9a04      	ldr	r2, [sp, #16]
 8005904:	b9d8      	cbnz	r0, 800593e <_svfiprintf_r+0xea>
 8005906:	06d0      	lsls	r0, r2, #27
 8005908:	bf44      	itt	mi
 800590a:	2320      	movmi	r3, #32
 800590c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005910:	0711      	lsls	r1, r2, #28
 8005912:	bf44      	itt	mi
 8005914:	232b      	movmi	r3, #43	@ 0x2b
 8005916:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800591a:	f89a 3000 	ldrb.w	r3, [sl]
 800591e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005920:	d015      	beq.n	800594e <_svfiprintf_r+0xfa>
 8005922:	9a07      	ldr	r2, [sp, #28]
 8005924:	4654      	mov	r4, sl
 8005926:	2000      	movs	r0, #0
 8005928:	f04f 0c0a 	mov.w	ip, #10
 800592c:	4621      	mov	r1, r4
 800592e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005932:	3b30      	subs	r3, #48	@ 0x30
 8005934:	2b09      	cmp	r3, #9
 8005936:	d94b      	bls.n	80059d0 <_svfiprintf_r+0x17c>
 8005938:	b1b0      	cbz	r0, 8005968 <_svfiprintf_r+0x114>
 800593a:	9207      	str	r2, [sp, #28]
 800593c:	e014      	b.n	8005968 <_svfiprintf_r+0x114>
 800593e:	eba0 0308 	sub.w	r3, r0, r8
 8005942:	fa09 f303 	lsl.w	r3, r9, r3
 8005946:	4313      	orrs	r3, r2
 8005948:	9304      	str	r3, [sp, #16]
 800594a:	46a2      	mov	sl, r4
 800594c:	e7d2      	b.n	80058f4 <_svfiprintf_r+0xa0>
 800594e:	9b03      	ldr	r3, [sp, #12]
 8005950:	1d19      	adds	r1, r3, #4
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	9103      	str	r1, [sp, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	bfbb      	ittet	lt
 800595a:	425b      	neglt	r3, r3
 800595c:	f042 0202 	orrlt.w	r2, r2, #2
 8005960:	9307      	strge	r3, [sp, #28]
 8005962:	9307      	strlt	r3, [sp, #28]
 8005964:	bfb8      	it	lt
 8005966:	9204      	strlt	r2, [sp, #16]
 8005968:	7823      	ldrb	r3, [r4, #0]
 800596a:	2b2e      	cmp	r3, #46	@ 0x2e
 800596c:	d10a      	bne.n	8005984 <_svfiprintf_r+0x130>
 800596e:	7863      	ldrb	r3, [r4, #1]
 8005970:	2b2a      	cmp	r3, #42	@ 0x2a
 8005972:	d132      	bne.n	80059da <_svfiprintf_r+0x186>
 8005974:	9b03      	ldr	r3, [sp, #12]
 8005976:	1d1a      	adds	r2, r3, #4
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	9203      	str	r2, [sp, #12]
 800597c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005980:	3402      	adds	r4, #2
 8005982:	9305      	str	r3, [sp, #20]
 8005984:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a48 <_svfiprintf_r+0x1f4>
 8005988:	7821      	ldrb	r1, [r4, #0]
 800598a:	2203      	movs	r2, #3
 800598c:	4650      	mov	r0, sl
 800598e:	f7fa fc2f 	bl	80001f0 <memchr>
 8005992:	b138      	cbz	r0, 80059a4 <_svfiprintf_r+0x150>
 8005994:	9b04      	ldr	r3, [sp, #16]
 8005996:	eba0 000a 	sub.w	r0, r0, sl
 800599a:	2240      	movs	r2, #64	@ 0x40
 800599c:	4082      	lsls	r2, r0
 800599e:	4313      	orrs	r3, r2
 80059a0:	3401      	adds	r4, #1
 80059a2:	9304      	str	r3, [sp, #16]
 80059a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a8:	4824      	ldr	r0, [pc, #144]	@ (8005a3c <_svfiprintf_r+0x1e8>)
 80059aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059ae:	2206      	movs	r2, #6
 80059b0:	f7fa fc1e 	bl	80001f0 <memchr>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d036      	beq.n	8005a26 <_svfiprintf_r+0x1d2>
 80059b8:	4b21      	ldr	r3, [pc, #132]	@ (8005a40 <_svfiprintf_r+0x1ec>)
 80059ba:	bb1b      	cbnz	r3, 8005a04 <_svfiprintf_r+0x1b0>
 80059bc:	9b03      	ldr	r3, [sp, #12]
 80059be:	3307      	adds	r3, #7
 80059c0:	f023 0307 	bic.w	r3, r3, #7
 80059c4:	3308      	adds	r3, #8
 80059c6:	9303      	str	r3, [sp, #12]
 80059c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059ca:	4433      	add	r3, r6
 80059cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80059ce:	e76a      	b.n	80058a6 <_svfiprintf_r+0x52>
 80059d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80059d4:	460c      	mov	r4, r1
 80059d6:	2001      	movs	r0, #1
 80059d8:	e7a8      	b.n	800592c <_svfiprintf_r+0xd8>
 80059da:	2300      	movs	r3, #0
 80059dc:	3401      	adds	r4, #1
 80059de:	9305      	str	r3, [sp, #20]
 80059e0:	4619      	mov	r1, r3
 80059e2:	f04f 0c0a 	mov.w	ip, #10
 80059e6:	4620      	mov	r0, r4
 80059e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059ec:	3a30      	subs	r2, #48	@ 0x30
 80059ee:	2a09      	cmp	r2, #9
 80059f0:	d903      	bls.n	80059fa <_svfiprintf_r+0x1a6>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d0c6      	beq.n	8005984 <_svfiprintf_r+0x130>
 80059f6:	9105      	str	r1, [sp, #20]
 80059f8:	e7c4      	b.n	8005984 <_svfiprintf_r+0x130>
 80059fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80059fe:	4604      	mov	r4, r0
 8005a00:	2301      	movs	r3, #1
 8005a02:	e7f0      	b.n	80059e6 <_svfiprintf_r+0x192>
 8005a04:	ab03      	add	r3, sp, #12
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	462a      	mov	r2, r5
 8005a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005a44 <_svfiprintf_r+0x1f0>)
 8005a0c:	a904      	add	r1, sp, #16
 8005a0e:	4638      	mov	r0, r7
 8005a10:	f3af 8000 	nop.w
 8005a14:	1c42      	adds	r2, r0, #1
 8005a16:	4606      	mov	r6, r0
 8005a18:	d1d6      	bne.n	80059c8 <_svfiprintf_r+0x174>
 8005a1a:	89ab      	ldrh	r3, [r5, #12]
 8005a1c:	065b      	lsls	r3, r3, #25
 8005a1e:	f53f af2d 	bmi.w	800587c <_svfiprintf_r+0x28>
 8005a22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a24:	e72c      	b.n	8005880 <_svfiprintf_r+0x2c>
 8005a26:	ab03      	add	r3, sp, #12
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	462a      	mov	r2, r5
 8005a2c:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <_svfiprintf_r+0x1f0>)
 8005a2e:	a904      	add	r1, sp, #16
 8005a30:	4638      	mov	r0, r7
 8005a32:	f000 f879 	bl	8005b28 <_printf_i>
 8005a36:	e7ed      	b.n	8005a14 <_svfiprintf_r+0x1c0>
 8005a38:	08005e84 	.word	0x08005e84
 8005a3c:	08005e8e 	.word	0x08005e8e
 8005a40:	00000000 	.word	0x00000000
 8005a44:	0800579d 	.word	0x0800579d
 8005a48:	08005e8a 	.word	0x08005e8a

08005a4c <_printf_common>:
 8005a4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a50:	4616      	mov	r6, r2
 8005a52:	4698      	mov	r8, r3
 8005a54:	688a      	ldr	r2, [r1, #8]
 8005a56:	690b      	ldr	r3, [r1, #16]
 8005a58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	bfb8      	it	lt
 8005a60:	4613      	movlt	r3, r2
 8005a62:	6033      	str	r3, [r6, #0]
 8005a64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a68:	4607      	mov	r7, r0
 8005a6a:	460c      	mov	r4, r1
 8005a6c:	b10a      	cbz	r2, 8005a72 <_printf_common+0x26>
 8005a6e:	3301      	adds	r3, #1
 8005a70:	6033      	str	r3, [r6, #0]
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	0699      	lsls	r1, r3, #26
 8005a76:	bf42      	ittt	mi
 8005a78:	6833      	ldrmi	r3, [r6, #0]
 8005a7a:	3302      	addmi	r3, #2
 8005a7c:	6033      	strmi	r3, [r6, #0]
 8005a7e:	6825      	ldr	r5, [r4, #0]
 8005a80:	f015 0506 	ands.w	r5, r5, #6
 8005a84:	d106      	bne.n	8005a94 <_printf_common+0x48>
 8005a86:	f104 0a19 	add.w	sl, r4, #25
 8005a8a:	68e3      	ldr	r3, [r4, #12]
 8005a8c:	6832      	ldr	r2, [r6, #0]
 8005a8e:	1a9b      	subs	r3, r3, r2
 8005a90:	42ab      	cmp	r3, r5
 8005a92:	dc26      	bgt.n	8005ae2 <_printf_common+0x96>
 8005a94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a98:	6822      	ldr	r2, [r4, #0]
 8005a9a:	3b00      	subs	r3, #0
 8005a9c:	bf18      	it	ne
 8005a9e:	2301      	movne	r3, #1
 8005aa0:	0692      	lsls	r2, r2, #26
 8005aa2:	d42b      	bmi.n	8005afc <_printf_common+0xb0>
 8005aa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005aa8:	4641      	mov	r1, r8
 8005aaa:	4638      	mov	r0, r7
 8005aac:	47c8      	blx	r9
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d01e      	beq.n	8005af0 <_printf_common+0xa4>
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	6922      	ldr	r2, [r4, #16]
 8005ab6:	f003 0306 	and.w	r3, r3, #6
 8005aba:	2b04      	cmp	r3, #4
 8005abc:	bf02      	ittt	eq
 8005abe:	68e5      	ldreq	r5, [r4, #12]
 8005ac0:	6833      	ldreq	r3, [r6, #0]
 8005ac2:	1aed      	subeq	r5, r5, r3
 8005ac4:	68a3      	ldr	r3, [r4, #8]
 8005ac6:	bf0c      	ite	eq
 8005ac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005acc:	2500      	movne	r5, #0
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	bfc4      	itt	gt
 8005ad2:	1a9b      	subgt	r3, r3, r2
 8005ad4:	18ed      	addgt	r5, r5, r3
 8005ad6:	2600      	movs	r6, #0
 8005ad8:	341a      	adds	r4, #26
 8005ada:	42b5      	cmp	r5, r6
 8005adc:	d11a      	bne.n	8005b14 <_printf_common+0xc8>
 8005ade:	2000      	movs	r0, #0
 8005ae0:	e008      	b.n	8005af4 <_printf_common+0xa8>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4652      	mov	r2, sl
 8005ae6:	4641      	mov	r1, r8
 8005ae8:	4638      	mov	r0, r7
 8005aea:	47c8      	blx	r9
 8005aec:	3001      	adds	r0, #1
 8005aee:	d103      	bne.n	8005af8 <_printf_common+0xac>
 8005af0:	f04f 30ff 	mov.w	r0, #4294967295
 8005af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005af8:	3501      	adds	r5, #1
 8005afa:	e7c6      	b.n	8005a8a <_printf_common+0x3e>
 8005afc:	18e1      	adds	r1, r4, r3
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	2030      	movs	r0, #48	@ 0x30
 8005b02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b06:	4422      	add	r2, r4
 8005b08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b10:	3302      	adds	r3, #2
 8005b12:	e7c7      	b.n	8005aa4 <_printf_common+0x58>
 8005b14:	2301      	movs	r3, #1
 8005b16:	4622      	mov	r2, r4
 8005b18:	4641      	mov	r1, r8
 8005b1a:	4638      	mov	r0, r7
 8005b1c:	47c8      	blx	r9
 8005b1e:	3001      	adds	r0, #1
 8005b20:	d0e6      	beq.n	8005af0 <_printf_common+0xa4>
 8005b22:	3601      	adds	r6, #1
 8005b24:	e7d9      	b.n	8005ada <_printf_common+0x8e>
	...

08005b28 <_printf_i>:
 8005b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b2c:	7e0f      	ldrb	r7, [r1, #24]
 8005b2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b30:	2f78      	cmp	r7, #120	@ 0x78
 8005b32:	4691      	mov	r9, r2
 8005b34:	4680      	mov	r8, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	469a      	mov	sl, r3
 8005b3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b3e:	d807      	bhi.n	8005b50 <_printf_i+0x28>
 8005b40:	2f62      	cmp	r7, #98	@ 0x62
 8005b42:	d80a      	bhi.n	8005b5a <_printf_i+0x32>
 8005b44:	2f00      	cmp	r7, #0
 8005b46:	f000 80d2 	beq.w	8005cee <_printf_i+0x1c6>
 8005b4a:	2f58      	cmp	r7, #88	@ 0x58
 8005b4c:	f000 80b9 	beq.w	8005cc2 <_printf_i+0x19a>
 8005b50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b58:	e03a      	b.n	8005bd0 <_printf_i+0xa8>
 8005b5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b5e:	2b15      	cmp	r3, #21
 8005b60:	d8f6      	bhi.n	8005b50 <_printf_i+0x28>
 8005b62:	a101      	add	r1, pc, #4	@ (adr r1, 8005b68 <_printf_i+0x40>)
 8005b64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b68:	08005bc1 	.word	0x08005bc1
 8005b6c:	08005bd5 	.word	0x08005bd5
 8005b70:	08005b51 	.word	0x08005b51
 8005b74:	08005b51 	.word	0x08005b51
 8005b78:	08005b51 	.word	0x08005b51
 8005b7c:	08005b51 	.word	0x08005b51
 8005b80:	08005bd5 	.word	0x08005bd5
 8005b84:	08005b51 	.word	0x08005b51
 8005b88:	08005b51 	.word	0x08005b51
 8005b8c:	08005b51 	.word	0x08005b51
 8005b90:	08005b51 	.word	0x08005b51
 8005b94:	08005cd5 	.word	0x08005cd5
 8005b98:	08005bff 	.word	0x08005bff
 8005b9c:	08005c8f 	.word	0x08005c8f
 8005ba0:	08005b51 	.word	0x08005b51
 8005ba4:	08005b51 	.word	0x08005b51
 8005ba8:	08005cf7 	.word	0x08005cf7
 8005bac:	08005b51 	.word	0x08005b51
 8005bb0:	08005bff 	.word	0x08005bff
 8005bb4:	08005b51 	.word	0x08005b51
 8005bb8:	08005b51 	.word	0x08005b51
 8005bbc:	08005c97 	.word	0x08005c97
 8005bc0:	6833      	ldr	r3, [r6, #0]
 8005bc2:	1d1a      	adds	r2, r3, #4
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6032      	str	r2, [r6, #0]
 8005bc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e09d      	b.n	8005d10 <_printf_i+0x1e8>
 8005bd4:	6833      	ldr	r3, [r6, #0]
 8005bd6:	6820      	ldr	r0, [r4, #0]
 8005bd8:	1d19      	adds	r1, r3, #4
 8005bda:	6031      	str	r1, [r6, #0]
 8005bdc:	0606      	lsls	r6, r0, #24
 8005bde:	d501      	bpl.n	8005be4 <_printf_i+0xbc>
 8005be0:	681d      	ldr	r5, [r3, #0]
 8005be2:	e003      	b.n	8005bec <_printf_i+0xc4>
 8005be4:	0645      	lsls	r5, r0, #25
 8005be6:	d5fb      	bpl.n	8005be0 <_printf_i+0xb8>
 8005be8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005bec:	2d00      	cmp	r5, #0
 8005bee:	da03      	bge.n	8005bf8 <_printf_i+0xd0>
 8005bf0:	232d      	movs	r3, #45	@ 0x2d
 8005bf2:	426d      	negs	r5, r5
 8005bf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bf8:	4859      	ldr	r0, [pc, #356]	@ (8005d60 <_printf_i+0x238>)
 8005bfa:	230a      	movs	r3, #10
 8005bfc:	e011      	b.n	8005c22 <_printf_i+0xfa>
 8005bfe:	6821      	ldr	r1, [r4, #0]
 8005c00:	6833      	ldr	r3, [r6, #0]
 8005c02:	0608      	lsls	r0, r1, #24
 8005c04:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c08:	d402      	bmi.n	8005c10 <_printf_i+0xe8>
 8005c0a:	0649      	lsls	r1, r1, #25
 8005c0c:	bf48      	it	mi
 8005c0e:	b2ad      	uxthmi	r5, r5
 8005c10:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c12:	4853      	ldr	r0, [pc, #332]	@ (8005d60 <_printf_i+0x238>)
 8005c14:	6033      	str	r3, [r6, #0]
 8005c16:	bf14      	ite	ne
 8005c18:	230a      	movne	r3, #10
 8005c1a:	2308      	moveq	r3, #8
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c22:	6866      	ldr	r6, [r4, #4]
 8005c24:	60a6      	str	r6, [r4, #8]
 8005c26:	2e00      	cmp	r6, #0
 8005c28:	bfa2      	ittt	ge
 8005c2a:	6821      	ldrge	r1, [r4, #0]
 8005c2c:	f021 0104 	bicge.w	r1, r1, #4
 8005c30:	6021      	strge	r1, [r4, #0]
 8005c32:	b90d      	cbnz	r5, 8005c38 <_printf_i+0x110>
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	d04b      	beq.n	8005cd0 <_printf_i+0x1a8>
 8005c38:	4616      	mov	r6, r2
 8005c3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c3e:	fb03 5711 	mls	r7, r3, r1, r5
 8005c42:	5dc7      	ldrb	r7, [r0, r7]
 8005c44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c48:	462f      	mov	r7, r5
 8005c4a:	42bb      	cmp	r3, r7
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	d9f4      	bls.n	8005c3a <_printf_i+0x112>
 8005c50:	2b08      	cmp	r3, #8
 8005c52:	d10b      	bne.n	8005c6c <_printf_i+0x144>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	07df      	lsls	r7, r3, #31
 8005c58:	d508      	bpl.n	8005c6c <_printf_i+0x144>
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	6861      	ldr	r1, [r4, #4]
 8005c5e:	4299      	cmp	r1, r3
 8005c60:	bfde      	ittt	le
 8005c62:	2330      	movle	r3, #48	@ 0x30
 8005c64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c6c:	1b92      	subs	r2, r2, r6
 8005c6e:	6122      	str	r2, [r4, #16]
 8005c70:	f8cd a000 	str.w	sl, [sp]
 8005c74:	464b      	mov	r3, r9
 8005c76:	aa03      	add	r2, sp, #12
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	f7ff fee6 	bl	8005a4c <_printf_common>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d14a      	bne.n	8005d1a <_printf_i+0x1f2>
 8005c84:	f04f 30ff 	mov.w	r0, #4294967295
 8005c88:	b004      	add	sp, #16
 8005c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	f043 0320 	orr.w	r3, r3, #32
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	4833      	ldr	r0, [pc, #204]	@ (8005d64 <_printf_i+0x23c>)
 8005c98:	2778      	movs	r7, #120	@ 0x78
 8005c9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c9e:	6823      	ldr	r3, [r4, #0]
 8005ca0:	6831      	ldr	r1, [r6, #0]
 8005ca2:	061f      	lsls	r7, r3, #24
 8005ca4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ca8:	d402      	bmi.n	8005cb0 <_printf_i+0x188>
 8005caa:	065f      	lsls	r7, r3, #25
 8005cac:	bf48      	it	mi
 8005cae:	b2ad      	uxthmi	r5, r5
 8005cb0:	6031      	str	r1, [r6, #0]
 8005cb2:	07d9      	lsls	r1, r3, #31
 8005cb4:	bf44      	itt	mi
 8005cb6:	f043 0320 	orrmi.w	r3, r3, #32
 8005cba:	6023      	strmi	r3, [r4, #0]
 8005cbc:	b11d      	cbz	r5, 8005cc6 <_printf_i+0x19e>
 8005cbe:	2310      	movs	r3, #16
 8005cc0:	e7ac      	b.n	8005c1c <_printf_i+0xf4>
 8005cc2:	4827      	ldr	r0, [pc, #156]	@ (8005d60 <_printf_i+0x238>)
 8005cc4:	e7e9      	b.n	8005c9a <_printf_i+0x172>
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	f023 0320 	bic.w	r3, r3, #32
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	e7f6      	b.n	8005cbe <_printf_i+0x196>
 8005cd0:	4616      	mov	r6, r2
 8005cd2:	e7bd      	b.n	8005c50 <_printf_i+0x128>
 8005cd4:	6833      	ldr	r3, [r6, #0]
 8005cd6:	6825      	ldr	r5, [r4, #0]
 8005cd8:	6961      	ldr	r1, [r4, #20]
 8005cda:	1d18      	adds	r0, r3, #4
 8005cdc:	6030      	str	r0, [r6, #0]
 8005cde:	062e      	lsls	r6, r5, #24
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	d501      	bpl.n	8005ce8 <_printf_i+0x1c0>
 8005ce4:	6019      	str	r1, [r3, #0]
 8005ce6:	e002      	b.n	8005cee <_printf_i+0x1c6>
 8005ce8:	0668      	lsls	r0, r5, #25
 8005cea:	d5fb      	bpl.n	8005ce4 <_printf_i+0x1bc>
 8005cec:	8019      	strh	r1, [r3, #0]
 8005cee:	2300      	movs	r3, #0
 8005cf0:	6123      	str	r3, [r4, #16]
 8005cf2:	4616      	mov	r6, r2
 8005cf4:	e7bc      	b.n	8005c70 <_printf_i+0x148>
 8005cf6:	6833      	ldr	r3, [r6, #0]
 8005cf8:	1d1a      	adds	r2, r3, #4
 8005cfa:	6032      	str	r2, [r6, #0]
 8005cfc:	681e      	ldr	r6, [r3, #0]
 8005cfe:	6862      	ldr	r2, [r4, #4]
 8005d00:	2100      	movs	r1, #0
 8005d02:	4630      	mov	r0, r6
 8005d04:	f7fa fa74 	bl	80001f0 <memchr>
 8005d08:	b108      	cbz	r0, 8005d0e <_printf_i+0x1e6>
 8005d0a:	1b80      	subs	r0, r0, r6
 8005d0c:	6060      	str	r0, [r4, #4]
 8005d0e:	6863      	ldr	r3, [r4, #4]
 8005d10:	6123      	str	r3, [r4, #16]
 8005d12:	2300      	movs	r3, #0
 8005d14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d18:	e7aa      	b.n	8005c70 <_printf_i+0x148>
 8005d1a:	6923      	ldr	r3, [r4, #16]
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	4649      	mov	r1, r9
 8005d20:	4640      	mov	r0, r8
 8005d22:	47d0      	blx	sl
 8005d24:	3001      	adds	r0, #1
 8005d26:	d0ad      	beq.n	8005c84 <_printf_i+0x15c>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	079b      	lsls	r3, r3, #30
 8005d2c:	d413      	bmi.n	8005d56 <_printf_i+0x22e>
 8005d2e:	68e0      	ldr	r0, [r4, #12]
 8005d30:	9b03      	ldr	r3, [sp, #12]
 8005d32:	4298      	cmp	r0, r3
 8005d34:	bfb8      	it	lt
 8005d36:	4618      	movlt	r0, r3
 8005d38:	e7a6      	b.n	8005c88 <_printf_i+0x160>
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4632      	mov	r2, r6
 8005d3e:	4649      	mov	r1, r9
 8005d40:	4640      	mov	r0, r8
 8005d42:	47d0      	blx	sl
 8005d44:	3001      	adds	r0, #1
 8005d46:	d09d      	beq.n	8005c84 <_printf_i+0x15c>
 8005d48:	3501      	adds	r5, #1
 8005d4a:	68e3      	ldr	r3, [r4, #12]
 8005d4c:	9903      	ldr	r1, [sp, #12]
 8005d4e:	1a5b      	subs	r3, r3, r1
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	dcf2      	bgt.n	8005d3a <_printf_i+0x212>
 8005d54:	e7eb      	b.n	8005d2e <_printf_i+0x206>
 8005d56:	2500      	movs	r5, #0
 8005d58:	f104 0619 	add.w	r6, r4, #25
 8005d5c:	e7f5      	b.n	8005d4a <_printf_i+0x222>
 8005d5e:	bf00      	nop
 8005d60:	08005e95 	.word	0x08005e95
 8005d64:	08005ea6 	.word	0x08005ea6

08005d68 <memmove>:
 8005d68:	4288      	cmp	r0, r1
 8005d6a:	b510      	push	{r4, lr}
 8005d6c:	eb01 0402 	add.w	r4, r1, r2
 8005d70:	d902      	bls.n	8005d78 <memmove+0x10>
 8005d72:	4284      	cmp	r4, r0
 8005d74:	4623      	mov	r3, r4
 8005d76:	d807      	bhi.n	8005d88 <memmove+0x20>
 8005d78:	1e43      	subs	r3, r0, #1
 8005d7a:	42a1      	cmp	r1, r4
 8005d7c:	d008      	beq.n	8005d90 <memmove+0x28>
 8005d7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d86:	e7f8      	b.n	8005d7a <memmove+0x12>
 8005d88:	4402      	add	r2, r0
 8005d8a:	4601      	mov	r1, r0
 8005d8c:	428a      	cmp	r2, r1
 8005d8e:	d100      	bne.n	8005d92 <memmove+0x2a>
 8005d90:	bd10      	pop	{r4, pc}
 8005d92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d9a:	e7f7      	b.n	8005d8c <memmove+0x24>

08005d9c <_sbrk_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4d06      	ldr	r5, [pc, #24]	@ (8005db8 <_sbrk_r+0x1c>)
 8005da0:	2300      	movs	r3, #0
 8005da2:	4604      	mov	r4, r0
 8005da4:	4608      	mov	r0, r1
 8005da6:	602b      	str	r3, [r5, #0]
 8005da8:	f7fc f950 	bl	800204c <_sbrk>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_sbrk_r+0x1a>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_sbrk_r+0x1a>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	2000031c 	.word	0x2000031c

08005dbc <memcpy>:
 8005dbc:	440a      	add	r2, r1
 8005dbe:	4291      	cmp	r1, r2
 8005dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dc4:	d100      	bne.n	8005dc8 <memcpy+0xc>
 8005dc6:	4770      	bx	lr
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dd2:	4291      	cmp	r1, r2
 8005dd4:	d1f9      	bne.n	8005dca <memcpy+0xe>
 8005dd6:	bd10      	pop	{r4, pc}

08005dd8 <_realloc_r>:
 8005dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ddc:	4680      	mov	r8, r0
 8005dde:	4615      	mov	r5, r2
 8005de0:	460c      	mov	r4, r1
 8005de2:	b921      	cbnz	r1, 8005dee <_realloc_r+0x16>
 8005de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005de8:	4611      	mov	r1, r2
 8005dea:	f7ff bc4b 	b.w	8005684 <_malloc_r>
 8005dee:	b92a      	cbnz	r2, 8005dfc <_realloc_r+0x24>
 8005df0:	f7ff fbdc 	bl	80055ac <_free_r>
 8005df4:	2400      	movs	r4, #0
 8005df6:	4620      	mov	r0, r4
 8005df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dfc:	f000 f81a 	bl	8005e34 <_malloc_usable_size_r>
 8005e00:	4285      	cmp	r5, r0
 8005e02:	4606      	mov	r6, r0
 8005e04:	d802      	bhi.n	8005e0c <_realloc_r+0x34>
 8005e06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e0a:	d8f4      	bhi.n	8005df6 <_realloc_r+0x1e>
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	4640      	mov	r0, r8
 8005e10:	f7ff fc38 	bl	8005684 <_malloc_r>
 8005e14:	4607      	mov	r7, r0
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d0ec      	beq.n	8005df4 <_realloc_r+0x1c>
 8005e1a:	42b5      	cmp	r5, r6
 8005e1c:	462a      	mov	r2, r5
 8005e1e:	4621      	mov	r1, r4
 8005e20:	bf28      	it	cs
 8005e22:	4632      	movcs	r2, r6
 8005e24:	f7ff ffca 	bl	8005dbc <memcpy>
 8005e28:	4621      	mov	r1, r4
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	f7ff fbbe 	bl	80055ac <_free_r>
 8005e30:	463c      	mov	r4, r7
 8005e32:	e7e0      	b.n	8005df6 <_realloc_r+0x1e>

08005e34 <_malloc_usable_size_r>:
 8005e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e38:	1f18      	subs	r0, r3, #4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	bfbc      	itt	lt
 8005e3e:	580b      	ldrlt	r3, [r1, r0]
 8005e40:	18c0      	addlt	r0, r0, r3
 8005e42:	4770      	bx	lr

08005e44 <_init>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr

08005e50 <_fini>:
 8005e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e52:	bf00      	nop
 8005e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e56:	bc08      	pop	{r3}
 8005e58:	469e      	mov	lr, r3
 8005e5a:	4770      	bx	lr
